; OM File Header - Saved 2015/05/13 19:01:52
; (6.0901 :patc (om-make-point 172 110) (om-make-point 387 22) (om-make-point 1077 945) "" 183 0 "2015/05/13 18:29:46" "2015/05/13 19:01:51")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../out-files/2015-05-13_18-38-35_omsox.png\"" "#P\"../../out-files/2015-05-13_18-38-35_omsox1.png\"" "#P\"../../out-files/2015-05-13_18-38-36_omsox.png\"" "#P\"../../out-files/2015-05-13_18-38-36_omsox1.png\"" "#P\"../../out-files/2015-05-13_18-38-36_omsox2.png\"" "#P\"../../out-files/2015-05-13_18-38-37_omsox.png\"" "#P\"../../out-files/2015-05-13_18-38-37_omsox1.png\"" "#P\"../../out-files/2015-05-13_18-38-37_omsox2.png\"" "#P\"../../out-files/2015-05-13_18-38-38_omsox.png\"" "#P\"../../out-files/2015-05-13_18-38-38_omsox1.png\"") (list (quote :sound) "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox1.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox2.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox3.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox4.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox5.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox6.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox7.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox8.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc_omsox9.aiff\"" "#P\"../../../OM-Geste/resources/audio/3D-acc.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Geste")))(setf *om-current-persistent* (om-load-patch1 "02-data-access" (quote ((let ((box (om-load-editor-box1 "GESTURE-MODEL" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" (quote :xa30) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" (quote :xre0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" (quote :xaa1) nil nil))) (om-make-point 142 198) (om-make-point 70 50) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list (quote :xa30) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list (quote :xre0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list (quote :xaa1) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list picture)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 1 5.0 (om-make-point 139 41) (om-make-point 946 724) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 707 175) (om-make-point 116 94) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 13 33 56 100)) (quote (0 74 25 75 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 574 302) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 814 562) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6032) (6065) (6225) (6049) (6655) (7196) (6694) (6498) (6113) (6099) (6428) (6835) (7076) (7038) (6698) (7037) (6125) (6562) (6440) (6606) (7035) (6543) (7091) (6663) (6584) (6879) (6131) (7084) (6983) (6518) (6062) (6069) (7086) (6426) (6018) (7039) (6128) (6721) (6405) (6325) (6956) (6257) (7132) (6701) (6401) (6735) (7007) (6297) (6814) (7156) (6737) (6143) (6451) (7058) (6101) (7180) (6680) (6067) (6493) (6123) (6243) (6903) (6467) (7055) (6714) (6766) (6605) (6267) (6232) (6872) (6422) (6175) (6395) (6171) (6006) (7023) (6977) (6793) (6563) (6358) (6227) (6405) (7135) (6790) (6994) (6536) (6969) (7140) (6784) (6443) (6424) (6982) (6076) (6776) (7131) (6681) (6102) (6736) (6223) (6511) (6628) (6889) (6000) (6182) (7142) (6077) (6040) (6880) (6666) (6948) (6619) (6880) (6965) (6576) (6024) (7008) (6042) (7014) (6194) (6868) (6140) (6519) (6772) (6299) (6139) (6175) (6606) (6112) (6112) (7063) (6685) (6258) (6310) (7006) (7107) (6169) (6510) (6843) (6801) (6607) (6782) (6162) (6480) (6583) (6943) (6582) (6375) (6915) (6134) (6086))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15900)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -13) nil nil (quote :microplayer) 109/100 nil 1000 0 (om-make-point 494 331) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 756 652) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 244 51) (quote "add-row allows to add external data$ to gesture model ") "" (om-make-point 290 284) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 34) (quote "sonagram+audio") "" (om-make-point 182 526) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 51 34) (quote "audio") "" (om-make-point 605 539) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 34) (quote "text annotations") "" (om-make-point 216 151) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" "XA30" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" "XRE0" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" "XAA1" nil nil) (om-load-inputkeyword (quote control-keyword) "" "audio" "audio" nil nil) (om-load-inputkeyword (quote control-keyword) "" "score" "score" nil nil))) (om-make-point 606 731) (om-make-point 142 137) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list "XA30" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list "XRE0" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list "XAA1" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list "audio" (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox1" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox1.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox2" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox2.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox3" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox3.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox4" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox4.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox5" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox5.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox6" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox6.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox7" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox7.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox8" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox8.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox9" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox9.aiff") (set-tonalite newobj nil) newobj))) (list "score" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6032) (6065) (6225) (6049) (6655) (7196) (6694) (6498) (6113) (6099))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6428) (6835) (7076) (7038) (6698) (7037) (6125) (6562) (6440) (6606))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7035) (6543) (7091) (6663) (6584) (6879) (6131) (7084) (6983) (6518))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6062) (6069) (7086) (6426) (6018) (7039) (6128) (6721) (6405) (6325))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6956) (6257) (7132) (6701) (6401) (6735) (7007) (6297) (6814) (7156))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6737) (6143) (6451) (7058) (6101) (7180) (6680) (6067) (6493) (6123))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6243) (6903) (6467) (7055) (6714) (6766) (6605) (6267) (6232) (6872))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6422) (6175) (6395) (6171) (6006) (7023) (6977) (6793) (6563) (6358))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6227) (6405) (7135) (6790) (6994) (6536) (6969) (7140) (6784) (6443))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6424) (6982) (6076) (6776) (7131) (6681) (6102) (6736) (6223) (6511))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox1" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox1.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox2" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox2.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox3" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox3.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox4" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox4.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox5" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox5.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox6" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox6.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox7" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox7.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox8" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox8.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc_omsox9" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc_omsox9.aiff") (set-tonalite newobj nil) newobj)) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6032) (6065) (6225) (6049) (6655) (7196) (6694) (6498) (6113) (6099))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6428) (6835) (7076) (7038) (6698) (7037) (6125) (6562) (6440) (6606))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7035) (6543) (7091) (6663) (6584) (6879) (6131) (7084) (6983) (6518))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6062) (6069) (7086) (6426) (6018) (7039) (6128) (6721) (6405) (6325))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6956) (6257) (7132) (6701) (6401) (6735) (7007) (6297) (6814) (7156))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6737) (6143) (6451) (7058) (6101) (7180) (6680) (6067) (6493) (6123))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6243) (6903) (6467) (7055) (6714) (6766) (6605) (6267) (6232) (6872))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6422) (6175) (6395) (6171) (6006) (7023) (6977) (6793) (6563) (6358))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6227) (6405) (7135) (6790) (6994) (6536) (6969) (7140) (6784) (6443))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6424) (6982) (6076) (6776) (7131) (6681) (6102) (6736) (6223) (6511))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1900)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list player cursor-mode obj-mode fontsize mode zoom score-mode notechancolor? show-stems approx cmnpref staff grillestep scale outport)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 464 43) (om-make-point 890 726) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) (quote :libaudiostream) (quote :normal) 1 24 0 1 0 nil (quote t) 2 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 1000 nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-ROW 2" (quote add-row) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "SLOTNAME" nil) (om-load-inputfun (quote input-funbox) "" "SLOTVALS" nil))) (om-make-point 598 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 598 574) (om-make-point 116 30) (list "audio" "score") "(\"audio\" \"score\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" (quote :xa30) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" (quote :xre0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" (quote :xaa1) nil nil))) (om-make-point 516 562) (om-make-point 70 50) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list (quote :xa30) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list (quote :xre0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list (quote :xaa1) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 10 40) (om-make-point 890 726) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-acc.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 727 565) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point -1483 -314) (om-make-point 1413 402) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" "XA30" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" "XRE0" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" "XAA1" nil nil) (om-load-inputkeyword (quote control-keyword) "" "sonagram" "sonagram" nil nil))) (om-make-point 215 732) (om-make-point 142 137) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list "XA30" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list "XRE0" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list "XAA1" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list "sonagram" (list (make-instance (quote picture) :name "2015-05-13_18-38-35_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-35_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox2" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox2" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox2" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox2" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox2" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox2" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-38_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-38_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (make-instance (quote picture) :name "2015-05-13_18-38-35_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-35_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-35_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-36_omsox2" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox2" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-36_omsox2" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-37_omsox2" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox2" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-37_omsox2" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-38_omsox" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) (make-instance (quote picture) :name "2015-05-13_18-38-38_omsox1" :source (quote nil) :pict-pathname (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox1" :type "png"))) :thepict (om-get-picture-file (restore-pict-path (restore-path (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "2015-05-13_18-38-38_omsox1" :type "png")))) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 0 22) (om-make-point 1355 784) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 209 575) (om-make-point 87 30) "sonagram" "\"sonagram\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-ROW 2" (quote add-row) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "SLOTNAME" nil) (om-load-inputfun (quote input-funbox) "" "SLOTVALS" nil) (om-load-inputkeyword (quote input-keyword) "" "sonagram" (quote :sonagram) (quote t) nil))) (om-make-point 209 643) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" (quote :xa30) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" (quote :xre0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" (quote :xaa1) nil nil))) (om-make-point 127 563) (om-make-point 70 50) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list (quote :xa30) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list (quote :xre0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list (quote :xaa1) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 10 40) (om-make-point 890 726) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 34) (quote "curves/bpfs") "" (om-make-point 716 138) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" (quote :xa30) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" (quote :xre0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" (quote :xaa1) nil nil))) (om-make-point 497 159) (om-make-point 70 50) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list (quote :xa30) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list (quote :xre0) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list (quote :xaa1) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) "x" nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 10 40) (om-make-point 890 726) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 10" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XPO3" (quote :xpo3) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XVE3" (quote :xve3) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XVEA" (quote :xvea) nil nil) (om-load-inputkeyword (quote control-keyword) "" "XEUL" (quote :xeul) nil nil) (om-load-inputkeyword (quote control-keyword) "" "annotation" (quote :annotation) nil nil))) (om-make-point 183 354) (om-make-point 140 127) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 7))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0.466 1.987 3.198 4.254 5.279 6.086 9.129 10.465)) (setf (lcontrols array) (list (list "XPO3" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.5180149 -0.51818926 -0.51842785 -0.5186667 -0.51892674 -0.5192236 -0.5196335 -0.5199283 -0.520289 -0.52069504 -0.52114767 -0.5216576 -0.5222147 -0.5228272 -0.5235036 -0.5242257 -0.52500654 -0.5259272 -0.52686996 -0.5278544 -0.52875704 -0.5298295 -0.5309439 -0.53206456 -0.53322214 -0.53440655 -0.535583 -0.5368571 -0.53815967 -0.5394243 -0.5407968 -0.5422075 -0.54357946 -0.5450086 -0.5465127 -0.5480324 -0.54951346 -0.55108655 -0.55272246 -0.5543606 -0.5560205 -0.5577425 -0.5594462 -0.561199 -0.56296927 -0.5647668 -0.56657047 -0.5684029 -0.57021237 -0.5721111 -0.57403976 -0.5759909 -0.57796407 -0.5799987 -0.58207596 -0.58415807 -0.58626956 -0.5884282 -0.5905984 -0.59277606 -0.59499664 -0.59727967 -0.59956837 -0.6018707 -0.6042149 -0.60660857 -0.6089846 -0.6114413 -0.61394746 -0.61646986 -0.6189652 -0.6215443 -0.6241388 -0.62677336 -0.62942547 -0.6320819 -0.634663 -0.6372633 -0.63989467 -0.6424325 -0.6450272 -0.64756924 -0.6500632 -0.65253067 -0.6549417 -0.6572899 -0.65958596 -0.66181225 -0.66404057 -0.6661243 -0.6681273 -0.67011106 -0.6719689 -0.6738402 -0.6755151 -0.6770497 -0.67845446 -0.67974854 -0.68091715 -0.6818848 -0.6827506 -0.68340135 -0.6839417 -0.68427927 -0.68442137 -0.6843398 -0.6841071 -0.68367756 -0.6830471 -0.68221534 -0.6811528 -0.6798701 -0.67835135 -0.676566 -0.6745541 -0.6722779 -0.66976274 -0.66699654 -0.66397167 -0.6606936 -0.65715576 -0.6532586 -0.6492397 -0.6448733 -0.6403018 -0.63558084 -0.63049174 -0.62516696 -0.6196498 -0.61390704 -0.6079146 -0.6016678 -0.59521026 -0.588501 -0.5815592 -0.574372 -0.5669968 -0.5593951 -0.55153275 -0.5434726 -0.5351919 -0.52667314 -0.51792545 -0.5089432 -0.49976167 -0.49037358 -0.48078915 -0.47100338 -0.46101078 -0.4508253 -0.44045907 -0.42988673 -0.41915682 -0.40825143 -0.39716184 -0.38594893 -0.37458348 -0.36307648 -0.35142303 -0.33961853 -0.32771456 -0.31570297 -0.3035143 -0.29125205 -0.2788722 -0.2664153 -0.25385994 -0.24119462 -0.22845446 -0.21569819 -0.20289052 -0.1901056 -0.17732288 -0.164615 -0.1519732 -0.13946559 -0.12708144 -0.11487305 -0.102829196 -0.09101797 -0.07933748 -0.067823775 -0.056366738 -0.045322743 -0.034485858 -0.023695788 -0.013284841 -0.0031080759 0.006902947 0.016753674 0.02623978 0.035569705 0.04460958 0.05327327 0.061602235 0.06971898 0.077437885 0.08481916 0.09183341 0.098461494 0.104690425 0.110543564 0.11625414 0.1213306 0.12628334 0.13056235 0.13484666 0.13860037 0.14202795 0.1451021 0.1477833 0.1501073 0.15216623 0.15359397 0.15487758 0.15589611 0.1566473 0.15716912 0.15741885 0.15747339 0.15728054 0.156894 0.15630786 0.1555041 0.15458435 0.15346009 0.1521291 0.15062532 0.14897391 0.1472001 0.14530389 0.14328595 0.14115094 0.13893003 0.13661976 0.13422692 0.1317862 0.12928154 0.126715 0.124091715 0.12141509 0.11872332 0.115986586 0.1131505 0.11042551 0.107615024 0.10482643 0.10206208 0.09933101 0.09662197 0.094007194 0.09145969 0.088996686 0.08659758 0.08428313 0.08203551 0.07986848 0.07768965 0.07559615 0.07356283 0.071576536 0.06960747 0.06771613 0.0658806 0.06404047 0.062198706 0.06038371 0.05856293 0.056728956 0.05486759 0.05294696 0.050913733 0.048830994 0.046595056 0.044241157 0.04171547 0.03908675 0.036265225 0.033301965 0.030214295 0.026978685 0.02361235 0.020008592 0.016279087 0.01243074 0.008433347 0.0042675813 8.0492E-6 -0.004403597 -0.00895906 -0.013654805 -0.018492187 -0.023468882 -0.028703623 -0.034063235 -0.039543298 -0.04516473 -0.050905526 -0.05678878 -0.06279454 -0.068946265 -0.07528272 -0.08171139 -0.088295236 -0.093310736)) (quote (0.5026709 0.50330204 0.5041226 0.50495387 0.5058019 0.5066711 0.5075324 0.5084375 0.5093446 0.5102538 0.5111627 0.5120649 0.5129645 0.51385546 0.5147395 0.515614 0.5164737 0.51729686 0.5181204 0.5189251 0.519738 0.52051145 0.5212735 0.52201736 0.5227467 0.5234659 0.5239087 0.52468 0.5253969 0.52578545 0.526284 0.5268027 0.5272297 0.5276567 0.52810055 0.5284991 0.52874887 0.52903414 0.5293249 0.5295166 0.5296532 0.5297867 0.5298254 0.52984125 0.52976144 0.52963317 0.5294051 0.5290981 0.528643 0.52815295 0.52759064 0.5268922 0.5260741 0.5252093 0.52425355 0.5231686 0.5219679 0.52063466 0.51917375 0.5175657 0.515813 0.5139919 0.5119772 0.5098452 0.50755036 0.5051186 0.50245244 0.4997039 0.4967766 0.4936195 0.49024823 0.48670903 0.48298758 0.479081 0.4750057 0.4706515 0.46604136 0.46120572 0.45622355 0.45097363 0.44566268 0.43996912 0.43401364 0.42788038 0.42165905 0.41503003 0.40817818 0.4010898 0.39386773 0.38637394 0.37865192 0.370872 0.3628452 0.3547825 0.34644032 0.33784747 0.32903096 0.3200261 0.31084266 0.30149814 0.29200953 0.28238168 0.27264458 0.2627973 0.25285167 0.24281241 0.23270093 0.22251572 0.21226251 0.20196802 0.19162537 0.18126528 0.17089235 0.16052586 0.1501785 0.13987074 0.12963052 0.11946163 0.10939356 0.099452846 0.08965322 0.079984136 0.07051377 0.06120963 0.052111756 0.043250077 0.034591228 0.026167091 0.01800304 0.010112451 0.0024991383 -0.0048529077 -0.011898715 -0.01864955 -0.02509332 -0.03124103 -0.037040964 -0.042518806 -0.047677078 -0.052492388 -0.05695566 -0.061063506 -0.06482875 -0.06821625 -0.07124514 -0.07389343 -0.07617267 -0.078077175 -0.0796052 -0.08075238 -0.08151861 -0.08190627 -0.0819259 -0.08156506 -0.080854595 -0.07977298 -0.07833909 -0.07656671 -0.074445576 -0.07200284 -0.06923567 -0.06615995 -0.06278777 -0.059101504 -0.05514846 -0.050919705 -0.04642728 -0.041694437 -0.036717926 -0.031517275 -0.026098615 -0.02048157 -0.014667906 -0.0086534275 -0.00244216 0.003942838 0.010520777 0.017241057 0.024145164 0.031246609 0.03852257 0.045987156 0.053375986 0.061277818 0.06931402 0.07720586 0.0856524 0.09422702 0.1029567 0.11151816 0.120637566 0.12955697 0.1387723 0.14817383 0.15769914 0.16751322 0.1774885 0.18759756 0.19783524 0.20823555 0.21867922 0.22938235 0.23995652 0.2509295 0.26172024 0.27289718 0.28376085 0.29479957 0.30594406 0.3171022 0.32831055 0.33955985 0.35074312 0.36226815 0.373638 0.3849156 0.39610684 0.4072071 0.41833195 0.42932686 0.44020614 0.4509182 0.46152493 0.47198695 0.48230073 0.49244922 0.5024724 0.51231307 0.5219818 0.5314487 0.54071045 0.54972816 0.55860556 0.56724006 0.5756599 0.58385826 0.591842 0.599596 0.6071131 0.6144009 0.6214781 0.6283298 0.6349492 0.64123965 0.6474301 0.6532994 0.6589641 0.6644392 0.6697185 0.6748373 0.67970694 0.68416507 0.68869156 0.69291687 0.6970104 0.7009949 0.7048512 0.70867956 0.7123316 0.71600974 0.7194957 0.72272563 0.7258279 0.72876955 0.73171467 0.7345017 0.7371376 0.7396393 0.7419888 0.74416167 0.7461959 0.7479421 0.74970526 0.7511422 0.7524391 0.7536143 0.7546181 0.75546265 0.75617385 0.7567532 0.75720644 0.757521 0.75770224 0.7577653 0.7577067 0.7575269 0.7572474 0.75682515 0.7562898 0.7556448 0.75485975 0.7539642 0.7529356 0.751774 0.7504882 0.7490423 0.7474933 0.7457992 0.7439324 0.74195 0.7398229 0.73749614 0.7350387 0.7324344 0.7303855)) (quote (0.96449394 0.96484775 0.9653376 0.9658841 0.96649266 0.9671568 0.967894 0.9686921 0.969579 0.97056 0.97162927 0.972803 0.97406495 0.97545636 0.9769402 0.97851927 0.98021347 0.9820202 0.98392636 0.9859018 0.9879559 0.99012566 0.9923572 0.99463547 0.9969826 0.99937535 1.0016524 1.0041778 1.0067041 1.0090469 1.011499 1.0139891 1.0164157 1.0188402 1.0212956 1.0237186 1.0260388 1.028382 1.0307144 1.0329441 1.0350952 1.0372088 1.0391917 1.0410873 1.042868 1.0445231 1.0460465 1.047447 1.0486523 1.0497673 1.0507445 1.0515571 1.0521833 1.0526903 1.0530489 1.0532129 1.0531739 1.0529816 1.0525738 1.0519374 1.0511128 1.050073 1.0488083 1.0472838 1.0455403 1.0435636 1.041267 1.0387879 1.0360533 1.0330373 1.0297139 1.0261701 1.0223489 1.0183088 1.0140488 1.0095594 1.0047927 0.9998106 0.9946808 0.9892843 0.9837777 0.97799927 0.9719744 0.96580124 0.95949036 0.9529051 0.9461714 0.93924404 0.9322332 0.92500985 0.9176188 0.9102261 0.90267116 0.8951849 0.887497 0.879663 0.87173886 0.8637709 0.85570604 0.84753 0.83935625 0.8310652 0.8227732 0.8144093 0.8059829 0.79746855 0.7889242 0.78031117 0.7716602 0.7629577 0.7542188 0.7454371 0.73662496 0.72778327 0.7189426 0.7100767 0.7012245 0.6923715 0.6835237 0.67467255 0.66582925 0.65689105 0.64808536 0.6391868 0.6303141 0.62152815 0.6126479 0.6037708 0.5949178 0.5860819 0.5772107 0.56831337 0.5594399 0.550551 0.54167414 0.5327627 0.5238825 0.5149908 0.50605017 0.4971098 0.4881482 0.47916356 0.47016418 0.46114397 0.4521536 0.44313073 0.434124 0.4251441 0.41618612 0.40729365 0.3984389 0.38961762 0.38088062 0.37223387 0.36363983 0.35516363 0.34682402 0.33857858 0.3304733 0.32247815 0.31463182 0.30693832 0.29938033 0.2920106 0.28480834 0.2777908 0.27096948 0.26437512 0.2579607 0.25176272 0.24583836 0.24015314 0.23470722 0.22955653 0.22474043 0.22019261 0.21599193 0.21215964 0.20864041 0.20552667 0.20268989 0.20015201 0.19789012 0.19603315 0.1944592 0.19313576 0.19224371 0.19165671 0.19134532 0.1912881 0.19165175 0.19225994 0.1931921 0.19448285 0.19609164 0.19800793 0.2003262 0.20301962 0.20609819 0.20955859 0.2133345 0.21759205 0.22201982 0.2270407 0.23227906 0.23794429 0.24376537 0.25013345 0.25683665 0.26393107 0.2713883 0.279176 0.28729433 0.2959572 0.30483785 0.31397724 0.3234546 0.33315673 0.3431739 0.3534747 0.36400062 0.374795 0.3858359 0.39710265 0.408657 0.4204127 0.4324154 0.44459018 0.45692927 0.46944416 0.4821047 0.49489158 0.50778383 0.5208263 0.5339394 0.54711384 0.5603726 0.57368714 0.5870312 0.6004082 0.61380905 0.62721724 0.6406451 0.6541394 0.66752297 0.6809205 0.69423777 0.7074821 0.7206536 0.73379195 0.7467054 0.7595487 0.7721704 0.7846738 0.79701055 0.80916256 0.8211232 0.83285285 0.8444042 0.8558649 0.8671622 0.8782148 0.8890827 0.899754 0.91030086 0.9206584 0.9308243 0.9408047 0.95060897 0.9602649 0.9697304 0.97893757 0.9880562 0.99691815 1.0056231 1.0141268 1.0224587 1.0305885 1.0385314 1.0463039 1.053911 1.0613314 1.0686367 1.0757257 1.0826292 1.0893257 1.0958279 1.1021392 1.1082287 1.1141373 1.119834 1.1253326 1.13065 1.1358432 1.1408136 1.1456113 1.1502279 1.1546599 1.1588929 1.1629559 1.1668328 1.1704837 1.1739903 1.1773154 1.1796787)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list 0.96449394 0.96484775 0.9653376 0.9658841 0.96649266 0.9671568 0.967894 0.9686921 0.969579 0.97056 0.97162927 0.972803 0.97406495 0.97545636 0.9769402 0.97851927 0.98021347 0.9820202 0.98392636 0.9859018 0.9879559 0.99012566 0.9923572 0.99463547 0.9969826 0.99937535 1.0016524 1.0041778 1.0067041 1.0090469 1.011499 1.0139891 1.0164157 1.0188402 1.0212956 1.0237186 1.0260388 1.028382 1.0307144 1.0329441 1.0350952 1.0372088 1.0391917 1.0410873 1.042868 1.0445231 1.0460465 1.047447 1.0486523 1.0497673 1.0507445 1.0515571 1.0521833 1.0526903 1.0530489 1.0532129 1.0531739 1.0529816 1.0525738 1.0519374 1.0511128 1.050073 1.0488083 1.0472838 1.0455403 1.0435636 1.041267 1.0387879 1.0360533 1.0330373 1.0297139 1.0261701 1.0223489 1.0183088 1.0140488 1.0095594 1.0047927 0.9998106 0.9946808 0.9892843 0.9837777 0.97799927 0.9719744 0.96580124 0.95949036 0.9529051 0.9461714 0.93924404 0.9322332 0.92500985 0.9176188 0.9102261 0.90267116 0.8951849 0.887497 0.879663 0.87173886 0.8637709 0.85570604 0.84753 0.83935625 0.8310652 0.8227732 0.8144093 0.8059829 0.79746855 0.7889242 0.78031117 0.7716602 0.7629577 0.7542188 0.7454371 0.73662496 0.72778327 0.7189426 0.7100767 0.7012245 0.6923715 0.6835237 0.67467255 0.66582925 0.65689105 0.64808536 0.6391868 0.6303141 0.62152815 0.6126479 0.6037708 0.5949178 0.5860819 0.5772107 0.56831337 0.5594399 0.550551 0.54167414 0.5327627 0.5238825 0.5149908 0.50605017 0.4971098 0.4881482 0.47916356 0.47016418 0.46114397 0.4521536 0.44313073 0.434124 0.4251441 0.41618612 0.40729365 0.3984389 0.38961762 0.38088062 0.37223387 0.36363983 0.35516363 0.34682402 0.33857858 0.3304733 0.32247815 0.31463182 0.30693832 0.29938033 0.2920106 0.28480834 0.2777908 0.27096948 0.26437512 0.2579607 0.25176272 0.24583836 0.24015314 0.23470722 0.22955653 0.22474043 0.22019261 0.21599193 0.21215964 0.20864041 0.20552667 0.20268989 0.20015201 0.19789012 0.19603315 0.1944592 0.19313576 0.19224371 0.19165671 0.19134532 0.1912881 0.19165175 0.19225994 0.1931921 0.19448285 0.19609164 0.19800793 0.2003262 0.20301962 0.20609819 0.20955859 0.2133345 0.21759205 0.22201982 0.2270407 0.23227906 0.23794429 0.24376537 0.25013345 0.25683665 0.26393107 0.2713883 0.279176 0.28729433 0.2959572 0.30483785 0.31397724 0.3234546 0.33315673 0.3431739 0.3534747 0.36400062 0.374795 0.3858359 0.39710265 0.408657 0.4204127 0.4324154 0.44459018 0.45692927 0.46944416 0.4821047 0.49489158 0.50778383 0.5208263 0.5339394 0.54711384 0.5603726 0.57368714 0.5870312 0.6004082 0.61380905 0.62721724 0.6406451 0.6541394 0.66752297 0.6809205 0.69423777 0.7074821 0.7206536 0.73379195 0.7467054 0.7595487 0.7721704 0.7846738 0.79701055 0.80916256 0.8211232 0.83285285 0.8444042 0.8558649 0.8671622 0.8782148 0.8890827 0.899754 0.91030086 0.9206584 0.9308243 0.9408047 0.95060897 0.9602649 0.9697304 0.97893757 0.9880562 0.99691815 1.0056231 1.0141268 1.0224587 1.0305885 1.0385314 1.0463039 1.053911 1.0613314 1.0686367 1.0757257 1.0826292 1.0893257 1.0958279 1.1021392 1.1082287 1.1141373 1.119834 1.1253326 1.13065 1.1358432 1.1408136 1.1456113 1.1502279 1.1546599 1.1588929 1.1629559 1.1668328 1.1704837 1.1739903 1.1773154 1.1796787))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.093310736 -0.09498263 -0.101765424 -0.10870906 -0.11570842 -0.12276675 -0.12988715 -0.13708592 -0.14433652 -0.15165895 -0.15908517 -0.166551 -0.17419863 -0.18185178 -0.18950866 -0.197233 -0.20502514 -0.21286544 -0.22080735 -0.22875257 -0.23674342 -0.24478513 -0.25287184 -0.26099944 -0.26915628 -0.27732494 -0.2855207 -0.2937249 -0.30192116 -0.3101273 -0.31832933 -0.3265365 -0.33471778 -0.34290642 -0.3510601 -0.35920355 -0.36730495 -0.37536606 -0.38335997 -0.3913083 -0.39917335 -0.40698034 -0.41469282 -0.42234096 -0.42989635 -0.43733805 -0.44465458 -0.45184255 -0.45887017 -0.46573672 -0.47246167 -0.47902894 -0.4853946 -0.49156588 -0.49737376 -0.5029876 -0.5083802 -0.5135251 -0.518401 -0.5229851 -0.5272279 -0.5311805 -0.53475965 -0.5379674 -0.5408679 -0.5432105 -0.5452191 -0.5467348 -0.5477997 -0.5484587 -0.54852826 -0.5480923 -0.547032 -0.5454034 -0.54304725 -0.54005874 -0.5363645 -0.53199637 -0.5269419 -0.521133 -0.51462234 -0.50735105 -0.49940187 -0.49068376 -0.48112103 -0.47083777 -0.45979524 -0.44803923 -0.43558025 -0.42241544 -0.4086467 -0.39424086 -0.37926263 -0.36376813 -0.3478141 -0.33140227 -0.31452662 -0.29732248 -0.279757 -0.26199055 -0.24395801 -0.22564785 -0.20715592 -0.18859034 -0.1699128 -0.15117964 -0.13245909 -0.113597825 -0.09510247 -0.07661035 -0.058192186 -0.039858673 -0.021774928 -0.0039584628 0.013621595 0.030941379 0.047939036 0.06466501 0.08107992 0.09717606 0.112900466 0.12826216 0.14323807 0.15787521 0.17209496 0.18596065 0.1993437 0.21230221 0.2248001 0.23684317 0.24847919 0.25966465 0.27042806 0.28076494 0.29070413 0.3002948 0.3094942 0.3183302 0.32683587 0.33501402 0.34286594 0.35039777 0.35766765 0.3646296 0.3713477 0.3778015 0.3840282 0.39000103 0.3957484 0.40127945 0.4065495 0.41165298 0.41656438 0.42127427 0.42584342 0.43024006 0.4344789 0.43856195 0.44246328 0.4462105 0.4498114 0.4533186 0.4566343 0.45979434 0.4628307 0.46574065 0.4684627 0.4710736 0.4735322 0.47585797 0.47806484 0.48015192 0.48213628 0.4839573 0.48570034 0.48731616 0.48883805 0.49026638 0.4916044 0.4928447 0.49400452 0.49508485 0.4960938 0.49704418 0.49793494 0.49877045 0.4995498 0.50029064 0.50100166 0.50169677 0.50235266 0.5029972 0.5036325 0.50425327 0.504866 0.50547195 0.5060549 0.50662464 0.50717944 0.5077112 0.50821615 0.50868404 0.5091328 0.5095567 0.50994677 0.5103096 0.51065064 0.51097185 0.51126004 0.5115211 0.51176554 0.5119865 0.51218856 0.5123673 0.51252407 0.51265365 0.512737 0.5128073 0.51284814 0.51285547 0.51281327 0.5127387 0.51261974 0.5124659 0.5122669 0.512013 0.51171107 0.51135964 0.51096565 0.5105112 0.5100122 0.5094338 0.50881666 0.5081451 0.50743884 0.5066861 0.50589216 0.5050509 0.50417555 0.5032646 0.502329 0.5013565 0.50035525 0.4993289)) (quote (0.7303855 0.7297025 0.72682626 0.7237669 0.7205881 0.71726537 0.7138109 0.710208 0.7064977 0.7026522 0.69861246 0.69442857 0.69005204 0.68557275 0.68095917 0.67620367 0.6713175 0.6662739 0.66106534 0.65570736 0.6501958 0.6445274 0.6387179 0.63273037 0.62657577 0.6202699 0.613792 0.60715735 0.60037566 0.593421 0.5862945 0.5789895 0.5715179 0.56386936 0.5560407 0.5480346 0.5398647 0.531496 0.5229384 0.51416284 0.50522393 0.49606842 0.486741 0.47718158 0.46742645 0.45747954 0.44732827 0.43698412 0.42644706 0.41570225 0.40474704 0.39357585 0.38220546 0.37064445 0.3590279 0.3472064 0.33518922 0.3230227 0.31070668 0.2982782 0.2858257 0.27327514 0.26070356 0.24810483 0.23553923 0.22306629 0.21063042 0.19828183 0.18607034 0.17402999 0.16222148 0.15080592 0.13976617 0.12916373 0.119111285 0.10957251 0.10053196 0.092155926 0.084375426 0.07708159 0.07054628 0.064468816 0.059166536 0.054428943 0.050120838 0.04629873 0.04322592 0.040494617 0.0383302 0.0368335 0.035842948 0.035314158 0.035249163 0.03565874 0.0366078 0.03802621 0.03991627 0.04224311 0.0450075 0.048200183 0.051828094 0.05588551 0.06031602 0.06514564 0.07035368 0.07595452 0.08194283 0.088057906 0.09481427 0.10184608 0.10920456 0.11684444 0.12467723 0.13257446 0.14078069 0.14899561 0.15733937 0.1658016 0.17447886 0.18319926 0.19196147 0.20076519 0.20960406 0.21849022 0.22740063 0.23619692 0.24506143 0.2539855 0.2629073 0.27188605 0.2809128 0.2899584 0.29904947 0.30815017 0.3172531 0.32646677 0.33561838 0.34476513 0.3538575 0.36292997 0.37192792 0.38088217 0.38971537 0.39851278 0.40720612 0.4158053 0.42427775 0.4326362 0.44085786 0.4489091 0.45679784 0.46453187 0.4720769 0.47944117 0.48658857 0.49355704 0.5003091 0.5069222 0.5133422 0.5195395 0.52554077 0.53133947 0.53699875 0.5424555 0.5477253 0.552803 0.5577529 0.56250674 0.5670514 0.57141155 0.5755802 0.57957286 0.5833887 0.5870183 0.5904872 0.5937635 0.5968971 0.5998716 0.60267544 0.6053463 0.6078679 0.61021954 0.61242855 0.6144964 0.61643094 0.61823857 0.619906 0.62145794 0.62289054 0.62422115 0.6254516 0.6265831 0.6276102 0.6285294 0.629348 0.63007254 0.6307139 0.63125664 0.63170136 0.63206006 0.6323523 0.63255495 0.63267786 0.6327213 0.6326839 0.63254804 0.6323413 0.6320546 0.6317041 0.63128287 0.6307895 0.63022894 0.6295884 0.6289112 0.62816215 0.62734026 0.6264631 0.62551874 0.6245018 0.6234267 0.6222976 0.6211067 0.6198585 0.61853254 0.6171475 0.6157112 0.6142216 0.6126669 0.61102975 0.6093339 0.60759157 0.60577214 0.6038777 0.601939 0.59993947 0.5978502 0.5957092 0.59351564 0.5912529 0.5889256 0.5865422 0.5841021 0.581617 0.5790801)) (quote (1.1796787 1.1804665 1.1834383 1.186274 1.1889166 1.1913583 1.1936406 1.1956968 1.1975757 1.1992515 1.2007412 1.201972 1.2028619 1.2035496 1.2040255 1.2042662 1.2042877 1.2040237 1.2034949 1.2026955 1.2016555 1.2003793 1.1988199 1.1969885 1.1948685 1.1924729 1.1897838 1.1868727 1.1836891 1.1802336 1.1765196 1.172523 1.1682799 1.1637793 1.1590254 1.1540089 1.1487432 1.1432368 1.1374709 1.1315074 1.1253166 1.1188674 1.1121781 1.1052506 1.0980764 1.090693 1.0831075 1.0753102 1.0673318 1.0591459 1.0507598 1.0421664 1.0333828 1.0244266 1.0154452 1.006222 0.99680955 0.9872022 0.9774536 0.9675186 0.9573726 0.94698424 0.93645907 0.92573256 0.9147467 0.90378416 0.8924927 0.8811056 0.8694851 0.8575674 0.84551424 0.8330831 0.8204523 0.80743605 0.7941462 0.78033734 0.76616925 0.75169594 0.7368874 0.7216449 0.70613266 0.6901611 0.6739822 0.65750576 0.6406068 0.62340665 0.6061994 0.58879716 0.5713955 0.5541421 0.5369112 0.51986725 0.5029796 0.48633268 0.47001788 0.45406306 0.43849632 0.42339784 0.40880096 0.39474297 0.3812079 0.3682448 0.35588548 0.34411165 0.3330058 0.32255027 0.3127782 0.3034583 0.29512164 0.2873226 0.28020573 0.2736626 0.26777956 0.26265138 0.25812736 0.25432006 0.2511167 0.24850905 0.2464523 0.24502228 0.24412212 0.24379559 0.24398142 0.24468194 0.24589561 0.24775017 0.2500307 0.25281703 0.25606838 0.25979143 0.26399535 0.26860744 0.27368414 0.27920726 0.2851162 0.29149154 0.29821798 0.3052761 0.31274942 0.32045475 0.32848609 0.3368137 0.34542573 0.35425347 0.3633245 0.3726188 0.38209525 0.3917425 0.40152657 0.41152576 0.42155027 0.43173423 0.4419962 0.45227346 0.46261284 0.47297212 0.48332745 0.4937264 0.5040714 0.51439167 0.52469725 0.53496415 0.54515344 0.5553066 0.5653974 0.5754612 0.5853433 0.5951693 0.6049189 0.61461545 0.62418277 0.63363225 0.64291716 0.6521351 0.6611833 0.67012656 0.6789055 0.6875448 0.69606865 0.7044732 0.71270705 0.72080797 0.7287658 0.73659307 0.7442723 0.7518056 0.7592056 0.7664547 0.77358664 0.7805953 0.78747285 0.794212 0.8008161 0.80725146 0.8135788 0.81975556 0.82582444 0.8317361 0.83752126 0.8432021 0.84875435 0.85416955 0.85945374 0.86460776 0.86964196 0.87454314 0.8793037 0.88394487 0.88844926 0.89283187 0.8970749 0.90119964 0.9052067 0.9091111 0.9128847 0.9165469 0.92009914 0.9235175 0.9268101 0.9299814 0.93305427 0.93601364 0.938854 0.9415525 0.94414205 0.946625 0.9489801 0.9512022 0.9532738 0.9552256 0.95706797 0.9587526 0.96025557 0.9616575 0.9629142 0.96400816 0.9649502 0.9657791 0.96646196 0.96699095 0.9673904 0.967659 0.96782017 0.9678552)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list 1.1796787 1.1804665 1.1834383 1.186274 1.1889166 1.1913583 1.1936406 1.1956968 1.1975757 1.1992515 1.2007412 1.201972 1.2028619 1.2035496 1.2040255 1.2042662 1.2042877 1.2040237 1.2034949 1.2026955 1.2016555 1.2003793 1.1988199 1.1969885 1.1948685 1.1924729 1.1897838 1.1868727 1.1836891 1.1802336 1.1765196 1.172523 1.1682799 1.1637793 1.1590254 1.1540089 1.1487432 1.1432368 1.1374709 1.1315074 1.1253166 1.1188674 1.1121781 1.1052506 1.0980764 1.090693 1.0831075 1.0753102 1.0673318 1.0591459 1.0507598 1.0421664 1.0333828 1.0244266 1.0154452 1.006222 0.99680955 0.9872022 0.9774536 0.9675186 0.9573726 0.94698424 0.93645907 0.92573256 0.9147467 0.90378416 0.8924927 0.8811056 0.8694851 0.8575674 0.84551424 0.8330831 0.8204523 0.80743605 0.7941462 0.78033734 0.76616925 0.75169594 0.7368874 0.7216449 0.70613266 0.6901611 0.6739822 0.65750576 0.6406068 0.62340665 0.6061994 0.58879716 0.5713955 0.5541421 0.5369112 0.51986725 0.5029796 0.48633268 0.47001788 0.45406306 0.43849632 0.42339784 0.40880096 0.39474297 0.3812079 0.3682448 0.35588548 0.34411165 0.3330058 0.32255027 0.3127782 0.3034583 0.29512164 0.2873226 0.28020573 0.2736626 0.26777956 0.26265138 0.25812736 0.25432006 0.2511167 0.24850905 0.2464523 0.24502228 0.24412212 0.24379559 0.24398142 0.24468194 0.24589561 0.24775017 0.2500307 0.25281703 0.25606838 0.25979143 0.26399535 0.26860744 0.27368414 0.27920726 0.2851162 0.29149154 0.29821798 0.3052761 0.31274942 0.32045475 0.32848609 0.3368137 0.34542573 0.35425347 0.3633245 0.3726188 0.38209525 0.3917425 0.40152657 0.41152576 0.42155027 0.43173423 0.4419962 0.45227346 0.46261284 0.47297212 0.48332745 0.4937264 0.5040714 0.51439167 0.52469725 0.53496415 0.54515344 0.5553066 0.5653974 0.5754612 0.5853433 0.5951693 0.6049189 0.61461545 0.62418277 0.63363225 0.64291716 0.6521351 0.6611833 0.67012656 0.6789055 0.6875448 0.69606865 0.7044732 0.71270705 0.72080797 0.7287658 0.73659307 0.7442723 0.7518056 0.7592056 0.7664547 0.77358664 0.7805953 0.78747285 0.794212 0.8008161 0.80725146 0.8135788 0.81975556 0.82582444 0.8317361 0.83752126 0.8432021 0.84875435 0.85416955 0.85945374 0.86460776 0.86964196 0.87454314 0.8793037 0.88394487 0.88844926 0.89283187 0.8970749 0.90119964 0.9052067 0.9091111 0.9128847 0.9165469 0.92009914 0.9235175 0.9268101 0.9299814 0.93305427 0.93601364 0.938854 0.9415525 0.94414205 0.946625 0.9489801 0.9512022 0.9532738 0.9552256 0.95706797 0.9587526 0.96025557 0.9616575 0.9629142 0.96400816 0.9649502 0.9657791 0.96646196 0.96699095 0.9673904 0.967659 0.96782017 0.9678552))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4993289 0.49828678 0.4972226 0.49614066 0.4950427 0.49393347 0.49282402 0.49170116 0.4905728 0.48944697 0.4883254 0.4871892 0.4860476 0.48489928 0.4837434 0.482574 0.48138276 0.4801699 0.47891834 0.4776284 0.47629377 0.4749191 0.47349787 0.47202417 0.4705024 0.46894273 0.4673293 0.46565646 0.46393245 0.46215522 0.46030396 0.45840094 0.45642328 0.45435908 0.4522218 0.44997898 0.44763014 0.4451876 0.44263715 0.43998173 0.437216 0.43432462 0.43129355 0.42812338 0.42481357 0.42135742 0.4177648 0.41402626 0.4101291 0.406093 0.4019098 0.397598 0.39318734 0.38866708 0.38406545 0.37936145 0.37456962 0.36967862 0.36469752 0.35962 0.35445702 0.34917822 0.3437745 0.3382525 0.33263013 0.3268732 0.3209858 0.31495935 0.30881876 0.30256498 0.29616597 0.28964907 0.28302205 0.27627 0.26939613 0.2623729 0.25525904 0.24802949 0.24064563 0.23313657 0.22551462 0.21776095 0.2098811 0.2018653 0.1937237 0.18547882 0.17707658 0.16855622 0.15990702 0.15116149 0.14229024 0.13330387 0.12420482 0.115012124 0.10571156 0.096275434 0.0866809 0.076979324 0.06719616 0.057267417 0.047200676 0.037117135 0.026842656 0.01645 0.0058590244 -0.0048618256 -0.01570669 -0.026720746 -0.03787252 -0.04917289 -0.060613364 -0.07216832 -0.08387006 -0.095667936 -0.10749541 -0.11942026 -0.13139467 -0.1434071 -0.15545696 -0.16754094 -0.17959926 -0.19158803 -0.20364495 -0.21565025 -0.22746629 -0.23922248 -0.2509309 -0.26251748 -0.27430034 -0.28589478 -0.29724848 -0.30839917 -0.31899035 -0.3299981 -0.34074563 -0.35076582 -0.36071983 -0.37054887 -0.38023406 -0.38977745 -0.3991013 -0.40823045 -0.41713816 -0.42582822 -0.43432787 -0.44261009 -0.45066813 -0.45848054 -0.46608293 -0.47342813 -0.4805822 -0.4874857 -0.49420282 -0.50064314 -0.5068798 -0.5128772 -0.51866955 -0.52427155 -0.5296125 -0.5347115 -0.5396317 -0.54431826 -0.5488052 -0.5529908 -0.55702794 -0.56095827 -0.564599 -0.5680711 -0.57136924 -0.57449145 -0.5774434 -0.58020896 -0.58278037 -0.5851744 -0.5873911 -0.5893669 -0.5912001 -0.59287286 -0.5943915 -0.59573794 -0.59689266 -0.5978329 -0.5985007 -0.5990238 -0.5992881 -0.5993524 -0.5992492 -0.5989231 -0.5983846 -0.5977291 -0.5969086 -0.5958919 -0.5947682 -0.59350384 -0.592137 -0.5906001 -0.58901465 -0.5872799 -0.5854822 -0.5835527 -0.58154375 -0.57946104 -0.5773381 -0.5750769 -0.57277817 -0.5703986 -0.5679595 -0.5654503 -0.56287826 -0.5602615 -0.5575929 -0.5548852)) (quote (0.5790801 0.5764504 0.5737879 0.57108474 0.56834746 0.5655392 0.5626665 0.55974824 0.5568168 0.55383784 0.55080987 0.5477509 0.54466767 0.5415486 0.53838474 0.5352 0.5319784 0.5287208 0.52542305 0.5220905 0.5187276 0.51531756 0.51187307 0.50838507 0.50486285 0.5012678 0.49762806 0.49394447 0.49018362 0.4863804 0.48255068 0.47864693 0.47471046 0.47073245 0.46670392 0.4626093 0.4585135 0.45436248 0.45018512 0.44595593 0.44168848 0.4373734 0.43301442 0.4286382 0.42421624 0.419749 0.4152352 0.41066685 0.40606144 0.40143105 0.3967758 0.3920917 0.3873617 0.3825898 0.37776405 0.3728958 0.3679805 0.36300012 0.3579582 0.35278505 0.3475344 0.34222806 0.33680838 0.3312983 0.32564366 0.31990862 0.31405595 0.3080746 0.30194864 0.29567042 0.2892534 0.28267652 0.27592704 0.26898322 0.26186273 0.25454366 0.2469824 0.23918692 0.23118203 0.22293768 0.21443054 0.20567505 0.19664541 0.18734296 0.17772536 0.16777376 0.15755536 0.14701692 0.1361497 0.12495206 0.113454096 0.10164527 0.08961195 0.077266954 0.064695016 0.051918734 0.039010436 0.025991165 0.012929682 -1.424905E-4 -0.01314392 -0.026055694 -0.038792558 -0.051324465 -0.06356985 -0.075490505 -0.08703492 -0.09810917 -0.108690225 -0.118756354 -0.12825786 -0.13720311 -0.14567349 -0.15347769 -0.1606979 -0.16720654 -0.17305033 -0.17826779 -0.18284907 -0.18682979 -0.19025208 -0.19325686 -0.19563976 -0.19759593 -0.1992769 -0.200587 -0.20155524 -0.20225315 -0.20242006 -0.20245321 -0.20241544 -0.20229362 -0.20208809 -0.20179612 -0.20150945 -0.20132382 -0.20116316 -0.20081598 -0.20058255 -0.20048027 -0.20050335 -0.20064251 -0.20088995 -0.20124921 -0.20171036 -0.2022891 -0.20296784 -0.20376578 -0.2046705 -0.20567295 -0.2067766 -0.20798394 -0.2092363 -0.21058318 -0.211994 -0.21347931 -0.21502723 -0.21656735 -0.21819541 -0.21988829 -0.22160776 -0.22337874 -0.2251852 -0.2269672 -0.22873172 -0.23053473 -0.23230955 -0.23405609 -0.23577628 -0.23743829 -0.23903235 -0.2405689 -0.2419908 -0.24330224 -0.2445071 -0.24554442 -0.24641767 -0.24713542 -0.24765468 -0.2480216 -0.2482263 -0.24827722 -0.24813986 -0.2479222 -0.24753748 -0.24700941 -0.24636756 -0.24551355 -0.24450168 -0.24329853 -0.24198382 -0.24045235 -0.23875244 -0.23690526 -0.23490279 -0.2327901 -0.23050422 -0.22812639 -0.2256004 -0.22297424 -0.22025644 -0.21742492 -0.2144816 -0.21148549 -0.20844756 -0.20531702 -0.20215088 -0.19892177 -0.19564107 -0.19232403 -0.1889515 -0.18552213)) (quote (0.9678552 0.96774054 0.96752966 0.9672093 0.96677816 0.9662265 0.965566 0.96480453 0.96396566 0.9630078 0.96195585 0.9608404 0.9596571 0.95838637 0.9570264 0.95559925 0.9540809 0.95250404 0.9508719 0.94916964 0.9474038 0.9455703 0.9436768 0.94171036 0.9396738 0.9375235 0.9353257 0.9330362 0.930662 0.9282036 0.925654 0.9230072 0.9202945 0.9174945 0.9146232 0.91161877 0.9085347 0.90535176 0.9020845 0.89870286 0.8952037 0.8915821 0.88785416 0.8840103 0.88002867 0.8759092 0.8716434 0.8672374 0.8626692 0.8579674 0.85307056 0.8479617 0.8426231 0.83706 0.83123464 0.825159 0.81879467 0.81214595 0.80519784 0.79796035 0.79039824 0.78255404 0.77443457 0.76602 0.7573168 0.74831295 0.739052 0.729478 0.7196039 0.70942957 0.69896257 0.6882142 0.6771697 0.66582925 0.65422225 0.6423451 0.6302285 0.61787707 0.60529894 0.5925305 0.5796421 0.5665351 0.5532902 0.5399416 0.52644426 0.51286614 0.49933952 0.4858289 0.472365 0.45904925 0.44593224 0.43309394 0.4205983 0.40847403 0.39681315 0.38565716 0.3751039 0.36514428 0.35589302 0.34736756 0.3396207 0.33267698 0.32655916 0.3213497 0.31694326 0.31348985 0.31087372 0.30912367 0.30819756 0.3080554 0.30875435 0.31022275 0.3124403 0.31543037 0.31916645 0.32362995 0.32890132 0.3348727 0.34151202 0.348859 0.35693303 0.36554036 0.374904 0.38485703 0.39523688 0.4062321 0.41773668 0.42975712 0.44261944 0.45579997 0.46926838 0.48302904 0.49686518 0.51142484 0.52617324 0.5406547 0.55545754 0.5705965 0.58587647 0.6013371 0.616856 0.6324648 0.6481408 0.6638167 0.67956377 0.69533164 0.7111108 0.7268842 0.74268407 0.75843537 0.7742256 0.78995926 0.8057147 0.82139475 0.8370546 0.8526374 0.8681463 0.8836619 0.89903665 0.9142777 0.92943454 0.9444484 0.95931954 0.974037 0.9886963 1.0031446 1.0173816 1.0314293 1.0452715 1.0589024 1.072337 1.0855495 1.0985051 1.111191 1.1236132 1.1357696 1.1475687 1.1590648 1.1701824 1.1809418 1.1913067 1.2012805 1.2108635 1.220101 1.2289002 1.2373152 1.2454236 1.2530789 1.2603731 1.2672272 1.2738042 1.2799016 1.285579 1.2908452 1.2957645 1.3003724 1.3045992 1.308485 1.3119923 1.3152385 1.31809 1.3206332 1.3227811 1.3246056 1.3261614 1.3273275 1.3281906 1.328724 1.3289276 1.3288204 1.3284216 1.3276535)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list 0.9678552 0.96774054 0.96752966 0.9672093 0.96677816 0.9662265 0.965566 0.96480453 0.96396566 0.9630078 0.96195585 0.9608404 0.9596571 0.95838637 0.9570264 0.95559925 0.9540809 0.95250404 0.9508719 0.94916964 0.9474038 0.9455703 0.9436768 0.94171036 0.9396738 0.9375235 0.9353257 0.9330362 0.930662 0.9282036 0.925654 0.9230072 0.9202945 0.9174945 0.9146232 0.91161877 0.9085347 0.90535176 0.9020845 0.89870286 0.8952037 0.8915821 0.88785416 0.8840103 0.88002867 0.8759092 0.8716434 0.8672374 0.8626692 0.8579674 0.85307056 0.8479617 0.8426231 0.83706 0.83123464 0.825159 0.81879467 0.81214595 0.80519784 0.79796035 0.79039824 0.78255404 0.77443457 0.76602 0.7573168 0.74831295 0.739052 0.729478 0.7196039 0.70942957 0.69896257 0.6882142 0.6771697 0.66582925 0.65422225 0.6423451 0.6302285 0.61787707 0.60529894 0.5925305 0.5796421 0.5665351 0.5532902 0.5399416 0.52644426 0.51286614 0.49933952 0.4858289 0.472365 0.45904925 0.44593224 0.43309394 0.4205983 0.40847403 0.39681315 0.38565716 0.3751039 0.36514428 0.35589302 0.34736756 0.3396207 0.33267698 0.32655916 0.3213497 0.31694326 0.31348985 0.31087372 0.30912367 0.30819756 0.3080554 0.30875435 0.31022275 0.3124403 0.31543037 0.31916645 0.32362995 0.32890132 0.3348727 0.34151202 0.348859 0.35693303 0.36554036 0.374904 0.38485703 0.39523688 0.4062321 0.41773668 0.42975712 0.44261944 0.45579997 0.46926838 0.48302904 0.49686518 0.51142484 0.52617324 0.5406547 0.55545754 0.5705965 0.58587647 0.6013371 0.616856 0.6324648 0.6481408 0.6638167 0.67956377 0.69533164 0.7111108 0.7268842 0.74268407 0.75843537 0.7742256 0.78995926 0.8057147 0.82139475 0.8370546 0.8526374 0.8681463 0.8836619 0.89903665 0.9142777 0.92943454 0.9444484 0.95931954 0.974037 0.9886963 1.0031446 1.0173816 1.0314293 1.0452715 1.0589024 1.072337 1.0855495 1.0985051 1.111191 1.1236132 1.1357696 1.1475687 1.1590648 1.1701824 1.1809418 1.1913067 1.2012805 1.2108635 1.220101 1.2289002 1.2373152 1.2454236 1.2530789 1.2603731 1.2672272 1.2738042 1.2799016 1.285579 1.2908452 1.2957645 1.3003724 1.3045992 1.308485 1.3119923 1.3152385 1.31809 1.3206332 1.3227811 1.3246056 1.3261614 1.3273275 1.3281906 1.328724 1.3289276 1.3288204 1.3284216 1.3276535))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.5548852 -0.5521252 -0.5493217 -0.5464766 -0.54355985 -0.54062504 -0.53766025 -0.5346425 -0.53157557 -0.5284315 -0.5252678 -0.5220335 -0.51872057 -0.51533705 -0.51190395 -0.50838614 -0.504799 -0.50116766 -0.49746904 -0.49373382 -0.48995063 -0.4861314 -0.48230717 -0.47846717 -0.4745815 -0.47068712 -0.46676362 -0.46282828 -0.458843 -0.45480904 -0.45072103 -0.44653416 -0.44221994 -0.43775812 -0.43313602 -0.42831078 -0.42328683 -0.41801402 -0.41245604 -0.40656313 -0.40028968 -0.39356828 -0.3863611 -0.3786023 -0.37021244 -0.361178 -0.35148272 -0.3410922 -0.3300165 -0.3182692 -0.30586785 -0.29281276 -0.27919158 -0.26509884 -0.25070813 -0.23623099 -0.22157471 -0.20675913 -0.19191759 -0.1771936 -0.16264369 -0.14833562 -0.13438596 -0.12076854 -0.10762324 -0.09488364 -0.08263339 -0.070810125 -0.05946994 -0.048601006 -0.038182844 -0.028209597 -0.018610744 -0.00940142 -5.426856E-4 0.007879682 0.015943408 0.023622925 0.030880876 0.03774849 0.044192907 0.050127246 0.05580208 0.060890146 0.065643095 0.06993255 0.07376494 0.07707836 0.07985656 0.08217057 0.08399764 0.08547387 0.08616253 0.08662799 0.08631674 0.08554841 0.08427106 0.08276484 0.08064112 0.07805568 0.07507903 0.07151209 0.06759599 0.06320723 0.05840537 0.053184033 0.047635187 0.041705508 0.03543899 0.028873517 0.02207489 0.015060524 0.007897459 6.352341E-4 -0.006699535 -0.014074213 -0.021415774 -0.02870422 -0.03588657 -0.042933222 -0.04981975 -0.056505837 -0.06297813 -0.06920325 -0.07510502 -0.08073964 -0.08606747 -0.09108952 -0.09578372 -0.10014402 -0.10416446 -0.10789385 -0.11121745 -0.11423269 -0.11686233 -0.11920153 -0.12125021 -0.1230153 -0.124493465 -0.1257199 -0.12671195 -0.12745415 -0.12797427 -0.12827038 -0.12835975 -0.12824789 -0.12793133 -0.12744127 -0.12677889 -0.12594483 -0.12495958 -0.123844736 -0.122604534 -0.12121004 -0.11972718 -0.11816031 -0.116493106 -0.11473174 -0.11289487 -0.110991836 -0.10903661 -0.10704566 -0.10503481 -0.1030299 -0.10103019 -0.099043064 -0.09707603 -0.09514269 -0.0932628 -0.09145177 -0.08970506 -0.08804744 -0.08653256 -0.08508839 -0.0837564 -0.0825385 -0.08143248 -0.08045402 -0.07962979 -0.07899156 -0.07851174 -0.07822031 -0.07812273 -0.07822858 -0.07853282 -0.079059996 -0.07978373 -0.08074465 -0.0819122 -0.08328342 -0.084858686 -0.08663114 -0.08857868 -0.090713725 -0.09301812 -0.095482424 -0.09810527 -0.10087863 -0.103787005 -0.106836446 -0.10999871 -0.113280766 -0.11667741 -0.12016807 -0.12372252 -0.12731146 -0.1283615)) (quote (-0.18552213 -0.18206239 -0.17856322 -0.17503113 -0.17143709 -0.16788057 -0.1643125 -0.1607353 -0.15716824 -0.15358019 -0.15004951 -0.14653847 -0.14304416 -0.13956231 -0.13608134 -0.13260824 -0.12914536 -0.12566607 -0.122181386 -0.11865056 -0.115106136 -0.11150552 -0.10787876 -0.104200445 -0.10045696 -0.096657835 -0.092791975 -0.08888397 -0.08493026 -0.08093391 -0.07697045 -0.073024705 -0.069108226 -0.065233425 -0.061371886 -0.057559878 -0.053791654 -0.050031852 -0.04631296 -0.04260686 -0.038930156 -0.03531963 -0.0317987 -0.028408433 -0.025138949 -0.022034504 -0.01909046 -0.016202415 -0.0133811 -0.010676521 -0.008074372 -0.0056247227 -0.0033204204 -0.0011740042 7.467304E-4 0.002429559 0.003983852 0.005435406 0.0067709414 0.0080039175 0.009139308 0.010267811 0.011346594 0.012480783 0.013616649 0.014839769 0.01614933 0.017588443 0.019117685 0.020756992 0.022500936 0.024327662 0.026331062 0.028472266 0.03075109 0.033139415 0.03567759 0.03832793 0.041090194 0.043943275 0.046961837 0.05003762 0.053292226 0.056603887 0.06005503 0.06355918 0.06715549 0.07081651 0.07451604 0.07829122 0.0821201 0.08610657 0.090038985 0.094077304 0.09796359 0.10193701 0.10597432 0.110251114 0.1144559 0.11872291 0.123090036 0.12747616 0.13191985 0.13643298 0.14099781 0.1456048 0.15027206 0.15494895 0.15962644 0.16428663 0.16892372 0.17348162 0.1779652 0.18234837 0.18661784 0.19073154 0.19467697 0.19843424 0.20197657 0.20530783 0.20844035 0.21131493 0.21395956 0.21633618 0.2185274 0.22043877 0.22207834 0.22342186 0.22447177 0.2252489 0.22572977 0.22580409 0.22569879 0.22523259 0.22458811 0.2236429 0.2224222 0.22091306 0.21918956 0.2172099 0.21496469 0.21254495 0.2099662 0.20723036 0.20433115 0.20129532 0.19816046 0.19489497 0.19151543 0.18803574 0.18447419 0.18082373 0.17710458 0.173328 0.16950876 0.16563082 0.16171988 0.15777536 0.15381842 0.14983551 0.1458187 0.1418101 0.13777033 0.13370073 0.12959305 0.12545319 0.12129161 0.11710564 0.11289936 0.10874926 0.10458399 0.100374505 0.09626687 0.092163816 0.08804239 0.08395814 0.079915226 0.07601139 0.072169505 0.06843468 0.06483568 0.061387796 0.05813027 0.05510105 0.052292243 0.049723048 0.047401753 0.045403988 0.043619864 0.04205145 0.040720608 0.039644644 0.03879405 0.038188678 0.037788235 0.03760361 0.03761755 0.037819174 0.03821089 0.03879361 0.03955262 0.040459995 0.041547146 0.04279688 0.044285477 0.045888815 0.046383854)) (quote (1.3276535 1.3265935 1.3251689 1.3234035 1.3212373 1.3188003 1.3159775 1.3127862 1.3092069 1.3052027 1.3008367 1.2960676 1.2908628 1.2852346 1.2791733 1.2726781 1.2657365 1.2583387 1.2504735 1.2421475 1.2332689 1.223827 1.2138057 1.2031752 1.1919062 1.1799371 1.167271 1.153861 1.1396735 1.124666 1.1088683 1.0921946 1.0746566 1.0562158 1.0368852 1.0166208 0.9954383 0.97331834 0.9502166 0.92617924 0.90121317 0.87535465 0.84866024 0.8212236 0.7931274 0.76455087 0.7357201 0.70678616 0.6778079 0.6489324 0.6202437 0.59196234 0.5642334 0.5371899 0.5109947 0.48592693 0.46189126 0.43899053 0.4172939 0.39692366 0.3777289 0.36002806 0.34353626 0.32851872 0.31462774 0.30197927 0.29048374 0.28024924 0.2710008 0.26266772 0.25518832 0.24841073 0.24250035 0.23720284 0.23247741 0.22833666 0.22469619 0.22151473 0.21888937 0.21656932 0.21488138 0.21356994 0.21277528 0.21231078 0.21248535 0.21310093 0.2141291 0.21562849 0.21762008 0.22008069 0.22297746 0.22637126 0.23018748 0.23454973 0.23944353 0.24487067 0.25083128 0.25738904 0.264435 0.27214587 0.2806413 0.28973904 0.29967564 0.31031743 0.3217602 0.33399224 0.34706143 0.3609775 0.3757248 0.3913868 0.4078327 0.42513242 0.44324747 0.4621056 0.48167092 0.5019072 0.5228209 0.5443182 0.56637007 0.5889089 0.61187244 0.6352453 0.6589601 0.68300117 0.7071786 0.7315576 0.7560893 0.7807502 0.8054354 0.83012426 0.85474867 0.8793048 0.90367496 0.9278805 0.9518472 0.9755528 0.9989874 1.0221065 1.0449091 1.0673468 1.0893731 1.1109812 1.1321356 1.1528264 1.1730877 1.1928716 1.2121673 1.2309795 1.2493191 1.2671701 1.2845315 1.301357 1.3175976 1.3333788 1.3485849 1.3632596 1.3773736 1.3909496 1.4039613 1.416445 1.4283754 1.4397163 1.4504969 1.4607335 1.4704126 1.4795199 1.4880631 1.4960519 1.5034886 1.5103189 1.5166025 1.522312 1.5274302 1.5319961 1.5359905 1.5394365 1.5423429 1.5446869 1.5464953 1.5477414 1.548464 1.5486581 1.5483149 1.5474386 1.5460365 1.5441103 1.541658 1.5386555 1.5351329 1.531097 1.5265604 1.5215079 1.5159596 1.5098854 1.5033069 1.4962174 1.4886415 1.4805534 1.4719689 1.4628675 1.4532559 1.443157 1.4325522 1.4214397 1.4098156 1.3977169 1.3940982)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 1.3276535 1.3265935 1.3251689 1.3234035 1.3212373 1.3188003 1.3159775 1.3127862 1.3092069 1.3052027 1.3008367 1.2960676 1.2908628 1.2852346 1.2791733 1.2726781 1.2657365 1.2583387 1.2504735 1.2421475 1.2332689 1.223827 1.2138057 1.2031752 1.1919062 1.1799371 1.167271 1.153861 1.1396735 1.124666 1.1088683 1.0921946 1.0746566 1.0562158 1.0368852 1.0166208 0.9954383 0.97331834 0.9502166 0.92617924 0.90121317 0.87535465 0.84866024 0.8212236 0.7931274 0.76455087 0.7357201 0.70678616 0.6778079 0.6489324 0.6202437 0.59196234 0.5642334 0.5371899 0.5109947 0.48592693 0.46189126 0.43899053 0.4172939 0.39692366 0.3777289 0.36002806 0.34353626 0.32851872 0.31462774 0.30197927 0.29048374 0.28024924 0.2710008 0.26266772 0.25518832 0.24841073 0.24250035 0.23720284 0.23247741 0.22833666 0.22469619 0.22151473 0.21888937 0.21656932 0.21488138 0.21356994 0.21277528 0.21231078 0.21248535 0.21310093 0.2141291 0.21562849 0.21762008 0.22008069 0.22297746 0.22637126 0.23018748 0.23454973 0.23944353 0.24487067 0.25083128 0.25738904 0.264435 0.27214587 0.2806413 0.28973904 0.29967564 0.31031743 0.3217602 0.33399224 0.34706143 0.3609775 0.3757248 0.3913868 0.4078327 0.42513242 0.44324747 0.4621056 0.48167092 0.5019072 0.5228209 0.5443182 0.56637007 0.5889089 0.61187244 0.6352453 0.6589601 0.68300117 0.7071786 0.7315576 0.7560893 0.7807502 0.8054354 0.83012426 0.85474867 0.8793048 0.90367496 0.9278805 0.9518472 0.9755528 0.9989874 1.0221065 1.0449091 1.0673468 1.0893731 1.1109812 1.1321356 1.1528264 1.1730877 1.1928716 1.2121673 1.2309795 1.2493191 1.2671701 1.2845315 1.301357 1.3175976 1.3333788 1.3485849 1.3632596 1.3773736 1.3909496 1.4039613 1.416445 1.4283754 1.4397163 1.4504969 1.4607335 1.4704126 1.4795199 1.4880631 1.4960519 1.5034886 1.5103189 1.5166025 1.522312 1.5274302 1.5319961 1.5359905 1.5394365 1.5423429 1.5446869 1.5464953 1.5477414 1.548464 1.5486581 1.5483149 1.5474386 1.5460365 1.5441103 1.541658 1.5386555 1.5351329 1.531097 1.5265604 1.5215079 1.5159596 1.5098854 1.5033069 1.4962174 1.4886415 1.4805534 1.4719689 1.4628675 1.4532559 1.443157 1.4325522 1.4214397 1.4098156 1.3977169 1.3940982))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.1283615 -0.13098686 -0.13473934 -0.13853844 -0.1423658 -0.14624 -0.15018597 -0.1541338 -0.15809694 -0.16206788 -0.16602797 -0.16996727 -0.17387487 -0.17772235 -0.18150454 -0.18517408 -0.1887112 -0.19209846 -0.19529145 -0.19826366 -0.20099229 -0.20343532 -0.20550817 -0.20722117 -0.20851016 -0.20931076 -0.20958513 -0.20924863 -0.2082417 -0.20648115 -0.2039526 -0.20068805 -0.19671002 -0.19208446 -0.18689531 -0.18130544 -0.17541933 -0.16932968 -0.16305737 -0.15663943 -0.15008067 -0.14347156 -0.13685617 -0.13029939 -0.12385948 -0.11756691 -0.11148172 -0.10568533 -0.10005242 -0.094685175 -0.08959985 -0.08480675 -0.08027042 -0.07601813 -0.07200296 -0.0682325 -0.06466678 -0.06129512 -0.058111117 -0.055085503 -0.052205306 -0.04945122 -0.046808936 -0.044272654 -0.04183486 -0.039491944 -0.03723788 -0.035050344 -0.03293157 -0.030899104 -0.028935664 -0.02703882 -0.025196964 -0.023424486 -0.021684496 -0.020053665 -0.018461848 -0.016939177 -0.015459444 -0.014014049 -0.0126195345 -0.011287253 -0.010012143 -0.008764176 -0.0075778794 -0.0064081988 -0.00526722 -0.0041606147 -0.0030867013 -0.002044625 -0.0010198612 -3.4708E-5 9.102112E-4 0.001840925 0.0027280096 0.003579044 0.004390807 0.00518781 0.0059398436 0.006653166 0.0073261354 0.007972779 0.008593904 0.009181197 0.009733812 0.010242704 0.010725472 0.011175538 0.011606043 0.012012453 0.012405644 0.012760656 0.0130989095 0.013431 0.013734811 0.014029865 0.01430685 0.014580366 0.014841253 0.015107784 0.015372782 0.015636525 0.015885052 0.016142901 0.016400777 0.016649504 0.016875769 0.017094149 0.017317392 0.017527745 0.017733243 0.017943945 0.018140909 0.0183252 0.018494787 0.018662379 0.018828333 0.018999527 0.01915869 0.019304974 0.019427484 0.019561984 0.019694517 0.019831432 0.019957046 0.020063142 0.020174113 0.020290155 0.020411069 0.020535045 0.020661628 0.020778036 0.020886 0.0209764 0.021082161 0.021169179 0.0212642 0.021364768 0.021458717 0.021558125 0.021648666 0.02173811 0.021802199)) (quote (0.046383854 0.04762156 0.049484358 0.051448744 0.053495806 0.055652723 0.057808206 0.06009803 0.06236557 0.06473464 0.06718172 0.06969143 0.07225896 0.07487708 0.077534206 0.08025288 0.083026655 0.08583377 0.08870079 0.09162147 0.09454673 0.09753877 0.10056174 0.10360508 0.10668116 0.10976132 0.112845876 0.11592133 0.119015604 0.12216065 0.12534538 0.12850112 0.13160354 0.134652 0.13767196 0.14070364 0.14375298 0.14683374 0.14998369 0.15315745 0.15632306 0.15940301 0.16232856 0.16510251 0.16770846 0.17016506 0.17249234 0.17468004 0.17679784 0.1788101 0.18074028 0.18260871 0.1844061 0.18615294 0.18784517 0.18951039 0.19115755 0.19278975 0.19442523 0.19606914 0.19773539 0.19942722 0.20114103 0.20287323 0.20462138 0.2064017 0.20819603 0.2099768 0.21175955 0.21353372 0.21528605 0.21701779 0.21870625 0.22037904 0.22201501 0.22354222 0.2250658 0.22651011 0.22792034 0.22925699 0.23054895 0.23175094 0.23289068 0.23395533 0.2349528 0.2358867 0.23677318 0.23760267 0.23839404 0.2391467 0.23986107 0.24054203 0.24118953 0.24180807 0.24238554 0.2429183 0.24343501 0.24391715 0.24437617 0.24480231 0.24519573 0.24555639 0.24589896 0.24620101 0.24646914 0.24670559 0.24690749 0.24708434 0.24725722 0.24739424 0.24752277 0.24761418 0.24768663 0.24772936 0.2477686 0.24781116 0.2478472 0.2478677 0.24787687 0.2478901 0.24790846 0.24789827 0.24788311 0.24787124 0.24787139 0.24787663 0.24788419 0.2478669 0.24785193 0.24782108 0.24779994 0.24778995 0.24776912 0.24774762 0.2477278 0.24768783 0.2476705 0.2476565 0.24764516 0.24761899 0.2475872 0.24755156 0.2475057 0.24745415 0.2473951 0.24732857 0.24725208 0.2471561 0.24704945 0.24694282 0.24681618 0.2466877 0.2465325 0.2463755 0.2462117 0.24603589 0.24584449 0.24563819 0.2454282 0.24520299 0.2449714 0.24473764 0.244576)) (quote (1.3940982 1.3850507 1.3718209 1.3580183 1.3436947 1.3287464 1.3132622 1.297124 1.280434 1.2630814 1.2450945 1.2264919 1.2072302 1.1873163 1.1667452 1.1454995 1.1235746 1.1009833 1.0776979 1.0536933 1.0289959 1.0035873 0.9774428 0.9506183 0.923106 0.89496506 0.86623896 0.83699495 0.807333 0.7774434 0.7477466 0.7185396 0.69007874 0.6625876 0.63622535 0.6111179 0.5872613 0.56476874 0.5435973 0.5236988 0.5049908 0.48739102 0.47101834 0.45571634 0.44151792 0.4283358 0.4161761 0.4049804 0.3947152 0.38538355 0.37689555 0.36916944 0.3622105 0.3558937 0.3502307 0.3451596 0.34059116 0.33649942 0.33281988 0.32950258 0.32651728 0.32381788 0.32138604 0.31915715 0.3171714 0.31532466 0.3135746 0.31198514 0.31049052 0.3090942 0.30775243 0.30646002 0.30521154 0.30400616 0.3027886 0.3015969 0.30041736 0.29927453 0.29813448 0.2970113 0.29587764 0.2947642 0.29367062 0.2925613 0.29151648 0.29045826 0.28943688 0.28845915 0.28748277 0.28655276 0.28563312 0.28476173 0.2839545 0.28315508 0.28242317 0.28176004 0.28116766 0.2806476 0.2801844 0.2797518 0.27937642 0.27902535 0.2787221 0.27846366 0.27824783 0.27808505 0.27798268 0.27793425 0.2779287 0.2779747 0.278035 0.27816457 0.27834135 0.27857202 0.2788531 0.2791657 0.27948743 0.2798571 0.2802597 0.28065318 0.28106797 0.2815214 0.28200403 0.2824806 0.2829675 0.2834478 0.28391138 0.28442642 0.28494224 0.2854644 0.28598246 0.2865008 0.28704456 0.28757906 0.28812194 0.28869736 0.28923625 0.28977755 0.29036242 0.29094553 0.2914918 0.292033 0.2925858 0.29311937 0.29364493 0.29418722 0.2947086 0.29521588 0.2956922 0.29612914 0.2965666 0.29698977 0.2974288 0.29784215 0.2982396 0.2986253 0.29898638 0.2993448 0.29965988 0.30000022 0.30030897 0.30058676 0.30076912)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 1.3940982 1.3850507 1.3718209 1.3580183 1.3436947 1.3287464 1.3132622 1.297124 1.280434 1.2630814 1.2450945 1.2264919 1.2072302 1.1873163 1.1667452 1.1454995 1.1235746 1.1009833 1.0776979 1.0536933 1.0289959 1.0035873 0.9774428 0.9506183 0.923106 0.89496506 0.86623896 0.83699495 0.807333 0.7774434 0.7477466 0.7185396 0.69007874 0.6625876 0.63622535 0.6111179 0.5872613 0.56476874 0.5435973 0.5236988 0.5049908 0.48739102 0.47101834 0.45571634 0.44151792 0.4283358 0.4161761 0.4049804 0.3947152 0.38538355 0.37689555 0.36916944 0.3622105 0.3558937 0.3502307 0.3451596 0.34059116 0.33649942 0.33281988 0.32950258 0.32651728 0.32381788 0.32138604 0.31915715 0.3171714 0.31532466 0.3135746 0.31198514 0.31049052 0.3090942 0.30775243 0.30646002 0.30521154 0.30400616 0.3027886 0.3015969 0.30041736 0.29927453 0.29813448 0.2970113 0.29587764 0.2947642 0.29367062 0.2925613 0.29151648 0.29045826 0.28943688 0.28845915 0.28748277 0.28655276 0.28563312 0.28476173 0.2839545 0.28315508 0.28242317 0.28176004 0.28116766 0.2806476 0.2801844 0.2797518 0.27937642 0.27902535 0.2787221 0.27846366 0.27824783 0.27808505 0.27798268 0.27793425 0.2779287 0.2779747 0.278035 0.27816457 0.27834135 0.27857202 0.2788531 0.2791657 0.27948743 0.2798571 0.2802597 0.28065318 0.28106797 0.2815214 0.28200403 0.2824806 0.2829675 0.2834478 0.28391138 0.28442642 0.28494224 0.2854644 0.28598246 0.2865008 0.28704456 0.28757906 0.28812194 0.28869736 0.28923625 0.28977755 0.29036242 0.29094553 0.2914918 0.292033 0.2925858 0.29311937 0.29364493 0.29418722 0.2947086 0.29521588 0.2956922 0.29612914 0.2965666 0.29698977 0.2974288 0.29784215 0.2982396 0.2986253 0.29898638 0.2993448 0.29965988 0.30000022 0.30030897 0.30058676 0.30076912))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.021802199 0.02183424 0.021921469 0.02200623 0.022097065 0.022189782 0.022275782 0.022374545 0.022464576 0.022552614 0.022633592 0.02272119 0.022810085 0.022912879 0.023022956 0.023144477 0.02327507 0.02337115 0.023561595 0.023772205 0.024017619 0.0242588 0.024557978 0.0249003 0.025269147 0.025647374 0.026082473 0.02653757 0.027014563 0.027503204 0.027998038 0.02849869 0.029007249 0.029499306 0.029973783 0.030395668 0.030764673 0.03105082 0.031266056 0.031385824 0.03137768 0.031226485 0.030911779 0.030402458 0.029701949 0.028829636 0.027775888 0.026526887 0.025077278 0.023446339 0.02163241 0.019600854 0.017430088 0.015058198 0.012557374 0.00989529 0.0071021146 0.0041844077 0.0011242782 -0.0020742247 -0.005384479 -0.008782769 -0.012305481 -0.01591794 -0.019639675 -0.023447628 -0.02732448 -0.031318784 -0.03535054 -0.03944678 -0.043596767 -0.047790036 -0.052024696 -0.056281273 -0.06055012 -0.064861596 -0.06920976 -0.07357691 -0.07794635 -0.08231737 -0.086683735 -0.09106298 -0.09544577 -0.0998108 -0.10414287 -0.10846437 -0.11275657 -0.11700938 -0.12122675 -0.1254106 -0.12953979 -0.13362254 -0.13763193 -0.14158547 -0.14550756 -0.14933811 -0.15307462 -0.15671368 -0.16025117 -0.16369453 -0.16704922 -0.17030086 -0.17345122 -0.1765174 -0.17943092 -0.18235433 -0.1851132 -0.18783091 -0.19049698 -0.19311288 -0.19565717 -0.19814238 -0.20057862 -0.20296392 -0.20530394 -0.20759529 -0.2098463 -0.21206732 -0.21426645 -0.21644764 -0.21860995 -0.22075868 -0.22292087 -0.22509732 -0.22727674 -0.22947851 -0.23170707 -0.23397044 -0.23624876 -0.23854833 -0.24087516 -0.24321082 -0.24555205 -0.24789606 -0.2502332 -0.25256598 -0.25489756 -0.25722995 -0.25953442 -0.26186454 -0.2640587 -0.26649052 -0.2689075 -0.27134204 -0.27380574 -0.2762513 -0.2787573 -0.28131974 -0.28391004 -0.2865359 -0.28919345 -0.29189137 -0.29464108 -0.29742375 -0.3002516 -0.303121 -0.30603898 -0.3089925 -0.31200463 -0.3150561 -0.318161 -0.32129616 -0.3244839 -0.3276868 -0.33092543 -0.3341936 -0.3374896 -0.3408054 -0.34413326 -0.3474204 -0.3507294 -0.35404634 -0.35738346 -0.36070198 -0.3640158 -0.36731955 -0.3705912 -0.37383205 -0.3770374 -0.38019857 -0.3832945 -0.3863399 -0.38932958 -0.39225528 -0.39510694 -0.39789987 -0.400603 -0.40324464 -0.4058295 -0.4083549 -0.41082543 -0.41324276 -0.41561276 -0.41794848 -0.42023018 -0.42247146 -0.424657 -0.42679778 -0.428856 -0.4308622 -0.4328094 -0.43469286 -0.4365067 -0.43826216 -0.43996775 -0.44163042 -0.44324443 -0.4448089 -0.44631997 -0.44780412 -0.44925544 -0.45066783 -0.4520568 -0.45340243 -0.45471764 -0.45602754 -0.4573096 -0.45854998 -0.45975348 -0.46091488 -0.46203393 -0.46312183 -0.46416312 -0.4651515 -0.46609434 -0.46695912 -0.4677525 -0.4684392 -0.46899763 -0.46944195 -0.46973997 -0.46987653 -0.46984273 -0.46963605 -0.4692485 -0.46866754 -0.4678667 -0.46682307 -0.46555638 -0.4640428 -0.46226183 -0.4602047 -0.45783952 -0.45516217 -0.45210594 -0.44871855 -0.4449841 -0.44087368 -0.43637893 -0.4315236 -0.4263026 -0.42075875 -0.41483375 -0.40854815 -0.40189993 -0.39487588 -0.3875254 -0.37982494 -0.3717814 -0.36341298 -0.3547335 -0.3457182 -0.33639026 -0.32706517 -0.31727487 -0.30711472 -0.29660404 -0.28566054 -0.27444807 -0.26294038 -0.2511706 -0.23915172 -0.22685746 -0.21430132 -0.20140606 -0.18828678 -0.17488802 -0.16129405 -0.14749794 -0.13344506 -0.1191872 -0.10472535 -0.09006966 -0.075238385 -0.060207263 -0.045014095 -0.02970632 -0.014247986 0.0013219538 0.016999597 0.032785844 0.04871923 0.064555116 0.08053402 0.09659805 0.112747364 0.12897015 0.1452282 0.1616268 0.17799032 0.19444818 0.21087843 0.22729799 0.24375829 0.26038316 0.27691576 0.2933864 0.30957866 0.32578143 0.34167165 0.35750657 0.3734529 0.3889799 0.40466717 0.4201781 0.43542415 0.45044824 0.4652138 0.4797603 0.49455994 0.5084788 0.522119 0.53561527 0.5487603 0.5621443 0.5745004 0.5866838 0.5985243 0.6099635 0.62103445 0.6316672 0.64188856 0.65167624 0.6609896 0.6698258 0.67819787 0.6861098 0.69354964 0.70052207 0.7070417 0.71306497 0.718641 0.7237449 0.72837657 0.7325187 0.73621965 0.73953146 0.7424018 0.7447884 0.7468169 0.7484911 0.74974716 0.7506724 0.75123555 0.75150586 0.7514752 0.7511444 0.75046564 0.7495138 0.7481927 0.74657965 0.7446319 0.74233 0.739709 0.7368203 0.7335049 0.72985244 0.72578395 0.72131706 0.71641714 0.7111177 0.70540077 0.69931466 0.6927958 0.6857707 0.67828525 0.6702633 0.6617357 0.6526769 0.64305807 0.63296134 0.6223409 0.61112094 0.5992823 0.58690537 0.5740252 0.56055785 0.54654384 0.5320341 0.5169913 0.5014639 0.48540875 0.46886522 0.45190448 0.43452343 0.41662803 0.39832154 0.37967294 0.3607324 0.34147272 0.32189658 0.30200627 0.28188485 0.26153332 0.24100897 0.22050473 0.19979684 0.17918112 0.15854617 0.13778597 0.11716406 0.09667428 0.07628743 0.055981595 0.03584771 0.015938383 -0.0037389123 -0.023121249 -0.042268746 -0.061104507 -0.079568275 -0.09771743 -0.11555835 -0.13295973 -0.14987917 -0.16624604 -0.18195373 -0.19695997 -0.2112392 -0.22479545 -0.2376212 -0.24974895 -0.26119554 -0.27200788 -0.2821599 -0.29167488 -0.30052698 -0.30871663 -0.31619555 -0.3229797 -0.32903355 -0.33437252 -0.33896184 -0.3427781 -0.34581664 -0.34813538 -0.3496831 -0.3504803 -0.35051295 -0.34979835 -0.34831384 -0.3460682 -0.34307793 -0.33930767 -0.3348073 -0.32956094 -0.32359785 -0.31690705 -0.30959502 -0.30158186 -0.29289263 -0.28351337 -0.2735275 -0.26291546 -0.25173408 -0.23995812 -0.22763938 -0.21482507 -0.20143841 -0.18764536 -0.1734022 -0.15872865 -0.14373696 -0.12838 -0.112663716 -0.09668619 -0.08045808 -0.06404623 -0.047444605 -0.030732764 -0.013895462 0.0029806225 0.01982243 0.036672708 0.053534553 0.070304595 0.08694034 0.10348099 0.11987481 0.13606003 0.15207163 0.16790107 0.18345636 0.1987068 0.21368015 0.22840615 0.2426983 0.25667587 0.27029234 0.28356937 0.29641217 0.3089682 0.32106984 0.33269084 0.34381166 0.35446623 0.3646386 0.37430477 0.38354313 0.3923236 0.40061808 0.40846673 0.415814 0.42270568 0.42914063 0.435082 0.44056293 0.44562453 0.4501917 0.45429733 0.4580416 0.46127036 0.4640784 0.46642765 0.4683543 0.46983543 0.47088113 0.47150576 0.47166383 0.47140634 0.47070694 0.46960905 0.4680254 0.46608123 0.46370426 0.46097198 0.45778084 0.45427963 0.45037326 0.4460547 0.44146034 0.4365119 0.4312576 0.42568055 0.41989192 0.4137816 0.40746087 0.40089774 0.39413276 0.38714716 0.37999743 0.37270007 0.36525106 0.35761812 0.34992394 0.34218198 0.3343932 0.32634306 0.31838855 0.31051913 0.30264667 0.2948215 0.28711087 0.27941144 0.27188155 0.2645036 0.2572251 0.25013694 0.24323763 0.23655752 0.23010576 0.22381594 0.2178087 0.21203822 0.20648621 0.20127101 0.19631258 0.19161405 0.18729216 0.18323209 0.17948374 0.17604989 0.17297636 0.17019685 0.16767515 0.16552638 0.16366965 0.16208059 0.16078636 0.1597986 0.15910469 0.15867029 0.1585795 0.15876617 0.1592218 0.15995072 0.16092274 0.16218542 0.16362667 0.16619691 0.16884378 0.17155902 0.1743798 0.17739158 0.18051075 0.18380602 0.1872941 0.1909542 0.1947543 0.1967516)) (quote (0.244576 0.24449519 0.24425362 0.24400458 0.2437563 0.24350122 0.24323346 0.24298173 0.24273779 0.24249214 0.24224542 0.24202524 0.2418249 0.24166145 0.24154122 0.24147661 0.24147743 0.24150588 0.2416779 0.24194253 0.2423404 0.24286536 0.2435338 0.24437393 0.24540779 0.24661297 0.24802374 0.24962847 0.25144923 0.2534686 0.25567684 0.25807095 0.2606171 0.26335925 0.26625964 0.26930198 0.27251264 0.27586797 0.27937382 0.2830417 0.2868434 0.2907876 0.29486597 0.29908818 0.30344087 0.30789122 0.31243888 0.3171131 0.3218858 0.32676366 0.33172944 0.33683208 0.3420279 0.34735176 0.3528173 0.3584107 0.3641235 0.36994818 0.37597534 0.38202438 0.38817492 0.3944698 0.40075612 0.407157 0.41365907 0.42016882 0.42664093 0.4332203 0.43977565 0.44634315 0.45290783 0.45945343 0.46600044 0.47256508 0.47908983 0.4855731 0.4919795 0.4983091 0.50457484 0.5107333 0.5167778 0.52279795 0.5286985 0.5344764 0.5401034 0.54560996 0.5509854 0.55621297 0.56128824 0.56619275 0.5709842 0.575604 0.58004874 0.58431054 0.5883866 0.5923123 0.59608275 0.59968555 0.6031208 0.60638035 0.6094851 0.6123907 0.61513204 0.61767835 0.6201297 0.62228287 0.624341 0.6262064 0.62788105 0.6293419 0.6306455 0.63178987 0.63278175 0.6336143 0.63430495 0.63484627 0.6352287 0.63545335 0.6355152 0.63541514 0.6351481 0.6347163 0.6341066 0.6333181 0.63235844 0.63122124 0.62988067 0.62834377 0.6266096 0.62470305 0.6226055 0.62031407 0.6178282 0.61515815 0.6122966 0.60925985 0.60604305 0.60264975 0.59930194 0.5956677 0.591983 0.5878116 0.583442 0.5788919 0.57415694 0.5692809 0.5642258 0.5589754 0.5536061 0.5481033 0.54247314 0.53672 0.53083325 0.5248568 0.51877565 0.5125863 0.5062765 0.49986827 0.49336985 0.48672947 0.47996894 0.47310153 0.46611103 0.45899877 0.45178518 0.444443 0.43696183 0.4293749 0.42168668 0.41392756 0.40605575 0.39807266 0.38999137 0.3818347 0.3735907 0.3652782 0.35691503 0.34850675 0.34003672 0.33152905 0.32328472 0.3146144 0.3059522 0.29731277 0.2886567 0.27999908 0.27136904 0.2627383 0.2541251 0.24553672 0.23698353 0.22846698 0.21998395 0.21154036 0.20315814 0.1948312 0.18655212 0.17832718 0.17016083 0.16205198 0.15399976 0.14597859 0.13802907 0.13012696 0.122268714 0.114459634 0.10669522 0.098960094 0.091256075 0.0836002 0.07595697 0.068329305 0.060727258 0.0531432 0.045575265 0.037990667 0.030453332 0.022934556 0.015444582 0.007969234 5.259215E-4 -0.0069103134 -0.014342733 -0.021779078 -0.029202667 -0.036597565 -0.043977138 -0.051349484 -0.0587012 -0.06602021 -0.0733297 -0.080605954 -0.08787901 -0.095119424 -0.10233211 -0.10953666 -0.11670844 -0.12388389 -0.13102375 -0.13813944 -0.14522422 -0.15224764 -0.1592214 -0.16611047 -0.17295021 -0.17968124 -0.18628869 -0.19278547 -0.1991254 -0.20533063 -0.21135082 -0.21714723 -0.22271472 -0.22803046 -0.23300547 -0.23759885 -0.24176653 -0.24545948 -0.24865462 -0.25131843 -0.25342143 -0.25498918 -0.25599185 -0.25659654 -0.2565969 -0.25600755 -0.2548715 -0.2532032 -0.25103733 -0.24837873 -0.24524644 -0.24164367 -0.23760332 -0.2331268 -0.22837171 -0.22310183 -0.21760175 -0.21136926 -0.20474057 -0.19773011 -0.19034869 -0.1825112 -0.17431709 -0.1658046 -0.15692444 -0.14772977 -0.13828194 -0.12854363 -0.11854117 -0.108296104 -0.09785247 -0.08723449 -0.07653918 -0.0656614 -0.0546621 -0.04357734 -0.03243022 -0.021178615 -0.009809889 0.0015390804 0.0129054375 0.024251406 0.035635844 0.047014006 0.058496155 0.06989153 0.08120194 0.09235011 0.103499025 0.11450852 0.12534425 0.13595991 0.14637435 0.15658486 0.16656485 0.17629417 0.18579109 0.19499956 0.20393788 0.21208483 0.2206234 0.22877419 0.2366706 0.24418222 0.25091565 0.25798187 0.26477858 0.27123418 0.2773738 0.2832158 0.2887572 0.29402658 0.29903552 0.30376634 0.30824792 0.31244162 0.3163952 0.32006472 0.32346824 0.32664314 0.32956722 0.3322467 0.33467528 0.3368713 0.33887312 0.34080496 0.3424503 0.34390384 0.3451616 0.34627524 0.34736478 0.34823105 0.34899527 0.3497244 0.35031936 0.35086253 0.35135764 0.35168532 0.3520288 0.35218504 0.35227424 0.35233542 0.35224208 0.35210022 0.35199282 0.35181916 0.3516369 0.3514395 0.35129052 0.35101762 0.35082906 0.3506715 0.35064867 0.3507633 0.3508766 0.35108608 0.35137543 0.3516969 0.35209486 0.3524753 0.352915 0.3535115 0.3540247 0.35448658 0.35497725 0.355511 0.35592213 0.35628343 0.3566377 0.3567542 0.35699096 0.35690427 0.3566775 0.35625383 0.355738 0.3550477 0.35390112 0.35264772 0.35105228 0.34910038 0.34684104 0.344202 0.34125686 0.33807433 0.33452922 0.33055452 0.32620648 0.32149714 0.3164212 0.3109198 0.30508384 0.2988067 0.29213786 0.28508967 0.27763653 0.2697856 0.2615708 0.25299102 0.24404252 0.23476178 0.22514634 0.21523543 0.20504719 0.19465527 0.18416156 0.17365724 0.16319017 0.15282823 0.1425986 0.13249406 0.12256118 0.112795286 0.103216246 0.093795 0.08455895 0.07555525 0.0667863 0.05830116 0.05013226 0.042345304 0.034936633 0.027902235 0.021195092 0.01486872 0.008889057 0.0032380254 -0.0020590746 -0.007008567 -0.011613768 -0.015877678 -0.019836929 -0.023420047 -0.026688958 -0.029640394 -0.03227137 -0.034615014 -0.03671291 -0.03849195 -0.040060558 -0.0414385 -0.042570114 -0.043456827 -0.044158884 -0.04465864 -0.045022916 -0.04518663 -0.04522193 -0.04512201 -0.044848238 -0.044472296 -0.043970216 -0.043354195 -0.042631913 -0.041826032 -0.04092019 -0.03993686 -0.03887486 -0.037749607 -0.036554318 -0.035302908 -0.03401548 -0.032678947 -0.03135359 -0.029952465 -0.028613927 -0.027181425 -0.025848365 -0.024542215 -0.023212694 -0.021930855 -0.020616956 -0.0193727 -0.018126708 -0.01686847 -0.015683825 -0.014489082 -0.0132761095 -0.012047986 -0.010803065 -0.009506904 -0.008141761 -0.0069331066 -0.0056329668 -0.0042769793 -0.0028821873 -0.0014582148 6.28766E-5 0.0015728588 0.0031162363 0.0046448293 0.006200485 0.0077903746 0.009389921 0.011002202 0.012652677 0.014305344 0.01592796 0.017551735 0.01924622 0.020917986 0.022489664 0.024032345 0.025597984 0.027143598 0.028566136 0.030025974 0.03136013 0.03273439 0.03392869 0.03516842 0.03618395 0.03714587 0.03801787 0.038866684 0.039583676 0.040138975 0.0405323 0.04071621 0.040854495 0.040816587 0.04061502 0.040252973 0.0397028 0.038914677 0.03801234 0.03703769 0.035889164 0.03459163 0.033117775 0.031514384 0.02975092 0.027861104 0.025862268 0.023744608 0.021524355 0.01916553 0.016784158 0.014358174 0.011951561 0.009452139 0.0068492103 0.004122294 0.0014549802 -0.0012174882 -0.0038997324 -0.0065632514 -0.009299712 -0.011951429 -0.014575548 -0.017141024 -0.01968545 -0.022189536 -0.02466155 -0.026968627 -0.029220762 -0.031361964 -0.03345447 -0.035419397 -0.037268754 -0.03901208 -0.04065488 -0.042213627 -0.043643855 -0.0448597 -0.04597323 -0.046908226 -0.04767976 -0.04829205 -0.04874271 -0.049032543 -0.04914871 -0.04912604 -0.04891246 -0.048548628 -0.04802079 -0.04733 -0.046449233 -0.045433116 -0.044284676 -0.042415984 -0.04051731 -0.038588297 -0.036614757 -0.034548376 -0.032432877 -0.03017639 -0.02788805 -0.025484387 -0.022991209 -0.021721382)) (quote (0.30076912 0.3008603 0.3010939 0.3013205 0.30153012 0.3017279 0.30191314 0.3020615 0.30219853 0.3023316 0.3024713 0.30258292 0.30270508 0.30280423 0.30289742 0.3029902 0.30312008 0.30329096 0.3034348 0.30361477 0.30377877 0.30398306 0.3042786 0.30456996 0.30492395 0.30538768 0.305939 0.30659974 0.30730876 0.30810046 0.3089821 0.30996582 0.31103572 0.31214443 0.31331497 0.31460604 0.31598592 0.31741163 0.31899667 0.3206787 0.32251275 0.32453638 0.3267201 0.3290985 0.33167255 0.33450687 0.33756268 0.34083846 0.3444176 0.34822735 0.35233116 0.35666305 0.36130005 0.36612353 0.37119648 0.37645793 0.38196898 0.38769984 0.39350387 0.39959806 0.40589675 0.41231498 0.4190417 0.4258912 0.43296364 0.44024095 0.44772443 0.4553863 0.4632636 0.47127783 0.47946137 0.48780724 0.49634945 0.50502736 0.51375437 0.5226535 0.53175146 0.54096026 0.5502908 0.5597583 0.5693614 0.57914705 0.58902967 0.59900237 0.6090816 0.61920465 0.6294256 0.6396949 0.65000946 0.6603553 0.67074156 0.6811295 0.6915367 0.70196677 0.7123476 0.7227373 0.7331212 0.7434612 0.7537607 0.764009 0.7742091 0.7843273 0.79439754 0.80441547 0.81431556 0.8242675 0.83409477 0.8439043 0.85370416 0.8635327 0.87332207 0.88307786 0.8927998 0.90247477 0.9121161 0.9217209 0.93126756 0.9407569 0.9501861 0.95955587 0.9688797 0.97814024 0.98731655 0.9964256 1.0054748 1.0144724 1.023392 1.0322671 1.0410826 1.0498204 1.0584774 1.0670484 1.0755158 1.0838882 1.0921424 1.1002927 1.1083219 1.1162106 1.124065 1.1317672 1.1391219 1.1466282 1.1539961 1.1612326 1.1683371 1.1752653 1.1820798 1.1887462 1.1952602 1.2016323 1.2078521 1.2139113 1.2198161 1.2255427 1.2311136 1.2365093 1.241742 1.2468007 1.2517157 1.2564296 1.2609991 1.265389 1.2696182 1.2737084 1.2776154 1.281378 1.2849935 1.2884561 1.2917466 1.2948878 1.2978752 1.3007207 1.3033698 1.3058519 1.3081755 1.3103069 1.3122671 1.3140206 1.3155766 1.3169342 1.3180252 1.3189906 1.3197105 1.3201915 1.3204506 1.3204918 1.3202635 1.3197731 1.3190805 1.3181255 1.3169146 1.3154795 1.3138234 1.311922 1.309789 1.3074244 1.3048434 1.3020716 1.2990545 1.2957901 1.2922983 1.2885459 1.2845188 1.2801989 1.2756116 1.2707262 1.2655401 1.260061 1.2542524 1.2481382 1.2417 1.2349426 1.2278822 1.2204619 1.2127189 1.2046967 1.1963409 1.187628 1.178585 1.1691977 1.1594727 1.1494191 1.1390309 1.1283143 1.1172778 1.1058737 1.0941535 1.0820656 1.0696366 1.0568268 1.0436671 1.0301472 1.0162804 1.0020486 0.9874725 0.9725306 0.95729417 0.9417145 0.9258366 0.9096596 0.8932139 0.87651605 0.859613 0.84254265 0.8253428 0.8079944 0.7905665 0.7730446 0.7554729 0.73787684 0.7203138 0.7027574 0.68529147 0.66799045 0.6508319 0.6338949 0.61718637 0.60072017 0.58450097 0.56853617 0.55283267 0.5373745 0.52220887 0.5074845 0.4929386 0.47860843 0.46451062 0.45057333 0.43692595 0.4235629 0.41054088 0.39790457 0.38563323 0.37371376 0.3621903 0.35106477 0.340203 0.32996693 0.32020372 0.31083477 0.3019849 0.29356846 0.28564802 0.27824637 0.2713396 0.26494282 0.25906813 0.253716 0.24889729 0.24461578 0.24089395 0.23765458 0.23510003 0.23300135 0.23138982 0.23029496 0.22965619 0.22948393 0.22988145 0.23065461 0.23196879 0.2338006 0.23609081 0.2388802 0.24202475 0.24566746 0.249845 0.25452074 0.25969437 0.26537046 0.2714285 0.277719 0.2845138 0.2914608 0.2989232 0.30664125 0.3146448 0.32291523 0.33141434 0.33980238 0.34900036 0.35821494 0.3677077 0.37728402 0.38678706 0.39675927 0.40674382 0.41682884 0.42695546 0.43710244 0.44733825 0.4575247 0.4676915 0.4778093 0.4878423 0.49783215 0.50764996 0.51735026 0.5269333 0.5363568 0.5456282 0.5547368 0.5636791 0.5724234 0.5809918 0.5893647 0.5974769 0.6054126 0.61310196 0.62059957 0.6278855 0.63487256 0.64165074 0.64820004 0.6545193 0.66063047 0.66652686 0.6720811 0.67741216 0.6825177 0.68738187 0.6919378 0.6962171 0.70023007 0.70401645 0.707497 0.7106808 0.7135716 0.7161839 0.7184715 0.7204534 0.7221581 0.7235308 0.7246236 0.7254304 0.72596866 0.7262898 0.726407 0.7263308 0.72610456 0.725636 0.7250803 0.72438944 0.723608 0.72270555 0.72169 0.7206575 0.71959985 0.7184043 0.71728224 0.7160752 0.71489484 0.7137358 0.712574 0.7114507 0.71030605 0.7093296 0.7082447 0.7072444 0.7063826 0.7055412 0.7046981 0.7039156 0.7030485 0.70235014 0.7017814 0.70123107 0.7007589 0.7003454 0.6999654 0.6995089 0.699277 0.6990473 0.69871605 0.6984569 0.6982174 0.697963 0.6978615 0.6976124 0.6973854 0.69709987 0.69704134 0.69684786 0.6967714 0.69668305 0.69649464 0.6963144 0.69611294 0.69601477 0.6957419 0.69540394 0.69502014 0.69465924 0.69404847 0.6933251 0.6924853 0.69149125 0.69027067 0.6888434 0.6872597 0.6853573 0.68317497 0.68058455 0.6778382 0.6747606 0.671421 0.66773034 0.6637365 0.65945077 0.6548929 0.64990914 0.6447692 0.6393584 0.6336205 0.62764717 0.6214365 0.6149059 0.6082938 0.60145355 0.59435606 0.58711637 0.5798477 0.57236696 0.564873 0.5572211 0.5496026 0.54184705 0.5341029 0.52646 0.5188258 0.51131517 0.5039379 0.49671787 0.48968694 0.48283458 0.47623706 0.46985668 0.46374533 0.45792618 0.45237067 0.44711456 0.44217312 0.43757415 0.43322384 0.42917135 0.42542622 0.42201647 0.41886473 0.41597378 0.41331798 0.41086614 0.40869814 0.40683448 0.40519622 0.40375012 0.402551 0.40157077 0.4008176 0.4002707 0.39993572 0.3997102 0.39983082 0.40008384 0.40046674 0.40095153 0.40153348 0.4021298 0.40281832 0.40364185 0.40453103 0.40542275 0.4063725 0.40732005 0.408244 0.4091261 0.41002196 0.4108699 0.41168207 0.41241345 0.41313288 0.41388497 0.4145402 0.41513073 0.4155732 0.41598088 0.41626483 0.41656673 0.41673356 0.41687566 0.416851 0.416811 0.41670346 0.4164946 0.41614595 0.4157659 0.41528532 0.41473645 0.41421556 0.4135466 0.4128385 0.41205144 0.411238 0.41039208 0.40954477 0.40869436 0.40775442 0.40678886 0.4058269 0.40488768 0.4039468 0.4030384 0.4021432 0.40127254 0.40042332 0.3996246 0.39886802 0.3981163 0.39733186 0.39658585 0.39595836 0.39535463 0.3948747 0.3944558 0.39408186 0.3937838 0.39353907 0.39338207 0.39323428 0.39312258 0.39312375 0.39316317 0.39323848 0.39344078 0.39362365 0.39379212 0.3940047 0.39421397 0.394474 0.39473158 0.39495826 0.39518493 0.39543143 0.39564458 0.39585924 0.39604658 0.39622754 0.39644596 0.3966152 0.39678425 0.39694625 0.397117 0.39725596 0.39740035 0.39753237 0.39764047 0.39777613 0.3978953 0.39800787 0.39809233 0.39815554 0.3982331 0.39830485 0.39837107 0.39839682 0.3984105 0.39844283 0.3984722 0.39854422 0.39861393 0.39864585)) (quotequote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list 0.30076912 0.3008603 0.3010939 0.3013205 0.30153012 0.3017279 0.30191314 0.3020615 0.30219853 0.3023316 0.3024713 0.30258292 0.30270508 0.30280423 0.30289742 0.3029902 0.30312008 0.30329096 0.3034348 0.30361477 0.30377877 0.30398306 0.3042786 0.30456996 0.30492395 0.30538768 0.305939 0.30659974 0.30730876 0.30810046 0.3089821 0.30996582 0.31103572 0.31214443 0.31331497 0.31460604 0.31598592 0.31741163 0.31899667 0.3206787 0.32251275 0.32453638 0.3267201 0.3290985 0.33167255 0.33450687 0.33756268 0.34083846 0.3444176 0.34822735 0.35233116 0.35666305 0.36130005 0.36612353 0.37119648 0.37645793 0.38196898 0.38769984 0.39350387 0.39959806 0.40589675 0.41231498 0.4190417 0.4258912 0.43296364 0.44024095 0.44772443 0.4553863 0.4632636 0.47127783 0.47946137 0.48780724 0.49634945 0.50502736 0.51375437 0.5226535 0.53175146 0.54096026 0.5502908 0.5597583 0.5693614 0.57914705 0.58902967 0.59900237 0.6090816 0.61920465 0.6294256 0.6396949 0.65000946 0.6603553 0.67074156 0.6811295 0.6915367 0.70196677 0.7123476 0.7227373 0.7331212 0.7434612 0.7537607 0.764009 0.7742091 0.7843273 0.79439754 0.80441547 0.81431556 0.8242675 0.83409477 0.8439043 0.85370416 0.8635327 0.87332207 0.88307786 0.8927998 0.90247477 0.9121161 0.9217209 0.93126756 0.9407569 0.9501861 0.95955587 0.9688797 0.97814024 0.98731655 0.9964256 1.0054748 1.0144724 1.023392 1.0322671 1.0410826 1.0498204 1.0584774 1.0670484 1.0755158 1.0838882 1.0921424 1.1002927 1.1083219 1.1162106 1.124065 1.1317672 1.1391219 1.1466282 1.1539961 1.1612326 1.1683371 1.1752653 1.1820798 1.1887462 1.1952602 1.2016323 1.2078521 1.2139113 1.2198161 1.2255427 1.2311136 1.2365093 1.241742 1.2468007 1.2517157 1.2564296 1.2609991 1.265389 1.2696182 1.2737084 1.2776154 1.281378 1.2849935 1.2884561 1.2917466 1.2948878 1.2978752 1.3007207 1.3033698 1.3058519 1.3081755 1.3103069 1.3122671 1.3140206 1.3155766 1.3169342 1.3180252 1.3189906 1.3197105 1.3201915 1.3204506 1.3204918 1.3202635 1.3197731 1.3190805 1.3181255 1.3169146 1.3154795 1.3138234 1.311922 1.309789 1.3074244 1.3048434 1.3020716 1.2990545 1.2957901 1.2922983 1.2885459 1.2845188 1.2801989 1.2756116 1.2707262 1.2655401 1.260061 1.2542524 1.2481382 1.2417 1.2349426 1.2278822 1.2204619 1.2127189 1.2046967 1.1963409 1.187628 1.178585 1.1691977 1.1594727 1.1494191 1.1390309 1.1283143 1.1172778 1.1058737 1.0941535 1.0820656 1.0696366 1.0568268 1.0436671 1.0301472 1.0162804 1.0020486 0.9874725 0.9725306 0.95729417 0.9417145 0.9258366 0.9096596 0.8932139 0.87651605 0.859613 0.84254265 0.8253428 0.8079944 0.7905665 0.7730446 0.7554729 0.73787684 0.7203138 0.7027574 0.68529147 0.66799045 0.6508319 0.6338949 0.61718637 0.60072017 0.58450097 0.56853617 0.55283267 0.5373745 0.52220887 0.5074845 0.4929386 0.47860843 0.46451062 0.45057333 0.43692595 0.4235629 0.41054088 0.39790457 0.38563323 0.37371376 0.3621903 0.35106477 0.340203 0.32996693 0.32020372 0.31083477 0.3019849 0.29356846 0.28564802 0.27824637 0.2713396 0.26494282 0.25906813 0.253716 0.24889729 0.24461578 0.24089395 0.23765458 0.23510003 0.23300135 0.23138982 0.23029496 0.22965619 0.22948393 0.22988145 0.23065461 0.23196879 0.2338006 0.23609081 0.2388802 0.24202475 0.24566746 0.249845 0.25452074 0.25969437 0.26537046 0.2714285 0.277719 0.2845138 0.2914608 0.2989232 0.30664125 0.3146448 0.32291523 0.33141434 0.33980238 0.34900036 0.35821494 0.3677077 0.37728402 0.38678706 0.39675927 0.40674382 0.41682884 0.42695546 0.43710244 0.44733825 0.4575247 0.4676915 0.4778093 0.4878423 0.49783215 0.50764996 0.51735026 0.5269333 0.5363568 0.5456282 0.5547368 0.5636791 0.5724234 0.5809918 0.5893647 0.5974769 0.6054126 0.61310196 0.62059957 0.6278855 0.63487256 0.64165074 0.64820004 0.6545193 0.66063047 0.66652686 0.6720811 0.67741216 0.6825177 0.68738187 0.6919378 0.6962171 0.70023007 0.70401645 0.707497 0.7106808 0.7135716 0.7161839 0.7184715 0.7204534 0.7221581 0.7235308 0.7246236 0.7254304 0.72596866 0.7262898 0.726407 0.7263308 0.72610456 0.725636 0.7250803 0.72438944 0.723608 0.72270555 0.72169 0.7206575 0.71959985 0.7184043 0.71728224 0.7160752 0.71489484 0.7137358 0.712574 0.7114507 0.71030605 0.7093296 0.7082447 0.7072444 0.7063826 0.7055412 0.7046981 0.7039156 0.7030485 0.70235014 0.7017814 0.70123107 0.7007589 0.7003454 0.6999654 0.6995089 0.699277 0.6990473 0.69871605 0.6984569 0.6982174 0.697963 0.6978615 0.6976124 0.6973854 0.69709987 0.69704134 0.69684786 0.6967714 0.69668305 0.69649464 0.6963144 0.69611294 0.69601477 0.6957419 0.69540394 0.69502014 0.69465924 0.69404847 0.6933251 0.6924853 0.69149125 0.69027067 0.6888434 0.6872597 0.6853573 0.68317497 0.68058455 0.6778382 0.6747606 0.671421 0.66773034 0.6637365 0.65945077 0.6548929 0.64990914 0.6447692 0.6393584 0.6336205 0.62764717 0.6214365 0.6149059 0.6082938 0.60145355 0.59435606 0.58711637 0.5798477 0.57236696 0.564873 0.5572211 0.5496026 0.54184705 0.5341029 0.52646 0.5188258 0.51131517 0.5039379 0.49671787 0.48968694 0.48283458 0.47623706 0.46985668 0.46374533 0.45792618 0.45237067 0.44711456 0.44217312 0.43757415 0.43322384 0.42917135 0.42542622 0.42201647 0.41886473 0.41597378 0.41331798 0.41086614 0.40869814 0.40683448 0.40519622 0.40375012 0.402551 0.40157077 0.4008176 0.4002707 0.39993572 0.3997102 0.39983082 0.40008384 0.40046674 0.40095153 0.40153348 0.4021298 0.40281832 0.40364185 0.40453103 0.40542275 0.4063725 0.40732005 0.408244 0.4091261 0.41002196 0.4108699 0.41168207 0.41241345 0.41313288 0.41388497 0.4145402 0.41513073 0.4155732 0.41598088 0.41626483 0.41656673 0.41673356 0.41687566 0.416851 0.416811 0.41670346 0.4164946 0.41614595 0.4157659 0.41528532 0.41473645 0.41421556 0.4135466 0.4128385 0.41205144 0.411238 0.41039208 0.40954477 0.40869436 0.40775442 0.40678886 0.4058269 0.40488768 0.4039468 0.4030384 0.4021432 0.40127254 0.40042332 0.3996246 0.39886802 0.3981163 0.39733186 0.39658585 0.39595836 0.39535463 0.3948747 0.3944558 0.39408186 0.3937838 0.39353907 0.39338207 0.39323428 0.39312258 0.39312375 0.39316317 0.39323848 0.39344078 0.39362365 0.39379212 0.3940047 0.39421397 0.394474 0.39473158 0.39495826 0.39518493 0.39543143 0.39564458 0.39585924 0.39604658 0.39622754 0.39644596 0.3966152 0.39678425 0.39694625 0.397117 0.39725596 0.39740035 0.39753237 0.39764047 0.39777613 0.3978953 0.39800787 0.39809233 0.39815554 0.3982331 0.39830485 0.39837107 0.39839682 0.3984105 0.39844283 0.3984722 0.39854422 0.39861393 0.39864585))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.1967516 0.19874951 0.20287548 0.20713124 0.21152693 0.2160683 0.22072146 0.22548235 0.23023123 0.23508477 0.23998045 0.24492552 0.24989528 0.2548593 0.25984186 0.26476693 0.2695868 0.2743979 0.2791065 0.28385764 0.28834665 0.2928479 0.29705414 0.30134285 0.30526742 0.30921036 0.31294128 0.31633094 0.31969586 0.32281443 0.32570577 0.32839784 0.3308552 0.3330648 0.33504078 0.33678225 0.33830947 0.33959404 0.34067145 0.34147957 0.3420195 0.34231725 0.34238994 0.34223595 0.34194303 0.34131274 0.34043965 0.33932337 0.33804405 0.33652326 0.33477923 0.33277386 0.33061197 0.32822028 0.32564276 0.32280293 0.3198143 0.31664482 0.3133087 0.30982706 0.30618244 0.30244887 0.29855916 0.29450867 0.29036158 0.28598586 0.28175128 0.2772091 0.27271903 0.2682713 0.26365814 0.25898206 0.25430802 0.24959535 0.24489588 0.24015637 0.23538585 0.23063307 0.22594798 0.2212834 0.21663524 0.21202617 0.20742788 0.20295565 0.19856538 0.194227 0.1899507 0.18581678 0.18178429 0.17786151 0.17402476 0.17031297 0.16675423 0.16329755 0.15998803 0.1568036 0.15371886 0.15078299 0.14798162 0.14527884 0.14271885 0.14029472 0.13797103 0.13579765 0.1337365 0.1318165 0.13000509 0.12822855 0.12660702 0.12509424 0.12365277 0.122283966 0.120893106 0.11965078 0.11841632 0.117266536 0.116118685 0.11504372 0.113996916 0.112975575 0.11197091 0.11097638 0.10998688 0.10902148 0.10803181 0.10704115 0.10604775 0.10503937 0.10405909 0.10300117 0.10194736 0.100883596 0.099827886 0.09874097 0.09758753 0.09647507 0.09531312 0.094153576 0.09294278 0.091707356 0.0904531 0.08920812 0.08793979 0.08669053 0.085396685 0.08401185 0.08268368 0.08132201 0.079931036 0.078509934 0.0770263 0.07555771 0.07402291 0.072569706 0.07108175 0.0695433 0.0679802 0.06641082 0.06481654 0.0632251 0.061587986 0.059926674 0.058168434 0.056436997 0.054675617 0.052894615 0.051100605 0.049239856 0.047404867 0.04555315 0.04365713 0.041754306 0.03978761 0.0378516 0.035899863 0.033931408 0.03195039 0.02995202 0.027945627 0.025934034 0.023951276 0.02195186 0.019981508 0.017972064 0.015977759 0.01396776 0.011989799 0.010024593 0.008078005 0.006143907 0.004226336 0.0023237628 4.331317E-4 -0.0014441764 -0.003319239 -0.0051837308 -0.007064724 -0.008917582 -0.010752824 -0.012591652 -0.014420332 -0.01622475 -0.018039337 -0.01984448 -0.021637215 -0.023446838 -0.02525458 -0.027102532 -0.028953853 -0.030830551 -0.03272816 -0.034642633 -0.036577087 -0.038527467 -0.040486917 -0.04245052 -0.044417777 -0.046388474 -0.04834898 -0.050311353 -0.052259956 -0.054225665 -0.056177665 -0.058122516 -0.060063206 -0.062000245 -0.063930996 -0.06583014 -0.06771488 -0.06959265 -0.071450666 -0.07328338 -0.07510089 -0.076909445 -0.0786952 -0.08047369 -0.08224046 -0.08399648 -0.08574899 -0.08748807 -0.08922484 -0.090956636 -0.092691 -0.09442615 -0.096162155 -0.09789398 -0.09961728 -0.10133931 -0.103065275 -0.10478138 -0.10648092 -0.1081818 -0.10985947 -0.11151501 -0.11315196 -0.11476727 -0.116372675 -0.117966116 -0.119535245 -0.121102706 -0.12264483 -0.12417042 -0.12569228 -0.12720868 -0.1287032 -0.13020404 -0.13167848 -0.13314735 -0.13373296)) (quote (-0.021721382 -0.02045115 -0.017839715 -0.015213015 -0.012484399 -0.00973965 -0.0069474415 -0.004112306 -0.0012744052 0.0015686804 0.0044344296 0.00729554 0.010190407 0.012990615 0.01585597 0.018699207 0.021417829 0.024214687 0.026916003 0.029432126 0.032087718 0.034466293 0.036969278 0.039365825 0.04184783 0.044098955 0.046297092 0.048555065 0.050555937 0.052466177 0.054273647 0.05610407 0.057806298 0.059501063 0.06110417 0.06261308 0.064026244 0.06534956 0.06659505 0.067776226 0.06882766 0.06978434 0.0706873 0.07149866 0.07205227 0.072770484 0.07331257 0.07380257 0.07419369 0.07444118 0.07466845 0.074782744 0.074821614 0.07471176 0.07457587 0.07426956 0.07393297 0.07351061 0.07300477 0.07242535 0.07177567 0.071047634 0.07023331 0.06925135 0.068207786 0.067303136 0.066175886 0.06501477 0.063860245 0.06246048 0.061187867 0.059781544 0.058389735 0.056877897 0.05538498 0.053870075 0.052246455 0.050708894 0.049130544 0.047630083 0.046087943 0.04465163 0.043236733 0.041875955 0.040552974 0.039318536 0.038114626 0.03701429 0.03598239 0.035036434 0.034145996 0.03335361 0.03269172 0.032084763 0.03160266 0.031198446 0.030876775 0.030685485 0.03056845 0.03051809 0.030592196 0.030758413 0.03100795 0.031348318 0.03174262 0.032230657 0.032803495 0.033441183 0.03418533 0.03497921 0.035834674 0.036758896 0.037768957 0.038787775 0.039888833 0.041012247 0.04220541 0.043403216 0.04465485 0.04593893 0.047214363 0.048526336 0.049846337 0.05118218 0.05249368 0.053837516 0.055166655 0.05648629 0.05781209 0.05908299 0.060372584 0.06163149 0.062900745 0.064142175 0.06534561 0.06654697 0.06771338 0.068857156 0.06999466 0.07109336 0.0722013 0.07326859 0.07430702 0.07531621 0.07630954 0.07727901 0.07821851 0.079137534 0.08002474 0.08089928 0.08173096 0.08252946 0.083304316 0.084055215 0.084775456 0.08546094 0.0861165 0.08678822 0.08740626 0.08797705 0.08850573 0.088999845 0.0894592 0.08989428 0.09028521 0.09063687 0.090971895 0.091288686 0.09157561 0.09182536 0.092049346 0.09224104 0.09239972 0.092539385 0.09264842 0.09273842 0.092799574 0.092831046 0.09284612 0.09282378 0.09279464 0.09273087 0.09266338 0.09255647 0.09243689 0.09231018 0.09215897 0.091979824 0.09179296 0.0915885 0.09135712 0.09110347 0.09083807 0.09055218 0.09026509 0.08994395 0.089593835 0.08922498 0.08884364 0.08843119 0.0879885 0.087537356 0.087059885 0.08654817 0.08600934 0.08540949 0.08475566 0.0840499 0.08330826 0.08250705 0.08164597 0.080749504 0.079809316 0.07881021 0.077774845 0.07667885 0.075556286 0.07439956 0.07322259 0.072013654 0.070770785 0.06951353 0.06822494 0.066917405 0.06559532 0.06426247 0.06292961 0.06159163 0.060251758 0.058904108 0.057551925 0.05617746 0.054805935 0.05343012 0.052047667 0.050652933 0.04924316 0.047817238 0.04637354 0.044913438 0.043431666 0.04195558 0.040484015 0.039008864 0.037526716 0.036057897 0.03460128 0.03316267 0.031749353 0.030349713 0.028985683 0.027653853 0.026342582 0.025052058 0.023808683 0.02259664 0.02138756 0.020224549 0.019111058 0.018028364 0.016988429 0.015988557 0.015030899 0.014109184 0.013224038 0.012380203 0.011568256 0.010783182 0.010488485)) (quote (0.39864585 0.39867774 0.39873448 0.3987694 0.39883193 0.3989125 0.39898932 0.3990704 0.3991487 0.39927298 0.39943078 0.39957777 0.3997797 0.40003565 0.4003031 0.4005804 0.4008813 0.40121725 0.40152004 0.40203956 0.40238655 0.4029545 0.4033558 0.40391862 0.40430433 0.40491834 0.40550524 0.4059017 0.40653074 0.40711945 0.40774056 0.4083246 0.4089107 0.4094508 0.40998635 0.41054922 0.41109303 0.41162804 0.41214657 0.41263342 0.4130831 0.41351706 0.41392553 0.41429403 0.41461292 0.41494644 0.4152804 0.4155418 0.41578767 0.41602975 0.41619608 0.41635156 0.41646495 0.4165887 0.41667074 0.4167184 0.4167237 0.41671973 0.41670933 0.4166513 0.41661662 0.41659695 0.41653487 0.41646203 0.4164294 0.41615728 0.41611668 0.4159568 0.4157795 0.4158034 0.41568372 0.41563553 0.4156003 0.41565543 0.41567323 0.41577515 0.4159804 0.41614455 0.41644013 0.41668797 0.41708285 0.41747558 0.41790864 0.41847998 0.4190635 0.41968155 0.42035887 0.42111522 0.4219231 0.42277092 0.42365107 0.4246009 0.42563608 0.42669544 0.42782345 0.42898563 0.4302083 0.43149114 0.43282336 0.43418705 0.43564713 0.43709987 0.4386235 0.4401876 0.44177112 0.44342703 0.4451248 0.44684595 0.4486463 0.4504721 0.45230955 0.45422536 0.45614043 0.45818844 0.46022913 0.46238145 0.46453884 0.46674934 0.46902278 0.47133195 0.473675 0.4760848 0.47851014 0.48097643 0.4834825 0.48602572 0.48857814 0.49116236 0.49380592 0.49638948 0.49899852 0.5016206 0.5042801 0.506941 0.5095656 0.5122173 0.51487345 0.5174694 0.52011335 0.5227138 0.52532185 0.52793867 0.53050817 0.5332141 0.5358569 0.5383766 0.5410047 0.54360676 0.54618615 0.5487492 0.5512151 0.5536811 0.5561881 0.55879087 0.56137544 0.56395895 0.56650436 0.5689891 0.5715006 0.5741427 0.5767396 0.5793472 0.58183647 0.5844519 0.58710236 0.5897407 0.5923912 0.5949159 0.59760374 0.60029394 0.60299546 0.6056888 0.6083148 0.61108715 0.61388404 0.616651 0.6194688 0.6222944 0.62509704 0.62793625 0.63076795 0.6336338 0.63643533 0.63931215 0.6421754 0.64508844 0.6479661 0.65080256 0.65363455 0.6564268 0.65920854 0.66198397 0.6647342 0.6674754 0.6701802 0.67287076 0.675507 0.67816246 0.68078286 0.68337185 0.68595106 0.68849427 0.6910075 0.69351876 0.6960425 0.6985476 0.70106817 0.70357287 0.7060914 0.7085917 0.71108437 0.71357865 0.71604604 0.71849484 0.7209281 0.7233544 0.7257444 0.72811985 0.73043764 0.7327284 0.7350142 0.73722065 0.7394115 0.741551 0.7436566 0.74569375 0.7476619 0.74961865 0.75150866 0.75333876 0.7550948 0.75682676 0.75849957 0.76012117 0.76164407 0.7631431 0.76458276 0.7659725 0.76732046 0.76861895 0.7698828 0.77112425 0.77233977 0.7735415 0.7747352 0.7759451 0.77715254 0.77839554 0.779673 0.78098244 0.7823266 0.78371817 0.7851641 0.7866611 0.7881956 0.7897914 0.79141605 0.79309887 0.7948757 0.7967119 0.79859835 0.800583 0.8026228 0.8047574 0.8069905 0.80924517 0.81159175 0.8140386 0.81505)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list 0.39864585 0.39867774 0.39873448 0.3987694 0.39883193 0.3989125 0.39898932 0.3990704 0.3991487 0.39927298 0.39943078 0.39957777 0.3997797 0.40003565 0.4003031 0.4005804 0.4008813 0.40121725 0.40152004 0.40203956 0.40238655 0.4029545 0.4033558 0.40391862 0.40430433 0.40491834 0.40550524 0.4059017 0.40653074 0.40711945 0.40774056 0.4083246 0.4089107 0.4094508 0.40998635 0.41054922 0.41109303 0.41162804 0.41214657 0.41263342 0.4130831 0.41351706 0.41392553 0.41429403 0.41461292 0.41494644 0.4152804 0.4155418 0.41578767 0.41602975 0.41619608 0.41635156 0.41646495 0.4165887 0.41667074 0.4167184 0.4167237 0.41671973 0.41670933 0.4166513 0.41661662 0.41659695 0.41653487 0.41646203 0.4164294 0.41615728 0.41611668 0.4159568 0.4157795 0.4158034 0.41568372 0.41563553 0.4156003 0.41565543 0.41567323 0.41577515 0.4159804 0.41614455 0.41644013 0.41668797 0.41708285 0.41747558 0.41790864 0.41847998 0.4190635 0.41968155 0.42035887 0.42111522 0.4219231 0.42277092 0.42365107 0.4246009 0.42563608 0.42669544 0.42782345 0.42898563 0.4302083 0.43149114 0.43282336 0.43418705 0.43564713 0.43709987 0.4386235 0.4401876 0.44177112 0.44342703 0.4451248 0.44684595 0.4486463 0.4504721 0.45230955 0.45422536 0.45614043 0.45818844 0.46022913 0.46238145 0.46453884 0.46674934 0.46902278 0.47133195 0.473675 0.4760848 0.47851014 0.48097643 0.4834825 0.48602572 0.48857814 0.49116236 0.49380592 0.49638948 0.49899852 0.5016206 0.5042801 0.506941 0.5095656 0.5122173 0.51487345 0.5174694 0.52011335 0.5227138 0.52532185 0.52793867 0.53050817 0.5332141 0.5358569 0.5383766 0.5410047 0.54360676 0.54618615 0.5487492 0.5512151 0.5536811 0.5561881 0.55879087 0.56137544 0.56395895 0.56650436 0.5689891 0.5715006 0.5741427 0.5767396 0.5793472 0.58183647 0.5844519 0.58710236 0.5897407 0.5923912 0.5949159 0.59760374 0.60029394 0.60299546 0.6056888 0.6083148 0.61108715 0.61388404 0.616651 0.6194688 0.6222944 0.62509704 0.62793625 0.63076795 0.6336338 0.63643533 0.63931215 0.6421754 0.64508844 0.6479661 0.65080256 0.65363455 0.6564268 0.65920854 0.66198397 0.6647342 0.6674754 0.6701802 0.67287076 0.675507 0.67816246 0.68078286 0.68337185 0.68595106 0.68849427 0.6910075 0.69351876 0.6960425 0.6985476 0.70106817 0.70357287 0.7060914 0.7085917 0.71108437 0.71357865 0.71604604 0.71849484 0.7209281 0.7233544 0.7257444 0.72811985 0.73043764 0.7327284 0.7350142 0.73722065 0.7394115 0.741551 0.7436566 0.74569375 0.7476619 0.74961865 0.75150866 0.75333876 0.7550948 0.75682676 0.75849957 0.76012117 0.76164407 0.7631431 0.76458276 0.7659725 0.76732046 0.76861895 0.7698828 0.77112425 0.77233977 0.7735415 0.7747352 0.7759451 0.77715254 0.77839554 0.779673 0.78098244 0.7823266 0.78371817 0.7851641 0.7866611 0.7881956 0.7897914 0.79141605 0.79309887 0.7948757 0.7967119 0.79859835 0.800583 0.8026228 0.8047574 0.8069905 0.80924517 0.81159175 0.8140386 0.81505))) newobj))) (list "XVE3" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.050877E-4 2.179146E-4 2.385974E-4 2.388358E-4 2.600551E-4 2.968311E-4 4.099011E-4 2.948046E-4 3.607273E-4 4.060268E-4 4.526377E-4 5.099177E-4 5.571246E-4 6.124973E-4 6.763935E-4 7.221103E-4 7.808208E-4 9.206534E-4 9.427668E-4 9.844304E-4 9.026528E-4 0.0010724664 0.0011143684 0.0011206867 0.0011575818 0.001184404 0.0011764766 0.001274109 0.0013025404 0.0012646318 0.0013725162 0.0014106633 0.0013719798 0.0014291406 0.0015041232 0.00151968 0.0014810562 0.0015730858 0.0016359092 0.0016381742 0.0016598702 0.0017219782 0.0017037392 0.0017527938 0.001770258 0.0017975568 0.0018036366 0.0018324256 0.0018094778 0.0018987656 0.0019286276 0.001951158 0.0019731522 0.0020346044 0.0020772817 0.0020821097 0.0021114943 0.0021586418 0.002170205 0.0021776557 0.002220571 0.0022830367 0.0022886992 0.0023023486 0.0023441913 0.0023936627 0.00237602 0.0024567247 0.002506137 0.002522409 0.0024953485 0.002579093 0.002594471 0.002634585 0.002652109 0.0026564598 0.00258106 0.0026003123 0.0026313665 0.0025378466 0.0025947094 0.002542019 0.0024939776 0.0024674537 0.002411008 0.0023482442 0.0022960303 0.002226293 0.0022283197 0.0020837188 0.002003014 0.0019837618 0.0018578172 0.0018713474 0.0016748906 0.0015345812 0.0014047624 0.0012940765 0.0011686088 9.676814E-4 8.657576E-4 6.507635E-4 5.403757E-4 3.375411E-4 1.420975E-4 -8.15392E-5 -2.326965E-4 -4.295707E-4 -6.304384E-4 -8.317828E-4 -0.0010625124 -0.001282692 -0.001518786 -0.001785338 -0.0020118952 -0.0022761822 -0.0025151968 -0.002766192 -0.003024876 -0.0032780767 -0.0035378337 -0.0038971305 -0.004018903 -0.004366398 -0.0045714975 -0.004720986 -0.005089104 -0.005324781 -0.005517125 -0.0057427883 -0.005992413 -0.006246805 -0.006457567 -0.0067092776 -0.0069417954 -0.007187188 -0.0073751807 -0.0076017375 -0.0078623295 -0.008060157 -0.0082806945 -0.008518755 -0.008747697 -0.008982241 -0.009181559 -0.009388059 -0.009584457 -0.009785742 -0.00999257 -0.01018551 -0.010366231 -0.010572374 -0.010729879 -0.010905385 -0.011089593 -0.011212915 -0.0113654435 -0.0115070045 -0.011653453 -0.011804491 -0.011903971 -0.012011588 -0.012188673 -0.012262255 -0.012379855 -0.012456894 -0.012555361 -0.012665302 -0.012740195 -0.012756258 -0.012807667 -0.012784913 -0.012782723 -0.012707874 -0.012641802 -0.0125076175 -0.012384146 -0.012208387 -0.012043856 -0.011811227 -0.011680491 -0.011513703 -0.011457037 -0.011043996 -0.010836884 -0.0107900705 -0.010410947 -0.010176765 -0.010011023 -0.0098507255 -0.009486107 -0.009329924 -0.009039875 -0.008663692 -0.008328959 -0.008116748 -0.007718906 -0.0073812753 -0.007014252 -0.006628081 -0.0062289313 -0.005853139 -0.0057105795 -0.0050764606 -0.0049527288 -0.0042790175 -0.0042843074 -0.0037537068 -0.00342758 -0.0030741545 -0.0026811955 -0.002324 -0.002058938 -0.00142774 -0.001283601 -0.0010185392 -7.511824E-4 -5.218238E-4 -2.497286E-4 -5.45382E-5 1.928508E-4 3.865361E-4 5.861372E-4 8.037686E-4 9.197444E-4 0.0011242628 0.0013309866 0.0015037806 0.0016514064 0.0017738192 0.0018962026 0.0020179453 0.0021350086 0.0022209138 0.0023102612 0.0023928434 0.0024407208 0.0025046617 0.0025665313 0.0026232973 0.0026766213 0.0026917756 0.002736725 0.002836086 0.0027249903 0.0028104782 0.0027886033 0.0027643517 0.00273107 0.0027090386 0.0026147738 0.0025475023 0.0024630057 0.0023991093 0.0023144484 0.0022476167 0.0021670312 0.002178833 0.0020935014 0.0020333156 0.001986295 0.0019690693 0.0018913372 0.0018355324 0.0018401296 0.0018417575 0.001814995 0.001820784 0.001833979 0.0018613637 0.0019206292 0.0020332262 0.002082739 0.002235938 0.0023538992 0.0025256873 0.0026287176 0.0028215275 0.0029632598 0.0030876696 0.0032356102 0.0033663344 0.0036037583 0.0037295057 0.0038483469 0.003997393 0.004165766 0.004259532 0.0044116466 0.0045554624 0.004695745 0.0048373817 0.0049766954 0.0052347407 0.0053596124 0.005480062 0.0056214333 0.0057407953 0.0058832574 0.006005753 0.0061517283 0.006336458 0.0064286664 0.006583847 0.0066615078)) (quote (-7.754803E-4 -7.889271E-4 -8.205771E-4 -8.312464E-4 -8.48055E-4 -8.69155E-4 -8.613468E-4 -9.050966E-4 -9.070636E-4 -9.092094E-4 -9.089112E-4 -9.02176E-4 -8.99613E-4 -8.909702E-4 -8.840562E-4 -8.744598E-4 -8.597374E-4 -8.231401E-4 -8.235574E-4 -8.046627E-4 -8.129478E-4 -7.7343E-4 -7.620454E-4 -7.438661E-4 -7.293224E-4 -7.191896E-4 -4.428029E-4 -7.713437E-4 -7.168651E-4 -3.885627E-4 -4.985332E-4 -5.187392E-4 -4.270077E-4 -4.269481E-4 -4.438758E-4 -3.985763E-4 -2.497435E-4 -2.852678E-4 -2.907515E-4 -1.916885E-4 -1.366138E-4 -1.335144E-4 -3.86834E-5 -1.58548E-5 7.98106E-5 1.282692E-4 2.280474E-4 3.070235E-4 4.550815E-4 4.900694E-4 5.623102E-4 6.984473E-4 8.180737E-4 8.648038E-4 9.557606E-4 0.0010849238 0.0012007356 0.0013332368 0.0014609099 0.0016080142 0.0017527342 0.0018211008 0.0020146966 0.0021319983 0.0022948385 0.0024317503 0.0026661754 0.0027485192 0.0029273033 0.003157109 0.0033712387 0.0035392344 0.0037214456 0.003906548 0.0040753484 0.0043542087 0.004610151 0.0048356354 0.0049821735 0.005249858 0.0053109825 0.005693555 0.0059554577 0.006133288 0.006221324 0.00662902 0.006851852 0.007088393 0.007222056 0.0074937935 0.00772202 0.0077799265 0.008026779 0.00806272 0.008342177 0.008592844 0.00881651 0.009004861 0.009183437 0.009344518 0.009488612 0.009627849 0.009737104 0.009847283 0.009945631 0.01003924 0.010111496 0.010185227 0.010253191 0.010294497 0.010342643 0.010360092 0.010372937 0.0103664845 0.010347351 0.010307774 0.010240212 0.010168888 0.010068066 0.009940721 0.009799629 0.00966908 0.009470366 0.00930414 0.009097874 0.00886168 0.008658849 0.008424137 0.00816405 0.00789059 0.0076133134 0.0073520458 0.0070458073 0.006750835 0.0064437706 0.0061477088 0.0057999343 0.005477842 0.0051582717 0.0048153103 0.0044632703 0.0041078516 0.003765244 0.003387496 0.003028892 0.0026482863 0.0022792444 0.0019045024 0.0015280248 0.0011471808 7.662326E-4 3.876537E-4 1.96323E-5 -3.608391E-4 -7.10465E-4 -0.0010816158 -0.0014338866 -0.0017723814 -0.0021211356 -0.0024427325 -0.0027671755 -0.0030757189 -0.0033721777 -0.003686268 -0.0039530397 -0.0042287596 -0.0044924244 -0.0047328435 -0.004976511 -0.0052006506 -0.00541866 -0.005617045 -0.005813664 -0.0060144784 -0.006211268 -0.0063849976 -0.006577939 -0.00672028 -0.0069041066 -0.007101445 -0.007275963 -0.007464584 -0.00738883 -0.007901832 -0.0080362 -0.007891841 -0.008446544 -0.00857462 -0.008729674 -0.008561462 -0.009119406 -0.008919403 -0.009215325 -0.00940153 -0.009525314 -0.009814084 -0.009975284 -0.010109052 -0.010237679 -0.01040031 -0.010443673 -0.010703117 -0.010574162 -0.0109730065 -0.0107907355 -0.011176944 -0.010863662 -0.011038721 -0.011144489 -0.0111581385 -0.011208355 -0.011249304 -0.011183262 -0.011525035 -0.011369854 -0.011277586 -0.011191249 -0.011100262 -0.011124849 -0.010994911 -0.010879278 -0.010712057 -0.010606766 -0.010461956 -0.010313809 -0.010148525 -0.010023147 -0.009840667 -0.009668708 -0.009466946 -0.009261727 -0.009017706 -0.008877397 -0.008634508 -0.008419812 -0.0081983805 -0.007983744 -0.007754028 -0.0075170994 -0.0072878 -0.0070771575 -0.0068517327 -0.006619394 -0.006290436 -0.006190479 -0.0058692694 -0.005664706 -0.005475104 -0.0052793026 -0.0051187873 -0.00486964 -0.0044581294 -0.004526496 -0.0042253137 -0.004093528 -0.003984511 -0.0038563013 -0.0038283468 -0.003652036 -0.0036781433 -0.0034859777 -0.003229916 -0.0031022427 -0.002941668 -0.002945125 -0.0027870536 -0.0026358962 -0.0025016663 -0.002349496 -0.002172887 -0.0020342467 -0.0017461776 -0.001763165 -0.0014369488 -0.001296878 -0.0011752248 -0.0010038018 -8.445382E-4 -7.112026E-4 -5.793571E-4 -4.532337E-4 -3.145337E-4 -1.812577E-4 -6.30617E-5 5.85914E-5 1.798272E-4 2.794862E-4 4.222393E-4 5.353689E-4 6.449819E-4 7.850528E-4 8.955598E-4 0.0010285974 0.0011615754 0.0012857914 0.0014459492 0.001548946 0.0016941428 0.001866758 0.0019824505 0.0021270514 0.0023267863 0.00245744 0.0026043055 0.002700015)) (quote (-4.124403E-4 -4.421473E-4 -4.898906E-4 -5.465746E-4 -6.085634E-4 -6.641746E-4 -7.371306E-4 -7.981062E-4 -8.868576E-4 -9.810329E-4 -0.0010692478 -0.0011737348 -0.0012619498 -0.0013914108 -0.0014839172 -0.001578927 -0.0016942024 -0.0018067956 -0.0019061564 -0.0019754172 -0.0020540953 -0.002169788 -0.0022315383 -0.0022782684 -0.0023471117 -0.0023927689 -0.0022770167 -0.0025254488 -0.0025262833 -0.0023428202 -0.002452135 -0.0024900437 -0.0024266243 -0.0024244783 -0.0024553535 -0.002423048 -0.0023201704 -0.0023431778 -0.002332449 -0.0022296906 -0.0021511317 -0.0021135807 -0.001982927 -0.0018955468 -0.0017807484 -0.0016551018 -0.0015233756 -0.001400471 -0.0012053253 -0.0011149646 -9.772778E-4 -8.125305E-4 -6.262064E-4 -5.069971E-4 -3.585815E-4 -1.64032E-4 3.89814E-5 1.922846E-4 4.07815E-4 6.364584E-4 8.245707E-4 0.0010397434 0.0012646914 0.0015245676 0.001743436 0.0019767285 0.002296567 0.0024791956 0.002734542 0.003015995 0.0033234358 0.0035437344 0.0038212536 0.004040122 0.004259944 0.0044894214 0.0047667027 0.0049821735 0.0051296354 0.005396664 0.005506575 0.0057783723 0.006024897 0.0061730743 0.00631094 0.0065852404 0.006733715 0.006927371 0.0070108175 0.0072234273 0.007391035 0.0073925858 0.007555008 0.007486224 0.0076879263 0.007834017 0.00792408 0.007967949 0.008064926 0.008176029 0.008173764 0.008291066 0.00829196 0.008363903 0.008426428 0.008514345 0.008544326 0.00861305 0.008650959 0.008702517 0.008738875 0.008781731 0.0088121295 0.008841693 0.00884068 0.008865893 0.008852184 0.008853018 0.008847773 0.008851171 0.008843303 0.008938193 0.008805692 0.008898556 0.008872688 0.008785963 0.008880258 0.008877099 0.008853018 0.008835852 0.008871198 0.008897364 0.008873463 0.0088889 0.00887686 0.008911431 0.008880198 0.008891702 0.008940637 0.008940339 0.008961618 0.008984685 0.008999348 0.009020239 0.008990318 0.009022921 0.009006709 0.008979887 0.008957982 0.008892477 0.008854747 0.008821279 0.008736998 0.008646756 0.008594036 0.008476198 0.008339614 0.008245438 0.008105278 0.007995158 0.007846326 0.0076934993 0.007557988 0.0073697274 0.007202267 0.007017523 0.0068213344 0.00659436 0.0064144135 0.006197989 0.005924344 0.00568524 0.0054459125 0.0051506907 0.0048161 0.0045478195 0.004200667 0.0038323105 0.003519222 0.0031137467 0.0028367788 0.0025378764 0.002261892 0.0018569678 0.0015739502 0.0013234466 8.920432E-4 5.870014E-4 3.113896E-4 5.72205E-5 -3.636479E-4 -6.081909E-4 -9.32157E-4 -0.0012907536 -0.001608789 -0.0019162892 -0.002318278 -0.0026934147 -0.003078565 -0.0034604073 -0.0037759096 -0.004257545 -0.0044277758 -0.005020872 -0.005238384 -0.005665228 -0.005821079 -0.006368071 -0.006703198 -0.0070944126 -0.0074572265 -0.007787705 -0.008118331 -0.0086628795 -0.008880645 -0.009139389 -0.009477347 -0.009702146 -0.010017157 -0.010300815 -0.010525912 -0.010794371 -0.011040896 -0.011266768 -0.01155436 -0.011755675 -0.012002677 -0.012174815 -0.012339115 -0.012514859 -0.012660503 -0.012786895 -0.012892276 -0.01304245 -0.013113141 -0.013174415 -0.013258755 -0.013314545 -0.013344049 -0.013377011 -0.013400853 -0.013408184 -0.013427853 -0.013494314 -0.013383567 -0.013397515 -0.013317287 -0.013244331 -0.013171494 -0.013138354 -0.0129134655 -0.012843311 -0.012621701 -0.012503386 -0.012336731 -0.012152016 -0.011960626 -0.011729658 -0.01155138 -0.011460662 -0.011297345 -0.011052489 -0.010867953 -0.010671318 -0.010546863 -0.010357618 -0.010165811 -0.009980381 -0.009804308 -0.009655893 -0.009465456 -0.009207249 -0.009118617 -0.008861959 -0.00870496 -0.008503675 -0.008331895 -0.008129835 -0.007942915 -0.0077724457 -0.0076071024 -0.0074204207 -0.007305265 -0.0070890193 -0.0069035297 -0.0066964626 -0.0065022707 -0.0063112974 -0.006089449 -0.0059086085 -0.0056966543 -0.0054986477 -0.0053174496 -0.0051931143 -0.0049704313 -0.004797697 -0.0046166186 -0.0044319634 -0.0042330027 -0.00406301 -0.0038769245 -0.0036509037 -0.0035065413 -0.0033251047 -0.003194661)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list -4.124403E-4 -4.421473E-4 -4.898906E-4 -5.465746E-4 -6.085634E-4 -6.641746E-4 -7.371306E-4 -7.981062E-4 -8.868576E-4 -9.810329E-4 -0.0010692478 -0.0011737348 -0.0012619498 -0.0013914108 -0.0014839172 -0.001578927 -0.0016942024 -0.0018067956 -0.0019061564 -0.0019754172 -0.0020540953 -0.002169788 -0.0022315383 -0.0022782684 -0.0023471117 -0.0023927689 -0.0022770167 -0.0025254488 -0.0025262833 -0.0023428202 -0.002452135 -0.0024900437 -0.0024266243 -0.0024244783 -0.0024553535 -0.002423048 -0.0023201704 -0.0023431778 -0.002332449 -0.0022296906 -0.0021511317 -0.0021135807 -0.001982927 -0.0018955468 -0.0017807484 -0.0016551018 -0.0015233756 -0.001400471 -0.0012053253 -0.0011149646 -9.772778E-4 -8.125305E-4 -6.262064E-4 -5.069971E-4 -3.585815E-4 -1.64032E-4 3.89814E-5 1.922846E-4 4.07815E-4 6.364584E-4 8.245707E-4 0.0010397434 0.0012646914 0.0015245676 0.001743436 0.0019767285 0.002296567 0.0024791956 0.002734542 0.003015995 0.0033234358 0.0035437344 0.0038212536 0.004040122 0.004259944 0.0044894214 0.0047667027 0.0049821735 0.0051296354 0.005396664 0.005506575 0.0057783723 0.006024897 0.0061730743 0.00631094 0.0065852404 0.006733715 0.006927371 0.0070108175 0.0072234273 0.007391035 0.0073925858 0.007555008 0.007486224 0.0076879263 0.007834017 0.00792408 0.007967949 0.008064926 0.008176029 0.008173764 0.008291066 0.00829196 0.008363903 0.008426428 0.008514345 0.008544326 0.00861305 0.008650959 0.008702517 0.008738875 0.008781731 0.0088121295 0.008841693 0.00884068 0.008865893 0.008852184 0.008853018 0.008847773 0.008851171 0.008843303 0.008938193 0.008805692 0.008898556 0.008872688 0.008785963 0.008880258 0.008877099 0.008853018 0.008835852 0.008871198 0.008897364 0.008873463 0.0088889 0.00887686 0.008911431 0.008880198 0.008891702 0.008940637 0.008940339 0.008961618 0.008984685 0.008999348 0.009020239 0.008990318 0.009022921 0.009006709 0.008979887 0.008957982 0.008892477 0.008854747 0.008821279 0.008736998 0.008646756 0.008594036 0.008476198 0.008339614 0.008245438 0.008105278 0.007995158 0.007846326 0.0076934993 0.007557988 0.0073697274 0.007202267 0.007017523 0.0068213344 0.00659436 0.0064144135 0.006197989 0.005924344 0.00568524 0.0054459125 0.0051506907 0.0048161 0.0045478195 0.004200667 0.0038323105 0.003519222 0.0031137467 0.0028367788 0.0025378764 0.002261892 0.0018569678 0.0015739502 0.0013234466 8.920432E-4 5.870014E-4 3.113896E-4 5.72205E-5 -3.636479E-4 -6.081909E-4 -9.32157E-4 -0.0012907536 -0.001608789 -0.0019162892 -0.002318278 -0.0026934147 -0.003078565 -0.0034604073 -0.0037759096 -0.004257545 -0.0044277758 -0.005020872 -0.005238384 -0.005665228 -0.005821079 -0.006368071 -0.006703198 -0.0070944126 -0.0074572265 -0.007787705 -0.008118331 -0.0086628795 -0.008880645 -0.009139389 -0.009477347 -0.009702146 -0.010017157 -0.010300815 -0.010525912 -0.010794371 -0.011040896 -0.011266768 -0.01155436 -0.011755675 -0.012002677 -0.012174815 -0.012339115 -0.012514859 -0.012660503 -0.012786895 -0.012892276 -0.01304245 -0.013113141 -0.013174415 -0.013258755 -0.013314545 -0.013344049 -0.013377011 -0.013400853 -0.013408184 -0.013427853 -0.013494314 -0.013383567 -0.013397515 -0.013317287 -0.013244331 -0.013171494 -0.013138354 -0.0129134655 -0.012843311 -0.012621701 -0.012503386 -0.012336731 -0.012152016 -0.011960626 -0.011729658 -0.01155138 -0.011460662 -0.011297345 -0.011052489 -0.010867953 -0.010671318 -0.010546863 -0.010357618 -0.010165811 -0.009980381 -0.009804308 -0.009655893 -0.009465456 -0.009207249 -0.009118617 -0.008861959 -0.00870496 -0.008503675 -0.008331895 -0.008129835 -0.007942915 -0.0077724457 -0.0076071024 -0.0074204207 -0.007305265 -0.0070890193 -0.0069035297 -0.0066964626 -0.0065022707 -0.0063112974 -0.006089449 -0.0059086085 -0.0056966543 -0.0054986477 -0.0053174496 -0.0051931143 -0.0049704313 -0.004797697 -0.0046166186 -0.0044319634 -0.0042330027 -0.00406301 -0.0038769245 -0.0036509037 -0.0035065413 -0.0033251047 -0.003194661))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0066615078 0.0066873953 0.006782793 0.006943628 0.0069993665 0.0070583294 0.0071204007 0.0071987654 0.007250607 0.0073224306 0.0074262177 0.007465825 0.0076476336 0.007653147 0.007656887 0.0077243447 0.0077921306 0.007840306 0.007941902 0.007945225 0.007990867 0.00804168 0.008086726 0.0081276 0.008156836 0.008168668 0.008195758 0.008204192 0.0081962645 0.008206129 0.008202046 0.008207172 0.008181274 0.008188635 0.008153677 0.008143455 0.008101404 0.008061111 0.007993907 0.007948339 0.0078650415 0.0078069866 0.0077124834 0.00764814 0.0075553656 0.00744173 0.00731656 0.0071879327 0.0070276256 0.006866514 0.006724983 0.0065672696 0.006365627 0.006171286 0.0058078766 0.0056138933 0.0053925514 0.0051449537 0.0048758984 0.004584074 0.004242778 0.0039526224 0.0035791397 0.0032077432 0.0029005409 0.0023425815 0.0020086167 0.0015156866 0.0010648966 6.58989E-4 6.95586E-5 -4.359484E-4 -0.001060307 -0.0016285778 -0.0023561716 -0.0029885173 -0.0036942365 -0.0043681264 -0.005054474 -0.00580889 -0.0065106754 -0.00727129 -0.007949144 -0.008718163 -0.009562731 -0.010283232 -0.011042535 -0.011756033 -0.0124589205 -0.013164848 -0.013768733 -0.014405847 -0.01497823 -0.015494496 -0.015954018 -0.01641184 -0.016875655 -0.017204136 -0.017565489 -0.017766446 -0.018032536 -0.01831016 -0.018491939 -0.01856558 -0.018677533 -0.018733159 -0.018720553 -0.018861264 -0.018495359 -0.018492118 -0.018418163 -0.018333514 -0.018083746 -0.017816466 -0.017580059 -0.017319784 -0.016997656 -0.016725976 -0.01641491 -0.016096138 -0.015724414 -0.01536169 -0.014975905 -0.014637142 -0.014219746 -0.013865694 -0.013383046 -0.012958512 -0.012497887 -0.012043074 -0.011636019 -0.011185467 -0.010763407 -0.010336876 -0.009939194 -0.009590656 -0.009199411 -0.008836001 -0.008505672 -0.008178145 -0.0078519285 -0.0075318217 -0.0072698887 -0.0069619417 -0.006718099 -0.006453812 -0.0062266886 -0.0059728325 -0.005747378 -0.005531043 -0.005270064 -0.005103469 -0.004911393 -0.0047098994 -0.004569143 -0.0043966174 -0.0042388737 -0.0040830374 -0.0039013625 -0.0037472248 -0.0036008656 -0.0035072267 -0.0033156872 -0.0031600297 -0.00303635 -0.0029099584 -0.0027220247 -0.002610922 -0.002458632 -0.0023257435 -0.002206862 -0.0020870865 -0.001984328 -0.0018210708 -0.0017430186 -0.0016158224 -0.0015218854 -0.001428336 -0.0013380052 -0.0012403132 -0.0011598468 -0.0010803044 -0.0010089278 -9.503962E-4 -8.907616E-4 -8.354783E-4 -7.793903E-4 -7.408261E-4 -7.110238E-4 -6.951095E-4 -6.558895E-4 -6.445647E-4 -6.352663E-4 -6.207824E-4 -6.127357E-4 -6.059408E-4 -5.829335E-4 -5.697608E-4 -5.548E-4 -5.31733E-4 -5.049706E-4 -4.678965E-4 -4.487634E-4 -4.239082E-4 -3.900528E-4 -3.628135E-4 -3.410578E-4 -3.212094E-4 -2.881885E-4 -2.610683E-4 -2.444386E-4 -2.209544E-4 -2.020597E-4 -1.787543E-4 -1.567602E-4 -1.295805E-4 -8.33273E-5 -7.03335E-5 -4.08292E-5 -7.3314E-6 4.22001E-5 7.45654E-5 1.189709E-4 1.538396E-4 1.990199E-4 2.538562E-4 3.019571E-4 3.51429E-4 3.939867E-4 4.544258E-4 4.990101E-4 5.784035E-4 6.171465E-4 6.715655E-4 7.062554E-4 7.527471E-4 7.93934E-4 8.4126E-4 8.753538E-4 9.109378E-4 9.356142E-4 9.725094E-4 0.0010012388 0.0010263324)) (quote (0.002700015 0.0027319193 0.002876222 0.0030593276 0.003178835 0.0033227203 0.0034544468 0.003602922 0.00371027 0.0038455129 0.0040397644 0.0041838885 0.00437653 0.004479289 0.0046135783 0.004755497 0.0048861504 0.005043626 0.005208552 0.0053579807 0.005511582 0.0056684017 0.005809486 0.005987525 0.006154597 0.0063058734 0.0064778924 0.0066346526 0.0067816978 0.0069546704 0.0071265106 0.0073049665 0.0074716206 0.007648528 0.007828653 0.008006096 0.008169889 0.008368731 0.008557618 0.008775532 0.008938909 0.009155542 0.009327382 0.009559393 0.009755164 0.0099469125 0.010151297 0.010344118 0.010537058 0.01074481 0.0109552145 0.011171192 0.011370391 0.011561006 0.011616558 0.011821479 0.01201719 0.01216653 0.012316018 0.0124284625 0.012452513 0.012550563 0.012571573 0.012598723 0.012565613 0.012472928 0.012435883 0.012348592 0.012211487 0.012040347 0.011808515 0.011415556 0.011039749 0.010602444 0.010052443 0.009538777 0.009040549 0.008376032 0.0077805 0.0072938353 0.006535314 0.006077461 0.00530228 0.004737597 0.004308101 0.0038221069 0.0030728095 0.0027313046 0.002164416 0.0014967024 9.90551E-4 5.287901E-4 6.49951E-5 -4.09577E-4 -9.490588E-4 -0.0014184119 -0.0018900596 -0.002326839 -0.0027643927 -0.0031926819 -0.0036279112 -0.004057415 -0.00443051 -0.004829623 -0.005208038 -0.00560084 -0.0059883073 -0.006115079 -0.0067563658 -0.007031806 -0.007358477 -0.007639893 -0.007832788 -0.007897221 -0.008206233 -0.008214921 -0.008343756 -0.008462235 -0.008677259 -0.008720398 -0.008762211 -0.008803725 -0.008838862 -0.0088861585 -0.008910418 -0.00879629 -0.008864507 -0.008924067 -0.008921802 -0.008978754 -0.009026736 -0.009045601 -0.009091079 -0.009100705 -0.009102941 -0.009213656 -0.009151608 -0.00914675 -0.009092361 -0.009072483 -0.008997947 -0.008954257 -0.0088332 -0.008797407 -0.008693337 -0.008599192 -0.008472443 -0.008358479 -0.008221626 -0.008051246 -0.007888734 -0.0077340305 -0.007545024 -0.0073642433 -0.0071474314 -0.006968469 -0.0067520738 -0.0066130758 -0.0064200163 -0.0061972737 -0.0060012937 -0.0057986975 -0.005659282 -0.0054567456 -0.0052698255 -0.00507766 -0.0049499273 -0.004753828 -0.0045446754 -0.0043601394 -0.0041686297 -0.0039926768 -0.0038158296 -0.0036296249 -0.0034688712 -0.0032762885 -0.0031336546 -0.0029744506 -0.002803862 -0.002670884 -0.0025215745 -0.0023516417 -0.0022090075 -0.002067864 -0.0019345284 -0.00180763 -0.0016674402 -0.0015519264 -0.0014325976 -0.0013306142 -0.0012304784 -0.001131475 -0.0010271072 -9.192228E-4 -8.185506E-4 -7.245541E-4 -6.41346E-4 -5.427599E-4 -4.447103E-4 -3.587008E-4 -2.922416E-4 -2.026558E-4 -1.229048E-4 -4.34518E-5 3.74317E-5 1.35839E-4 2.067089E-4 2.866983E-4 3.505349E-4 4.21226E-4 4.933476E-4 5.605817E-4 6.405115E-4 6.77228E-4 7.490517E-4 8.218884E-4 8.77142E-4 9.44376E-4 0.0010169149 0.0010751486 0.0011290908 0.0011909008 0.001248181 0.001325965 0.0013850333 0.0014362932 0.0014896394 0.001554668 0.0016371608 0.0016958714 0.0017423034 0.0018194318 0.0018944144 0.0019387008 0.001999557 0.002089262 0.0021409989 0.00219357 0.0022627116 0.002327323 0.0023834107 0.0024400947 0.0024850965 0.002536893)) (quote (-0.003194661 -0.0031511784 -0.0029717684 -0.0028357506 -0.0026425124 -0.002441764 -0.0022822619 -0.002056241 -0.0018788576 -0.0016758442 -0.0014896394 -0.001230836 -8.898974E-4 -6.877184E-4 -4.758835E-4 -2.406836E-4 -2.14577E-5 2.639294E-4 5.288124E-4 7.994175E-4 0.0010399819 0.0012762548 0.0015593768 0.0018314124 0.002120018 0.002395511 0.0026891232 0.0029110909 0.0031836033 0.0034555197 0.0037139657 0.00399661 0.0042431355 0.0045006275 0.004753828 0.0050165653 0.0052657128 0.0055063963 0.005765915 0.0059634447 0.006190777 0.0064492226 0.00668931 0.0069274903 0.0071742535 0.0073833466 0.0075855255 0.0077972417 0.007978439 0.0081858635 0.008386135 0.00859344 0.008783579 0.008956194 0.008981347 0.009223223 0.009412527 0.009607196 0.009748757 0.009934962 0.010145962 0.010388374 0.010525167 0.0107265115 0.010985851 0.010962546 0.011291444 0.01138711 0.011620522 0.011917651 0.012053192 0.012431145 0.01263082 0.013016224 0.013289869 0.0138088465 0.014168083 0.014473318 0.014808536 0.015242517 0.015512227 0.015971542 0.016178906 0.016476453 0.01689893 0.017200172 0.017207265 0.017402232 0.017401636 0.017253399 0.017230928 0.017043949 0.016887665 0.016646892 0.016314805 0.015954823 0.015566736 0.015098483 0.01459688 0.014057994 0.013535053 0.012963116 0.012359321 0.011773825 0.011105865 0.010455519 0.009772062 0.0093199015 0.008336663 0.00779903 0.007116884 0.0065431297 0.005883038 0.005128175 0.0045240224 0.0038073063 0.0032033623 0.0026076287 0.0020567626 0.00143002 9.001792E-4 3.265291E-4 -1.858324E-4 -7.005334E-4 -0.001213655 -0.0018545836 -0.0022805184 -0.0027863384 -0.003251344 -0.0037230552 -0.0042039156 -0.004612088 -0.0050767064 -0.0055231154 -0.0059089363 -0.0063753426 -0.006726444 -0.007058114 -0.00747332 -0.0077053313 -0.008031338 -0.008327603 -0.008612037 -0.008827746 -0.009071022 -0.009294301 -0.009476453 -0.00964725 -0.009784073 -0.009999186 -0.010024518 -0.01018396 -0.010261953 -0.010277271 -0.010339379 -0.010359317 -0.010355294 -0.010398984 -0.010344982 -0.010320246 -0.0103055835 -0.0102669 -0.010189295 -0.010153174 -0.010090768 -0.010063827 -0.0098820925 -0.0098260045 -0.009749591 -0.009696543 -0.00956732 -0.009449482 -0.009284914 -0.009217918 -0.0090482235 -0.00894326 -0.00877893 -0.008639336 -0.008523822 -0.008404553 -0.008233845 -0.008100927 -0.007957816 -0.007827282 -0.007679224 -0.007533312 -0.007399976 -0.007249117 -0.0071319346 -0.007008672 -0.0068775416 -0.006739139 -0.006604135 -0.0064353347 -0.006327331 -0.0061767698 -0.0060688853 -0.0059116483 -0.005785167 -0.005680859 -0.0055522323 -0.005415201 -0.00528425 -0.005153954 -0.0050341487 -0.0049012304 -0.004760504 -0.0046411753 -0.0045043826 -0.0043826103 -0.0042431355 -0.004124701 -0.0040070415 -0.003904462 -0.00377357 -0.0036621096 -0.003552258 -0.0034184456 -0.0032926202 -0.0031713248 -0.0030727387 -0.0029594303 -0.0028403995 -0.0026985407 -0.0025894642 -0.0024830103 -0.0023550392 -0.0022221208 -0.0020715595 -0.0019518732 -0.00184232 -0.001684606 -0.0015030505 -0.0014019013 -0.0012566449 -0.0010939838 -9.42111E-4 -8.289218E-4 -6.827712E-4 -5.289912E-4 -3.994703E-4 -2.685785E-4 -1.61171E-4 -3.50475E-5)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list -0.003194661 -0.0031511784 -0.0029717684 -0.0028357506 -0.0026425124 -0.002441764 -0.0022822619 -0.002056241 -0.0018788576 -0.0016758442 -0.0014896394 -0.001230836 -8.898974E-4 -6.877184E-4 -4.758835E-4 -2.406836E-4 -2.14577E-5 2.639294E-4 5.288124E-4 7.994175E-4 0.0010399819 0.0012762548 0.0015593768 0.0018314124 0.002120018 0.002395511 0.0026891232 0.0029110909 0.0031836033 0.0034555197 0.0037139657 0.00399661 0.0042431355 0.0045006275 0.004753828 0.0050165653 0.0052657128 0.0055063963 0.005765915 0.0059634447 0.006190777 0.0064492226 0.00668931 0.0069274903 0.0071742535 0.0073833466 0.0075855255 0.0077972417 0.007978439 0.0081858635 0.008386135 0.00859344 0.008783579 0.008956194 0.008981347 0.009223223 0.009412527 0.009607196 0.009748757 0.009934962 0.010145962 0.010388374 0.010525167 0.0107265115 0.010985851 0.010962546 0.011291444 0.01138711 0.011620522 0.011917651 0.012053192 0.012431145 0.01263082 0.013016224 0.013289869 0.0138088465 0.014168083 0.014473318 0.014808536 0.015242517 0.015512227 0.015971542 0.016178906 0.016476453 0.01689893 0.017200172 0.017207265 0.017402232 0.017401636 0.017253399 0.017230928 0.017043949 0.016887665 0.016646892 0.016314805 0.015954823 0.015566736 0.015098483 0.01459688 0.014057994 0.013535053 0.012963116 0.012359321 0.011773825 0.011105865 0.010455519 0.009772062 0.0093199015 0.008336663 0.00779903 0.007116884 0.0065431297 0.005883038 0.005128175 0.0045240224 0.0038073063 0.0032033623 0.0026076287 0.0020567626 0.00143002 9.001792E-4 3.265291E-4 -1.858324E-4 -7.005334E-4 -0.001213655 -0.0018545836 -0.0022805184 -0.0027863384 -0.003251344 -0.0037230552 -0.0042039156 -0.004612088 -0.0050767064 -0.0055231154 -0.0059089363 -0.0063753426 -0.006726444 -0.007058114 -0.00747332 -0.0077053313 -0.008031338 -0.008327603 -0.008612037 -0.008827746 -0.009071022 -0.009294301 -0.009476453 -0.00964725 -0.009784073 -0.009999186 -0.010024518 -0.01018396 -0.010261953 -0.010277271 -0.010339379 -0.010359317 -0.010355294 -0.010398984 -0.010344982 -0.010320246 -0.0103055835 -0.0102669 -0.010189295 -0.010153174 -0.010090768 -0.010063827 -0.0098820925 -0.0098260045 -0.009749591 -0.009696543 -0.00956732 -0.009449482 -0.009284914 -0.009217918 -0.0090482235 -0.00894326 -0.00877893 -0.008639336 -0.008523822 -0.008404553 -0.008233845 -0.008100927 -0.007957816 -0.007827282 -0.007679224 -0.007533312 -0.007399976 -0.007249117 -0.0071319346 -0.007008672 -0.0068775416 -0.006739139 -0.006604135 -0.0064353347 -0.006327331 -0.0061767698 -0.0060688853 -0.0059116483 -0.005785167 -0.005680859 -0.0055522323 -0.005415201 -0.00528425 -0.005153954 -0.0050341487 -0.0049012304 -0.004760504 -0.0046411753 -0.0045043826 -0.0043826103 -0.0042431355 -0.004124701 -0.0040070415 -0.003904462 -0.00377357 -0.0036621096 -0.003552258 -0.0034184456 -0.0032926202 -0.0031713248 -0.0030727387 -0.0029594303 -0.0028403995 -0.0026985407 -0.0025894642 -0.0024830103 -0.0023550392 -0.0022221208 -0.0020715595 -0.0019518732 -0.00184232 -0.001684606 -0.0015030505 -0.0014019013 -0.0012566449 -0.0010939838 -9.42111E-4 -8.289218E-4 -6.827712E-4 -5.289912E-4 -3.994703E-4 -2.685785E-4 -1.61171E-4 -3.50475E-5))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0010263324 0.0010420978 0.0010642113 0.0010819734 0.0010979176 0.0011092424 0.001109481 0.0011228324 0.0011283757 0.0011258127 0.0011215806 0.001136184 0.0011416376 0.0011482836 0.001155913 0.0011693837 0.0011912286 0.0012128652 0.0012515189 0.0012899638 0.0013346076 0.0013746918 0.001421243 0.0014737249 0.0015217662 0.0015596452 0.0016134383 0.0016728044 0.0017240048 0.0017772912 0.0018512012 0.0019030572 0.001977682 0.002064139 0.0021373034 0.0022428334 0.0023488403 0.0024425388 0.0025504527 0.0026554168 0.0027657152 0.0028913915 0.0030311048 0.0031701327 0.003309816 0.0034561456 0.0035926104 0.0037385524 0.0038971603 0.0040360987 0.004183203 0.0043118 0.0044106543 0.0045202673 0.0046016276 0.0047039986 0.004791826 0.004891008 0.004981101 0.005077511 0.005162984 0.005278796 0.0054037273 0.005521983 0.005622387 0.0057569146 0.005887419 0.006026447 0.0061405897 0.006253779 0.0063990057 0.0065169037 0.006627023 0.006752044 0.006873876 0.0070232153 0.0071138735 0.007229552 0.0073838527 0.007509068 0.0076219286 0.0077536847 0.007879853 0.008015797 0.008141607 0.008244872 0.008402243 0.008520365 0.0086492 0.008745521 0.008871257 0.008986369 0.009099044 0.009192705 0.00930056 0.009436123 0.009594537 0.009701572 0.009783164 0.009928741 0.010066744 0.010083541 0.010274479 0.010392655 0.010590976 0.01072085 0.010844864 0.011014055 0.011151774 0.01130037 0.011440471 0.01155496 0.01170174 0.011797875 0.011827476 0.011924848 0.011974409 0.012012437 0.012049854 0.012083977 0.012058318 0.011988774 0.012056917 0.012005299 0.011816055 0.011756167 0.011708438 0.011586577 0.011782855 0.0115944445 0.011353701 0.011150688 0.010591179 0.011007756 0.010747522 0.010020196 0.0099540055 0.009829044 0.0096851885 0.009543389 0.009323835 0.009129167 0.008907706 0.008690059 0.008499652 0.008282185 0.008058101 0.007812381 0.007602364 0.0073452 0.007154107 0.0069034696 0.0067171753 0.006440282 0.0062366724 0.0059974194 0.00579232 0.005602002 0.005340934 0.0050989986 0.004920244 0.0046865344 0.0044869185 0.004185617 0.004037142 0.0039303303 0.0036407113 0.0034721496 0.0032981038 0.0031222105 0.0029519797 0.0027655363 0.002571404 0.0023940206 0.0022166968 0.0019758344 0.0018332005 0.0016727448 0.0015186668 0.0013464094 0.0011547208 9.402634E-4 6.678104E-4 5.230904E-4 2.64287E-4 6.43134E-5 -1.032352E-4 -3.26097E-4 -5.384684E-4 -6.555319E-4 -8.204579E-4 -0.001016736 -0.0011236668 -0.0012643935 -0.0013668538 -0.0015369058 -0.001585424 -0.0017347336 -0.0017977356 -0.001929462 -0.0020089746 -0.0020827055 -0.0021229387 -0.0022612214 -0.0022987128 -0.0023795367 -0.0024391413 -0.0025091768 -0.0025720597 -0.002616763 -0.0026685596 -0.0027077198)) (quote (0.002536893 0.002629697 0.00266248 0.0027031899 0.0027372837 0.0028082729 0.0028727057 0.0029182434 0.002931416 0.0029789803 0.0030279756 0.00305897 0.0030832293 0.0031190517 0.003163874 0.0031847358 0.0032215715 0.0032576325 0.0032977462 0.0033325553 0.003362894 0.003410041 0.0034444929 0.003488004 0.0035222173 0.003595054 0.003639728 0.0036835673 0.0037608745 0.0038032232 0.0038297177 0.0039037464 0.00393644 0.0039780736 0.004028499 0.0040946305 0.004095793 0.0041510463 0.004177332 0.004229188 0.004267454 0.004315108 0.0043589473 0.0043762326 0.0044219494 0.004467249 0.0045138 0.0045683384 0.0046054125 0.004630387 0.004655242 0.0046841204 0.004729986 0.004771918 0.004825741 0.004868239 0.004915297 0.0049803853 0.005041927 0.0051731467 0.0052506626 0.0053063333 0.0054196716 0.005510092 0.0056546326 0.0057350397 0.0058526695 0.005981356 0.006125957 0.006278217 0.0064170063 0.0065768957 0.006749481 0.0069438215 0.0071204906 0.0073190634 0.007561251 0.0077954834 0.008004889 0.008244365 0.0085071325 0.00875549 0.009029642 0.009302452 0.009617597 0.009951606 0.010218397 0.010538444 0.010867208 0.0111976415 0.011497967 0.0118088275 0.012033321 0.012344994 0.012571938 0.012776282 0.0129082985 0.013019271 0.013061482 0.013072172 0.01300143 0.012911773 0.012736864 0.012531906 0.012245387 0.011920653 0.011544414 0.011074252 0.010581061 0.010066122 0.009501502 0.0089452565 0.008470371 0.0078042 0.007220223 0.0065086335 0.0058437884 0.005217463 0.0045812726 0.003980726 0.00342229 0.0030047745 0.0023829043 0.0019561649 0.0016809702 0.0013101102 9.682328E-4 6.979108E-4 1.669079E-4 3.31551E-5 -3.77744E-5 -1.21817E-4 -2.055317E-4 -2.919734E-4 -2.866685E-4 -1.856238E-4 -1.606643E-4 -3.471822E-4 -2.334267E-4 -1.022816E-4 2.30819E-5 1.391619E-4 2.474338E-4 3.59267E-4 4.611462E-4 5.787462E-4 6.78733E-4 7.979423E-4 9.04724E-4 0.0010024458 0.0011036546 0.0012073368 0.0012523532 0.0013468862 0.001410827 0.001485303 0.0015479178 0.0015401244 0.0016280562 0.0016928612 0.0017194748 0.001771003 0.0018064528 0.001782 0.001764521 0.0018030108 0.0017748176 0.0017465502 0.00172019 0.0016619862 0.0015940816 0.001536563 0.0014218838 0.0013114512 0.0012048484 0.0010373294 8.732378E-4 7.177442E-4 5.192757E-4 3.669262E-4 2.046973E-4 5.09173E-5 -1.373887E-4 -2.176315E-4 -3.847182E-4 -5.280823E-4 -6.418526E-4 -8.540004E-4 -0.0010118784 -0.0012031496 -0.0013146997 -0.0015314668 -0.0016999394 -0.0018471629 -0.0020024777 -0.0021127016 -0.002285853 -0.0023778528 -0.0025259704 -0.0026261655 -0.002717808 -0.0028315189 -0.0029433072 -0.0029961169 -0.0030379296 -0.0031305405 -0.0031661392 -0.0032291115 -0.0032806993 -0.0033170432 -0.00337252 -0.0034293833)) (quote (-3.50475E-5 1.147389E-4 2.10762E-4 3.204942E-4 4.310608E-4 5.51641E-4 6.605983E-4 7.614493E-4 8.388758E-4 9.57787E-4 0.0010519624 0.0011154414 0.001183331 0.0012706518 0.0013599992 0.0014271736 0.0015184285 0.0015767814 0.0016322136 0.0017021298 0.0017659664 0.0018334388 0.0018934608 0.0019664765 0.002036512 0.0021502972 0.0021978617 0.0022894144 0.0023742915 0.0024584532 0.0025494697 0.0026468637 0.0027127266 0.0027999878 0.0028713346 0.003004372 0.0030841232 0.0031828285 0.0032673478 0.0033816696 0.003499091 0.0036216376 0.003727913 0.003843844 0.00398165 0.004119456 0.0042657256 0.0044061546 0.0045681 0.004701853 0.0048968196 0.0051088333 0.005338609 0.00556314 0.0058253408 0.0060756207 0.0063643456 0.0066487193 0.0069481135 0.0072374945 0.007562101 0.00784421 0.008119464 0.0084145665 0.008703172 0.009003878 0.0092609525 0.009573996 0.009874105 0.010174334 0.010466993 0.010748386 0.011044502 0.011340439 0.011606991 0.011877179 0.012116551 0.012351453 0.01257813 0.012768447 0.012888372 0.013107002 0.013244927 0.013348579 0.013497352 0.013578117 0.013526619 0.013510615 0.013463913 0.013315737 0.013117015 0.012838304 0.012495637 0.01212427 0.011660874 0.011155993 0.010553271 0.009959608 0.009251267 0.008525461 0.0077468455 0.006943733 0.0061178208 0.005209446 0.004406452 0.0034534037 0.0026161373 0.001750052 9.261072E-4 1.421571E-4 -6.98954E-4 -0.0014683902 -0.002217561 -0.002990067 -0.0037360788 -0.004463494 -0.005271375 -0.005971372 -0.0066393316 -0.007346988 -0.008074015 -0.008607328 -0.009363651 -0.009953022 -0.010379851 -0.010995209 -0.0115045905 -0.012020469 -0.012862295 -0.013180494 -0.013468444 -0.013760656 -0.013836145 -0.014559656 -0.014748395 -0.014481485 -0.014802813 -0.015138984 -0.015279949 -0.015460611 -0.015518904 -0.015608846 -0.015675962 -0.015675903 -0.01574707 -0.015767873 -0.015779138 -0.015773416 -0.01579988 -0.015751303 -0.015790225 -0.01573366 -0.015755475 -0.015680016 -0.015659869 -0.0155828 -0.015508889 -0.0155156255 -0.01537472 -0.0152410865 -0.015156805 -0.015013874 -0.01487112 -0.014717459 -0.014659285 -0.014448344 -0.014236926 -0.014047743 -0.013842226 -0.013630867 -0.013434648 -0.013212442 -0.012955666 -0.012685895 -0.012422204 -0.012156367 -0.011799097 -0.011496067 -0.011117578 -0.010759473 -0.01036489 -0.009973764 -0.009582996 -0.009237528 -0.008799195 -0.008414984 -0.008108377 -0.0076553826 -0.0072941776 -0.006854058 -0.006577015 -0.006097436 -0.0056773424 -0.0052661896 -0.0049192906 -0.004607916 -0.004226804 -0.0038858652 -0.0035072565 -0.0032461882 -0.0028514862 -0.002543211 -0.002147913 -0.0018244982 -0.0015558004 -0.0011661054 -8.630754E-4 -5.334617E-4 -2.036095E-4 1.072884E-4 3.987551E-4 7.680655E-4)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list -3.50475E-5 1.147389E-4 2.10762E-4 3.204942E-4 4.310608E-4 5.51641E-4 6.605983E-4 7.614493E-4 8.388758E-4 9.57787E-4 0.0010519624 0.0011154414 0.001183331 0.0012706518 0.0013599992 0.0014271736 0.0015184285 0.0015767814 0.0016322136 0.0017021298 0.0017659664 0.0018334388 0.0018934608 0.0019664765 0.002036512 0.0021502972 0.0021978617 0.0022894144 0.0023742915 0.0024584532 0.0025494697 0.0026468637 0.0027127266 0.0027999878 0.0028713346 0.003004372 0.0030841232 0.0031828285 0.0032673478 0.0033816696 0.003499091 0.0036216376 0.003727913 0.003843844 0.00398165 0.004119456 0.0042657256 0.0044061546 0.0045681 0.004701853 0.0048968196 0.0051088333 0.005338609 0.00556314 0.0058253408 0.0060756207 0.0063643456 0.0066487193 0.0069481135 0.0072374945 0.007562101 0.00784421 0.008119464 0.0084145665 0.008703172 0.009003878 0.0092609525 0.009573996 0.009874105 0.010174334 0.010466993 0.010748386 0.011044502 0.011340439 0.011606991 0.011877179 0.012116551 0.012351453 0.01257813 0.012768447 0.012888372 0.013107002 0.013244927 0.013348579 0.013497352 0.013578117 0.013526619 0.013510615 0.013463913 0.013315737 0.013117015 0.012838304 0.012495637 0.01212427 0.011660874 0.011155993 0.010553271 0.009959608 0.009251267 0.008525461 0.0077468455 0.006943733 0.0061178208 0.005209446 0.004406452 0.0034534037 0.0026161373 0.001750052 9.261072E-4 1.421571E-4 -6.98954E-4 -0.0014683902 -0.002217561 -0.002990067 -0.0037360788 -0.004463494 -0.005271375 -0.005971372 -0.0066393316 -0.007346988 -0.008074015 -0.008607328 -0.009363651 -0.009953022 -0.010379851 -0.010995209 -0.0115045905 -0.012020469 -0.012862295 -0.013180494 -0.013468444 -0.013760656 -0.013836145 -0.014559656 -0.014748395 -0.014481485 -0.014802813 -0.015138984 -0.015279949 -0.015460611 -0.015518904 -0.015608846 -0.015675962 -0.015675903 -0.01574707 -0.015767873 -0.015779138 -0.015773416 -0.01579988 -0.015751303 -0.015790225 -0.01573366 -0.015755475 -0.015680016 -0.015659869 -0.0155828 -0.015508889 -0.0155156255 -0.01537472 -0.0152410865 -0.015156805 -0.015013874 -0.01487112 -0.014717459 -0.014659285 -0.014448344 -0.014236926 -0.014047743 -0.013842226 -0.013630867 -0.013434648 -0.013212442 -0.012955666 -0.012685895 -0.012422204 -0.012156367 -0.011799097 -0.011496067 -0.011117578 -0.010759473 -0.01036489 -0.009973764 -0.009582996 -0.009237528 -0.008799195 -0.008414984 -0.008108377 -0.0076553826 -0.0072941776 -0.006854058 -0.006577015 -0.006097436 -0.0056773424 -0.0052661896 -0.0049192906 -0.004607916 -0.004226804 -0.0038858652 -0.0035072565 -0.0032461882 -0.0028514862 -0.002543211 -0.002147913 -0.0018244982 -0.0015558004 -0.0011661054 -8.630754E-4 -5.334617E-4 -2.036095E-4 1.072884E-4 3.987551E-4 7.680655E-4))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.0027077198 -0.0027599933 -0.0028035045 -0.0028451085 -0.0029167533 -0.0029348135 -0.0029647947 -0.0030177236 -0.003066957 -0.0031440854 -0.003163695 -0.0032342673 -0.0033129454 -0.0033835173 -0.0034331084 -0.0035178063 -0.0035871268 -0.0036313536 -0.0036986173 -0.0037352145 -0.003783226 -0.0038191676 -0.003824264 -0.0038399992 -0.0038856864 -0.0038943293 -0.0039235354 -0.0039353073 -0.0039853156 -0.004033953 -0.0040880144 -0.0041868687 -0.004314214 -0.0044618547 -0.004622042 -0.004825264 -0.0050239563 -0.0052728057 -0.005557984 -0.0058929026 -0.0062734485 -0.006721407 -0.007207185 -0.007758796 -0.00838986 -0.009034425 -0.0096952915 -0.01039052 -0.011075705 -0.011747301 -0.012401342 -0.013055086 -0.013621181 -0.014092744 -0.014390707 -0.014477149 -0.0146562755 -0.014815584 -0.014841543 -0.014723987 -0.01454991 -0.014308065 -0.013949662 -0.013617425 -0.01314529 -0.012739599 -0.012250252 -0.011823267 -0.011340182 -0.010868937 -0.010418162 -0.009973247 -0.009598853 -0.009209324 -0.008858735 -0.008422367 -0.008063726 -0.007679517 -0.0072579514 -0.0068676137 -0.006444417 -0.005934339 -0.0056748353 -0.005088065 -0.004752949 -0.0042894557 -0.0038323924 -0.0033134148 -0.0027782023 -0.0023140088 -0.0018270686 -0.0014762358 -6.886572E-4 -4.654601E-4 3.11248E-4 7.683337E-4 0.00127735 0.0015062168 0.0021237207 0.0025854409 0.0029766485 0.003566943 0.0039160997 0.004388757 0.004801862 0.005221337 0.005548846 0.0059296787 0.0062665194 0.006565472 0.0067986273 0.007014364 0.0071630664 0.007262225 0.0073347697 0.007374678 0.007341561 0.007288446 0.0071823504 0.007046651 0.0068865274 0.0066860877 0.006472297 0.006225117 0.005901769 0.005634621 0.005327828 0.005022049 0.004694201 0.0043603033 0.0040204376 0.003729388 0.0033235997 0.00301525 0.0026296305 0.0023392067 0.0020486787 0.0017650798 0.0014781728 0.0012264402 9.920448E-4 7.42197E-4 5.20125E-4 2.96101E-4 8.93772E-5 -1.11863E-4 -3.165603E-4 -4.900545E-4 -6.623864E-4 -8.340627E-4 -9.8525E-4 -0.0011148378 -0.0012402014 -0.0013944954 -0.0014828594 -0.001566872 -0.0016671942 -0.0017613769 -0.001836866 -0.0019030422 -0.001955226 -0.001990944 -0.0020108447 -0.002004914 -0.001999706 -0.0019871295 -0.0019670353 -0.0019333364 -0.0018798933 -0.0018110277 -0.001746714 -0.0016576202 -0.0015148744 -0.0014441758 -0.001331985 -0.0012179018 -0.0011060238 -9.78455E-4 -8.242354E-4 -6.382242E-4 -4.798248E-4 -2.914295E-4 -9.75803E-5 1.058504E-4 3.042445E-4 5.271733E-4 7.237345E-4 9.609164E-4 0.0011675508 0.0013712198 0.0015752688 0.001772456 0.0019475372 0.0021350459 0.0023043976 0.002464302 0.0026228428 0.0027733669 0.0029083714 0.003049441 0.0031622574 0.0032820627 0.0033966529 0.0034906417 0.003554456 0.0035889373 0.0036136397)) (quote (-0.0034293833 -0.0034597367 -0.0034991652 -0.0035320968 -0.0035940409 -0.0035565195 -0.003568068 -0.0035772024 -0.0035670549 -0.0035880504 -0.0035306812 -0.0035110417 -0.0034943072 -0.00348185 -0.0034809709 -0.0034731033 -0.0034628809 -0.0034792873 -0.0034846813 -0.00353083 -0.00354442 -0.0036006125 -0.0036267713 -0.0036783067 -0.0037434849 -0.0037991256 -0.0038658604 -0.003908001 -0.00395371 -0.00399635 -0.003963463 -0.0039457455 -0.0039164797 -0.003874801 -0.0038615393 -0.003812004 -0.003768228 -0.0037598017 -0.0037188905 -0.003706101 -0.0036767053 -0.0036105253 -0.0035209284 -0.0033902713 -0.0032694824 -0.0031044446 -0.002944043 -0.0028880462 -0.002821314 -0.0027045794 -0.0026021488 -0.0024496494 -0.0023043023 -0.0021464164 -0.0019207344 -0.0016828284 -0.0015542934 -0.0014515543 -0.0013355358 -0.0012329756 -0.0011353904 -0.0011285032 -0.0010787838 -0.0011341889 -0.0011358662 -0.00122312 -0.0013095616 -0.0014391114 -0.0015292429 -0.0016393066 -0.0017439444 -0.001826726 -0.0020033997 -0.0021412035 -0.0022788272 -0.0023883228 -0.0025381744 -0.0026503392 -0.0027622655 -0.0028530807 -0.0030185618 -0.0030757822 -0.003254607 -0.00331166 -0.0034511388 -0.0035041573 -0.0035963056 -0.0036610216 -0.0036995337 -0.0037751792 -0.0038288755 -0.0039864704 -0.0039324165 -0.004038319 -0.0038862825 -0.0039734245 -0.0040373057 -0.004276797 -0.0042047873 -0.0042669997 -0.0043671355 -0.0043861196 -0.00444369 -0.0045131296 -0.0045648366 -0.004606992 -0.0046672523 -0.004676894 -0.0046774894 -0.004660189 -0.0046370924 -0.0045578927 -0.0044835806 -0.004383177 -0.004269466 -0.004113704 -0.003945425 -0.003757268 -0.0035423336 -0.003331259 -0.003132522 -0.002874583 -0.0026446283 -0.002376631 -0.002191231 -0.001911342 -0.0016395748 -0.0013435186 -0.001049906 -7.771403E-4 -4.808754E-4 -7.43121E-5 1.052916E-4 4.661977E-4 6.44505E-4 9.451808E-4 0.001220733 0.001509145 0.0017234832 0.0019796493 0.0022452176 0.00241974 0.0025787505 0.0027358383 0.0028992147 0.0030358285 0.0031348616 0.0032654852 0.003379539 0.0034796896 0.0035615564 0.003650457 0.0037191513 0.00377658 0.003819242 0.0038779376 0.003910944 0.003944516 0.003956944 0.0039829016 0.0040168166 0.004008591 0.0040397793 0.0040695965 0.004107684 0.0041398555 0.004161574 0.004185982 0.00420627 0.0041501075 0.004165262 0.0042094886 0.0041076318 0.004103057 0.004121423 0.004084252 0.004042916 0.003903836 0.0038418845 0.0037348273 0.0035989955 0.0034478864 0.0032575243 0.0030292198 0.0028088093 0.0025691949 0.0023212955 0.0019977652 0.0017841236 0.0015684144 0.0013308415 0.0010759644 8.505918E-4 6.053746E-4 4.004426E-4 1.846254E-4 -1.394E-5 -2.016239E-4 -3.91718E-4 -5.827174E-4 -7.59013E-4 -9.073728E-4 -0.0010871516 -0.0012497344 -0.0014885962 -0.001603339 -0.0016403094)) (quote (7.680655E-4 0.001060009 0.0014246702 0.0017653704 0.002166152 0.0024369955 0.002822876 0.003191233 0.003579378 0.004004121 0.00436604 0.004769087 0.005204797 0.005628228 0.0060613156 0.006495118 0.006941676 0.0073977714 0.0078651905 0.008326054 0.008878589 0.009441853 0.010021329 0.010630488 0.011268973 0.0119690895 0.012666106 0.013409972 0.014187574 0.015007496 0.015797735 0.016673685 0.017537952 0.018440843 0.01933062 0.020264388 0.021182478 0.02211994 0.023101688 0.02403742 0.024966062 0.025858581 0.026694358 0.027436614 0.028096199 0.028576553 0.028830769 0.028933943 0.028978227 0.02887553 0.02868867 0.028281393 0.027728916 0.02704352 0.026195229 0.025067747 0.024035663 0.0229007 0.021696657 0.020370245 0.019194752 0.017700851 0.0164918 0.015017539 0.013890983 0.012648463 0.011495531 0.010234505 0.0092484355 0.008333087 0.007479399 0.006777585 0.0059103817 0.005297497 0.0047254265 0.0041407496 0.003640473 0.003181487 0.0026253462 0.0023200512 0.001687929 0.0013114512 7.946641E-4 4.64499E-4 -1.745671E-4 -6.15582E-4 -0.0010281802 -0.0014993996 -0.001991555 -0.0024606288 -0.0028967709 -0.003393784 -0.0038162172 -0.004362285 -0.00489378 -0.005427122 -0.0059606284 -0.0065577626 -0.0070459545 -0.0077108746 -0.00849542 -0.009097755 -0.009936601 -0.0106417835 -0.0114427805 -0.012232035 -0.013069183 -0.013916075 -0.014747291 -0.015662015 -0.016445905 -0.017299712 -0.018115044 -0.018858135 -0.019565314 -0.020236314 -0.02091366 -0.02149731 -0.02205187 -0.02253884 -0.022963524 -0.023372889 -0.02371478 -0.024041057 -0.024177432 -0.024379015 -0.024531723 -0.024660886 -0.024685204 -0.02468884 -0.024624408 -0.02455616 -0.024370194 -0.024205506 -0.02396667 -0.023705602 -0.02343452 -0.023119212 -0.022802592 -0.022437692 -0.0220263 -0.021608115 -0.021154404 -0.020690799 -0.020261288 -0.019783855 -0.019295693 -0.01881218 -0.018339634 -0.017850995 -0.017361403 -0.016825557 -0.016240597 -0.015781165 -0.0152060995 -0.014674664 -0.014114022 -0.013576031 -0.013011694 -0.012483716 -0.0119303465 -0.011340976 -0.010780573 -0.010236621 -0.009679079 -0.009107232 -0.008543253 -0.007988811 -0.0074366327 -0.006830334 -0.006283641 -0.005709529 -0.0051181317 -0.004565954 -0.0039943457 -0.0034459827 -0.0029064417 -0.0023440125 -0.0018084048 -0.0012460948 -7.225275E-4 -1.941919E-4 3.432035E-4 8.763076E-4 0.0014021398 0.0019261836 0.0024522543 0.0030025244 0.0035226345 0.0040358305 0.0045366287 0.0050525665 0.0055482388 0.00607419 0.0065785647 0.007089496 0.0075758696 0.008088112 0.008584499 0.009101391 0.009611607 0.010098934 0.010604739 0.011112571 0.011624098 0.01209867 0.012260818)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 7.680655E-4 0.001060009 0.0014246702 0.0017653704 0.002166152 0.0024369955 0.002822876 0.003191233 0.003579378 0.004004121 0.00436604 0.004769087 0.005204797 0.005628228 0.0060613156 0.006495118 0.006941676 0.0073977714 0.0078651905 0.008326054 0.008878589 0.009441853 0.010021329 0.010630488 0.011268973 0.0119690895 0.012666106 0.013409972 0.014187574 0.015007496 0.015797735 0.016673685 0.017537952 0.018440843 0.01933062 0.020264388 0.021182478 0.02211994 0.023101688 0.02403742 0.024966062 0.025858581 0.026694358 0.027436614 0.028096199 0.028576553 0.028830769 0.028933943 0.028978227 0.02887553 0.02868867 0.028281393 0.027728916 0.02704352 0.026195229 0.025067747 0.024035663 0.0229007 0.021696657 0.020370245 0.019194752 0.017700851 0.0164918 0.015017539 0.013890983 0.012648463 0.011495531 0.010234505 0.0092484355 0.008333087 0.007479399 0.006777585 0.0059103817 0.005297497 0.0047254265 0.0041407496 0.003640473 0.003181487 0.0026253462 0.0023200512 0.001687929 0.0013114512 7.946641E-4 4.64499E-4 -1.745671E-4 -6.15582E-4 -0.0010281802 -0.0014993996 -0.001991555 -0.0024606288 -0.0028967709 -0.003393784 -0.0038162172 -0.004362285 -0.00489378 -0.005427122 -0.0059606284 -0.0065577626 -0.0070459545 -0.0077108746 -0.00849542 -0.009097755 -0.009936601 -0.0106417835 -0.0114427805 -0.012232035 -0.013069183 -0.013916075 -0.014747291 -0.015662015 -0.016445905 -0.017299712 -0.018115044 -0.018858135 -0.019565314 -0.020236314 -0.02091366 -0.02149731 -0.02205187 -0.02253884 -0.022963524 -0.023372889 -0.02371478 -0.024041057 -0.024177432 -0.024379015 -0.024531723 -0.024660886 -0.024685204 -0.02468884 -0.024624408 -0.02455616 -0.024370194 -0.024205506 -0.02396667 -0.023705602 -0.02343452 -0.023119212 -0.022802592 -0.022437692 -0.0220263 -0.021608115 -0.021154404 -0.020690799 -0.020261288 -0.019783855 -0.019295693 -0.01881218 -0.018339634 -0.017850995 -0.017361403 -0.016825557 -0.016240597 -0.015781165 -0.0152060995 -0.014674664 -0.014114022 -0.013576031 -0.013011694 -0.012483716 -0.0119303465 -0.011340976 -0.010780573 -0.010236621 -0.009679079 -0.009107232 -0.008543253 -0.007988811 -0.0074366327 -0.006830334 -0.006283641 -0.005709529 -0.0051181317 -0.004565954 -0.0039943457 -0.0034459827 -0.0029064417 -0.0023440125 -0.0018084048 -0.0012460948 -7.225275E-4 -1.941919E-4 3.432035E-4 8.763076E-4 0.0014021398 0.0019261836 0.0024522543 0.0030025244 0.0035226345 0.0040358305 0.0045366287 0.0050525665 0.0055482388 0.00607419 0.0065785647 0.007089496 0.0075758696 0.008088112 0.008584499 0.009101391 0.009611607 0.010098934 0.010604739 0.011112571 0.011624098 0.01209867 0.012260818))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0036136397 0.0036754012 0.0037524847 0.0037990956 0.0038273633 0.0038741976 0.0039459765 0.003947824 0.003963142 0.003970936 0.003960088 0.003939301 0.003907606 0.00384748 0.0037821827 0.0036695453 0.0035371185 0.0033872577 0.003192991 0.0029722154 0.002728626 0.0024430305 0.0020728559 0.0017129928 0.0012889952 8.005947E-4 2.743751E-4 -3.36498E-4 -0.0010069312 -0.0017605572 -0.0025285483 -0.0032645464 -0.003978029 -0.004625559 -0.0051891506 -0.0055898726 -0.0058861077 -0.0060896576 -0.006272301 -0.006417945 -0.006558761 -0.006609112 -0.0066153854 -0.006556779 -0.0064399094 -0.006292574 -0.006085187 -0.005796388 -0.0056329146 -0.005367242 -0.0050853267 -0.0047931 -0.0045363307 -0.0042522848 -0.00401517 -0.0037704632 -0.0035657212 -0.0033716597 -0.0031839982 -0.0030256135 -0.0028802008 -0.0027540848 -0.0026422853 -0.002536282 -0.0024377928 -0.002342917 -0.0022540652 -0.0021875352 -0.0021187738 -0.0020324644 -0.0019634422 -0.0018968452 -0.0018418544 -0.0017724782 -0.00173999 -0.0016308316 -0.0015918166 -0.0015226714 -0.0014797312 -0.001445396 -0.001394515 -0.0013322812 -0.0012751102 -0.0012479676 -0.0011862964 -0.0011696806 -0.0011409788 -0.0011066054 -0.0010739134 -0.001042076 -0.0010247644 -9.85153E-4 -9.449192E-4 -9.307138E-4 -8.870846E-4 -8.510348E-4 -8.117626E-4 -7.97003E-4 -7.520337E-4 -7.133223E-4 -6.729695E-4 -6.466433E-4 -6.211251E-4 -5.872929E-4 -5.526152E-4 -5.088923E-4 -4.827678E-4 -4.500663E-4 -4.305048E-4 -4.064096E-4 -3.931914E-4 -3.550118E-4 -3.382536E-4 -3.32091E-4 -3.038114E-4 -2.950532E-4 -2.769837E-4 -2.735183E-4 -2.608858E-4 -2.665306E-4 -2.649985E-4 -2.637422E-4 -2.485272E-4 -2.578497E-4 -2.578758E-4 -2.487265E-4 -2.262648E-4 -2.183802E-4 -2.232436E-4 -2.103522E-4 -2.054982E-4 -2.107024E-4 -1.969635E-4 -1.84292E-4 -1.695864E-4 -1.675915E-4 -1.659542E-4 -1.711939E-4 -1.59163E-4 -1.462847E-4 -1.225099E-4 -1.344997E-4 -1.325328E-4 -1.369156E-4 -1.256131E-4 -1.060963E-4 -1.109708E-4 -1.160428E-4 -1.209136E-4 -1.239758E-4 -1.265835E-4 -1.164079E-4 -1.079645E-4 -9.03998E-5 -1.05761E-4 -8.70172E-5 -9.5021E-5 -1.005679E-4 -9.395E-5 -9.94075E-5 -9.05413E-5 -8.94442E-5 -9.39011E-5)) (quote (-0.0016403094 -0.0017327444 -0.001862798 -0.0019643866 -0.002047062 -0.002156917 -0.0021554828 -0.0022898242 -0.0022675395 -0.0023690686 -0.0024470836 -0.0025097055 -0.0025675297 -0.0026181266 -0.002657123 -0.0027186722 -0.0027737769 -0.002807118 -0.002867021 -0.0029206795 -0.0029252544 -0.0029920414 -0.0030229688 -0.003043339 -0.003076084 -0.003080152 -0.0030845628 -0.003075458 -0.0030942634 -0.0031450615 -0.0031847209 -0.003155738 -0.0031024218 -0.003048465 -0.0030199588 -0.003031671 -0.0030493439 -0.0030807557 -0.0031499565 -0.0031737537 -0.0031656176 -0.0030799508 -0.002925545 -0.0027739557 -0.0026059449 -0.0024566055 -0.0023272785 -0.0021876993 -0.0021177975 -0.0020122677 -0.0019301772 -0.0018684268 -0.001797393 -0.0017468332 -0.0016922356 -0.0016652198 -0.0016471596 -0.0016321988 -0.001635477 -0.001643911 -0.0016662479 -0.0016918333 -0.0017138124 -0.0017322004 -0.0017481446 -0.0017803313 -0.0017943232 -0.0017807782 -0.0017827452 -0.001774162 -0.001752317 -0.0017317532 -0.0016884804 -0.0016727598 -0.0016359688 -0.00152722 -0.0015235843 -0.00144431 -0.0014102162 -0.001336664 -0.0012919606 -0.0012019874 -0.0011397302 -0.0010646732 -9.974688E-4 -9.338856E-4 -8.86485E-4 -8.29488E-4 -7.91371E-4 -7.526726E-4 -7.143468E-4 -6.809831E-4 -6.474853E-4 -6.185472E-4 -5.774647E-4 -5.327612E-4 -5.166978E-4 -4.821718E-4 -4.590005E-4 -4.261434E-4 -3.934205E-4 -3.606528E-4 -3.425777E-4 -3.020465E-4 -2.681464E-4 -2.364367E-4 -2.019107E-4 -1.76847E-4 -1.728684E-4 -1.370013E-4 -1.285374E-4 -9.14186E-5 -7.24643E-5 -4.27067E-5 -3.92646E-5 -4.25428E-5 -3.60459E-5 -2.04891E-5 -9.1642E-6 -1.32471E-5 -1.83582E-5 1.01924E-5 1.51545E-5 1.18762E-5 -1.49E-7 -5.2601E-6 -7.54E-6 1.72853E-5 1.49757E-5 3.08305E-5 2.11447E-5 9.9838E-6 2.08616E-5 2.15024E-5 1.98036E-5 3.995E-5 1.7345E-5 1.40071E-5 1.13249E-5 2.61813E-5 3.17991E-5 3.56138E-5 4.58807E-5 5.15282E-5 5.90682E-5 6.65337E-5 7.64877E-5 9.59933E-5 1.066327E-4 1.066327E-4 1.26645E-4 1.284927E-4 1.551807E-4 1.569986E-4 1.638085E-4 1.75789E-4 1.914352E-4 2.062768E-4 2.100021E-4 2.251863E-4 2.316087E-4 2.337545E-4 2.395563E-4)) (quote (0.012260818 0.012666225 0.013229728 0.013802648 0.014323592 0.01494825 0.015484215 0.016138196 0.016690016 0.017352581 0.017986894 0.01860261 0.019261718 0.019913912 0.020571113 0.021245718 0.021924854 0.022591353 0.023285389 0.024004579 0.024697423 0.025408626 0.026144386 0.026824594 0.027512253 0.028140964 0.028726042 0.029244064 0.029661952 0.029889584 0.029696823 0.029206992 0.02846086 0.027491153 0.02636224 0.025107444 0.02385658 0.022492588 0.02117145 0.019898475 0.01870799 0.017599792 0.01637268 0.015302003 0.014198392 0.013182163 0.012159675 0.011195719 0.010265201 0.009331644 0.008487999 0.007726103 0.006958932 0.006316811 0.0056630075 0.0050711036 0.004568428 0.0040917397 0.0036795435 0.0033172965 0.0029852987 0.002699405 0.0024318397 0.002228886 0.0019857583 0.0018467308 0.001750052 0.0015894772 0.0014946164 0.0013963282 0.0013417602 0.0012924076 0.001248479 0.0012053849 0.001217574 0.0011916758 0.0011795462 0.0011428298 0.001140058 0.00112319 0.0011336508 0.0011134446 0.0010935664 0.0011093319 0.0010448098 0.001058221 0.0010213852 9.777248E-4 9.763838E-4 9.300114E-4 9.196402E-4 8.713902E-4 8.072257E-4 7.994175E-4 7.319152E-4 6.631315E-4 5.923808E-4 5.200506E-4 4.632175E-4 4.325807E-4 3.753901E-4 3.510714E-4 3.032386E-4 2.584457E-4 2.158284E-4 1.627803E-4 1.02371E-4 4.84288E-5 5.5432E-6 -4.5985E-5 -6.03199E-5 -1.295507E-4 -1.767874E-4 -2.3067E-4 -2.810657E-4 -3.125966E-4 -3.217459E-4 -3.69668E-4 -4.025996E-4 -3.934801E-4 -4.147887E-4 -4.534423E-4 -4.826188E-4 -4.765689E-4 -4.869103E-4 -4.802942E-4 -4.635751E-4 -5.150437E-4 -5.158186E-4 -5.221665E-4 -5.180539E-4 -5.183518E-4 -5.437434E-4 -5.345047E-4 -5.428791E-4 -5.754232E-4 -5.388856E-4 -5.412996E-4 -5.848706E-4 -5.831122E-4 -5.462767E-4 -5.411804E-4 -5.528033E-4 -5.335808E-4 -5.25564E-4 -5.422831E-4 -5.213916E-4 -5.072653E-4 -4.763305E-4 -4.369318E-4 -4.374683E-4 -4.231632E-4 -4.39018E-4 -4.133582E-4 -3.974438E-4 -3.857017E-4 -3.610849E-4 -3.584325E-4 -3.150702E-4 -3.403425E-4 -3.087521E-4 -2.777874E-4 -2.749462E-4)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 0.012260818 0.012666225 0.013229728 0.013802648 0.014323592 0.01494825 0.015484215 0.016138196 0.016690016 0.017352581 0.017986894 0.01860261 0.019261718 0.019913912 0.020571113 0.021245718 0.021924854 0.022591353 0.023285389 0.024004579 0.024697423 0.025408626 0.026144386 0.026824594 0.027512253 0.028140964 0.028726042 0.029244064 0.029661952 0.029889584 0.029696823 0.029206992 0.02846086 0.027491153 0.02636224 0.025107444 0.02385658 0.022492588 0.02117145 0.019898475 0.01870799 0.017599792 0.01637268 0.015302003 0.014198392 0.013182163 0.012159675 0.011195719 0.010265201 0.009331644 0.008487999 0.007726103 0.006958932 0.006316811 0.0056630075 0.0050711036 0.004568428 0.0040917397 0.0036795435 0.0033172965 0.0029852987 0.002699405 0.0024318397 0.002228886 0.0019857583 0.0018467308 0.001750052 0.0015894772 0.0014946164 0.0013963282 0.0013417602 0.0012924076 0.001248479 0.0012053849 0.001217574 0.0011916758 0.0011795462 0.0011428298 0.001140058 0.00112319 0.0011336508 0.0011134446 0.0010935664 0.0011093319 0.0010448098 0.001058221 0.0010213852 9.777248E-4 9.763838E-4 9.300114E-4 9.196402E-4 8.713902E-4 8.072257E-4 7.994175E-4 7.319152E-4 6.631315E-4 5.923808E-4 5.200506E-4 4.632175E-4 4.325807E-4 3.753901E-4 3.510714E-4 3.032386E-4 2.584457E-4 2.158284E-4 1.627803E-4 1.02371E-4 4.84288E-5 5.5432E-6 -4.5985E-5 -6.03199E-5 -1.295507E-4 -1.767874E-4 -2.3067E-4 -2.810657E-4 -3.125966E-4 -3.217459E-4 -3.69668E-4 -4.025996E-4 -3.934801E-4 -4.147887E-4 -4.534423E-4 -4.826188E-4 -4.765689E-4 -4.869103E-4 -4.802942E-4 -4.635751E-4 -5.150437E-4 -5.158186E-4 -5.221665E-4 -5.180539E-4 -5.183518E-4 -5.437434E-4 -5.345047E-4 -5.428791E-4 -5.754232E-4 -5.388856E-4 -5.412996E-4 -5.848706E-4 -5.831122E-4 -5.462767E-4 -5.411804E-4 -5.528033E-4 -5.335808E-4 -5.25564E-4 -5.422831E-4 -5.213916E-4 -5.072653E-4 -4.763305E-4 -4.369318E-4 -4.374683E-4 -4.231632E-4 -4.39018E-4 -4.133582E-4 -3.974438E-4 -3.857017E-4 -3.610849E-4 -3.584325E-4 -3.150702E-4 -3.403425E-4 -3.087521E-4 -2.777874E-4 -2.749462E-4))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-9.39011E-5 -9.61293E-5 -8.72295E-5 -8.47615E-5 -9.08338E-5 -9.27169E-5 -8.60002E-5 -9.8763E-5 -9.0031E-5 -8.80379E-5 -8.09785E-5 -8.75983E-5 -8.88947E-5 -1.027938E-4 -1.100767E-4 -1.215208E-4 -1.305938E-4 -9.60808E-5 -1.904443E-4 -2.106093E-4 -2.454147E-4 -2.411809E-4 -2.991781E-4 -3.423225E-4 -3.688466E-4 -3.782269E-4 -4.35099E-4 -4.550964E-4 -4.769936E-4 -4.886389E-4 -4.948378E-4 -5.006529E-4 -5.085561E-4 -4.920568E-4 -4.744772E-4 -4.218854E-4 -3.69003E-4 -2.86147E-4 -2.15238E-4 -1.197681E-4 8.1435E-6 1.511984E-4 3.147032E-4 5.093199E-4 7.00511E-4 8.72314E-4 0.0010537468 0.0012490004 0.0014496092 0.0016309396 0.0018139276 0.0020315573 0.0021707658 0.0023718896 0.0025008237 0.002662084 0.0027931757 0.002917707 0.0030601297 0.0031985026 0.0033102543 0.0033982897 0.0035227128 0.0036124587 0.0037217345 0.0038079529 0.003876852 0.0039943047 0.004031755 0.00409624 0.0041499883 0.0041932687 0.0042346604 0.00425658 0.00426884 0.0043114796 0.0043481663 0.0043671504 0.0043694377 0.004371017 0.004366368 0.0043792427 0.004382789 0.0043650344 0.0043320656 0.004321508 0.0042921975 0.0042528138 0.0042173714 0.0041838437 0.0041291863 0.0040827543 0.004009381 0.0039535463 0.00392209 0.003830552 0.0037365109 0.0036390573 0.0035374912 0.0034433604 0.0033546836 0.003251642 0.0031503588 0.003066182 0.0029135195 0.002923414 0.0027588755 0.0027177036 0.0026660713 0.0026158989 0.002544284 0.0024852157 0.0024362356 0.0023853034 0.0023400188 0.0022913516 0.002251014 0.002221018 0.0021991285 0.0021812022 0.0021622926 0.0021487323 0.0021621883 0.0021764636 0.002179414 0.0022017658 0.0022285432 0.002263382 0.002278313 0.002299592 0.0023268313 0.0023356676 0.0023412109 0.0023440272 0.002337128 0.0023327768 0.0023315847 0.0023323894 0.0023044646 0.0023301244 0.0021941662 0.00243181 0.0024169684 0.0024345517 0.0024636984 0.0024455488 0.0025060177 0.0025624337 0.002590299 0.0026258529 0.0026575625 0.0026979149 0.0027497113 0.0027826727 0.002827853 0.0028693974 0.0029179752 0.0029535294 0.0030121208 0.0030514598 0.0031049252 0.0031351447 0.0031877458 0.0032028854 0.0032386482 0.0032681525 0.0032960177 0.0033158064 0.0033278463 0.0032871366 0.0033090117 0.0033169389 0.003337115 0.0033185184 0.0033138097 0.0033037665 0.003271639 0.0032408536 0.003205359 0.003161162 0.0030959249 0.00304541 0.0029896796 0.002925694 0.002851665 0.0027929247 0.0027031303 0.002641648 0.0025848449 0.002525419 0.0024705232 0.002417326 0.00237 0.0023357272 0.0022816956 0.0022412837 0.0021855235 0.0021407903 0.002058208 0.0020061732 0.001947254 0.0018834472 0.0018137992 0.0017555058 0.0017055868 0.0016626716 0.0016140342 0.0015644432 0.001511097 0.001484126 0.0014512838 0.0014124216 0.0013889372 0.0013456346 0.0013152362 0.0013099314 0.0012820066 0.0012404026 0.0012034774 0.0011614562 0.0011189878 0.0010879338 0.0010412932 9.883642E-4 9.428562E-4 8.64774E-4 7.933676E-4 6.867051E-4 5.584359E-4 4.443228E-4 2.98053E-4 1.365244E-4 -3.3766E-5 -2.067089E-4 -3.875196E-4 -5.809665E-4 -8.009076E-4 -0.001043588 -0.001266718 -0.0015135408 -0.0017809868 -0.002057135 -0.0023652017 -0.0026773215 -0.003056258 -0.0033873916 -0.0037344096 -0.0041104555 -0.0044947267 -0.0048553348 -0.0052209795 -0.005543858 -0.0059249997 -0.006285608 -0.0066482127 -0.0070240498 -0.0073504746 -0.0077004726 -0.008043528 -0.0083684325 -0.008679479 -0.009015292 -0.009327948 -0.009325087 -0.009790301 -0.010160148 -0.010510683 -0.010943502 -0.011212468 -0.01150769 -0.011769772 -0.012018889 -0.012294278 -0.012556121 -0.012895256 -0.01311928 -0.0133987665 -0.013593971 -0.013796106 -0.014052883 -0.014257856 -0.014461845 -0.014655694 -0.014831275 -0.015031118 -0.015193171 -0.015307775 -0.015458334 -0.015569939 -0.015677643 -0.015786248 -0.015933387 -0.015835885 -0.015978903 -0.016064033 -0.01614932 -0.016222775 -0.016258061 -0.016398594 -0.016363517 -0.016457856 -0.016430259 -0.01641956 -0.016460285 -0.016624883 -0.0165326 -0.01647064 -0.016192258 -0.016202778 -0.01589021 -0.015834928 -0.015946329 -0.01552701 -0.015687257 -0.015510917 -0.015246092 -0.015024066 -0.014765531 -0.014546483 -0.014799713 -0.013918847 -0.013640164 -0.01349628 -0.01314503 -0.013383985 -0.0123561025 -0.012183428 -0.011840463 -0.011439204 -0.011070967 -0.010632753 -0.010221362 -0.009787679 -0.009313345 -0.00883621 -0.008372068 -0.007911921 -0.007439852 -0.006972432 -0.0065196157 -0.006023288 -0.0055760145 -0.0051039457 -0.0046316385 -0.0041421056 -0.0037009716 -0.0033118129 -0.0028703213 -0.0023866296 -0.0020284653 -0.001674235 -0.0012560488 -9.25243E-4 -5.631447E-4 -2.703071E-4 3.06368E-5 3.308058E-4 6.787777E-4 9.518266E-4 0.0013210774 0.0016130806 0.0019477606 0.0023018718 0.002620995 0.002888739 0.0033153892 0.0036524537 0.0040684934 0.0044668913 0.004899919 0.005299449 0.00571692 0.006086111 0.006518841 0.007025122 0.00748545 0.008021951 0.008527577 0.009058833 0.009618819 0.010096729 0.010620415 0.011219978 0.011838615 0.012376964 0.0128801465 0.013467371 0.014014007 0.0145097375 0.015042783 0.015527427 0.016055137 0.016543508 0.0169608 0.017381013 0.0178954 0.018306494 0.018648595 0.018940539 0.019259692 0.019576133 0.019890309 0.020121426 0.02035153 0.020524353 0.020504237 0.02070789 0.020615727 0.02063495 0.020760194 0.02062191 0.020489783 0.020386845 0.020305839 0.020133887 0.019909326 0.019677295 0.019382338 0.019147497 0.018835757 0.018463772 0.018149153 0.017840922 0.017401375 0.016919449 0.01636687 0.015707687 0.015006245 0.014279232 0.013556242 0.012825757 0.012127742 0.011446595 0.010812342 0.010152012 0.0095149875 0.008852094 0.008189648 0.0074789226 0.0067841406 0.006053865 0.005338967 0.004589319 0.0038162473 0.0030385554 0.00231874 0.001547724 7.971823E-4 3.26633E-5 -7.146001E-4 -0.0014845134 -0.0022456348 -0.0029902757 -0.003770262 -0.0045003593 -0.005246371 -0.005963087 -0.0066908 -0.0073120296 -0.008013159 -0.008689225 -0.009379268 -0.009985864 -0.010612041 -0.011181384 -0.01177597 -0.012318745 -0.012814298 -0.013386652 -0.013793051 -0.014243155 -0.014673562 -0.014991687 -0.015356959 -0.015716277 -0.015977532 -0.01622811 -0.016411856 -0.016601623 -0.01671184 -0.0168373 -0.016876087 -0.016841807 -0.016850278 -0.016861845 -0.016770043 -0.016635746 -0.016540647 -0.016393833 -0.01618521 -0.016011596 -0.015829444 -0.015555292 -0.015250444 -0.014973342 -0.014725998 -0.014292136 -0.013977587 -0.013616472 -0.013277024 -0.012842804 -0.012556016 -0.01210165 -0.011620998 -0.011120826 -0.010654569 -0.010172367 -0.009666175 -0.009238362 -0.008780479 -0.008294463 -0.00784865 -0.0073472858 -0.006891668 -0.0064349473 -0.005941361 -0.005480945 -0.005061567 -0.0045672357 -0.0041055978 -0.0037442744 -0.0032287538 -0.0028080345 -0.0023492277 -0.0019266905 -0.0014811158 -0.0010456742 -6.246567E-4 -1.580715E-4 2.575219E-4 6.993413E-4 0.0010979176 0.0015836656 0.0019441544 0.0023769439 0.0027323068 0.0031911433 0.0035012064 0.0039063394 0.004318565 0.0045944154 0.0049484074 0.0052543283 0.005577028 0.0057886243 0.0061103106 0.0063207448 0.006563127 0.006764978 0.0069856048 0.0071497266 0.0072973673 0.0074490006 0.007632941 0.007694185 0.0077419575 0.007788778 0.008050144 0.007954508 0.007869422 0.007872462 0.007825166 0.007710636 0.0076994305 0.0075298846 0.007377952 0.0072785025 0.0070881546 0.0068992977 0.0066801314 0.0064517707 0.00628981 0.006007254 0.00577046 0.0055520088 0.005215198 0.004958436 0.0046985294 0.004321888 0.0040600747 0.0037483424 0.0034338537 0.0030735284 0.0027795136 0.0025216937 0.0021487773 0.0018567294 0.0015890598 0.0012942256 9.877534E-4 6.939173E-4 4.343987E-4 9.07928E-5 -1.866668E-4 -4.556328E-4 -7.289201E-4 -9.720176E-4 -0.0012626798 -0.0014412552 -0.0025702417 -0.0026468637 -0.002715245 -0.002820775 -0.003011778 -0.003119171 -0.0032952726 -0.0034880787 -0.0036600975 -0.0038001088 -0.003897644)) (quote (2.395563E-4 2.424568E-4 2.415627E-4 2.490282E-4 2.48298E-4 2.55093E-4 2.677441E-4 2.517253E-4 2.43932E-4 2.456605E-4 2.467036E-4 2.201945E-4 2.003461E-4 1.634508E-4 1.202226E-4 6.46263E-5 -8.345E-7 -2.84314E-5 -1.720488E-4 -2.646148E-4 -3.978759E-4 -5.249679E-4 -6.684363E-4 -8.401276E-4 -0.0010338724 -0.0012051612 -0.0014107674 -0.001604721 -0.0018207728 -0.0020193756 -0.0022082329 -0.00239411 -0.0025461614 -0.0027421415 -0.0029003919 -0.0030423405 -0.0032106638 -0.0033553245 -0.003505856 -0.0036678613 -0.0038017037 -0.0039442186 -0.0040783584 -0.004222214 -0.004352689 -0.004450351 -0.0045476556 -0.004674226 -0.004772693 -0.0048778653 -0.0049657826 -0.0051026344 -0.0051958263 -0.005323857 -0.0054655373 -0.0055933893 -0.005712807 -0.005824685 -0.006027162 -0.006049037 -0.0061505437 -0.0062948764 -0.006286323 -0.006400883 -0.006502062 -0.006509751 -0.0064721108 -0.0065793693 -0.0065553487 -0.006567538 -0.0065646474 -0.006545633 -0.006546974 -0.0065646768 -0.006524682 -0.0064833164 -0.0064064264 -0.006329596 -0.0062657 -0.006158471 -0.006044507 -0.0060201287 -0.005900562 -0.0057778955 -0.0056269765 -0.005506575 -0.005375445 -0.0052275658 -0.005075276 -0.0049045086 -0.0047914386 -0.004619837 -0.0044447184 -0.0042617917 -0.0040760637 -0.003925681 -0.0037704704 -0.0036028028 -0.003435254 -0.0032595396 -0.0031047464 -0.0029056073 -0.0027413369 -0.0025463105 -0.0024513603 -0.0021531582 -0.0020581484 -0.001865387 -0.0016746522 -0.0014608502 -0.0013036132 -0.0011443496 -9.91881E-4 -8.325577E-4 -6.90639E-4 -5.413294E-4 -3.824234E-4 -2.246499E-4 -6.18696E-5 1.000762E-4 2.670288E-4 4.318357E-4 6.096959E-4 7.884502E-4 9.596944E-4 0.001137197 0.0013405682 0.0015369058 0.0017341377 0.0019065738 0.0020975473 0.002291441 0.0024858713 0.0026700497 0.0028615594 0.0030367375 0.0032168033 0.0033932925 0.003347814 0.0036342144 0.0036846996 0.004171431 0.0043696165 0.0045500994 0.0047349334 0.0048760176 0.0050551295 0.0052503944 0.0053693056 0.00550282 0.0056301356 0.0057531595 0.0058867335 0.0059764385 0.006081164 0.0061893463 0.0063098073 0.0064082444 0.0064983964 0.0066403747 0.0067605674 0.0068674088 0.0069904626 0.0071122647 0.007213593 0.0073421896 0.007481128 0.007586956 0.007688224 0.007759124 0.007871807 0.0079830885 0.008081287 0.008156687 0.008243978 0.008312494 0.008363187 0.008408278 0.008470029 0.008507669 0.008244336 0.00867033 0.008662194 0.008639425 0.008656055 0.008657634 0.008630037 0.008630753 0.008613199 0.008588374 0.008553177 0.008516565 0.008483022 0.008443594 0.008382216 0.008326933 0.008279085 0.008224949 0.008166343 0.008108854 0.008052215 0.008021176 0.007949516 0.007902116 0.007858239 0.00780908 0.0077644144 0.0077351257 0.007704019 0.0076558734 0.0076432303 0.0076276655 0.007602047 0.0075840578 0.007567934 0.0075845975 0.007537335 0.007518776 0.0074899737 0.007475348 0.007443313 0.007436235 0.0074324194 0.007436344 0.007423587 0.007394901 0.007379573 0.007372346 0.007351715 0.0073190145 0.007309489 0.007276252 0.007273056 0.0072404146 0.007212683 0.0072045624 0.007171773 0.0071754456 0.0071398616 0.007115692 0.007084772 0.007023424 0.0069737584 0.006889075 0.0068397378 0.006731034 0.006607443 0.006496787 0.0063399226 0.0062052314 0.0060201883 0.0057964176 0.005567506 0.005315736 0.004974991 0.0045933724 0.004167691 0.0036929548 0.0031951368 0.002663806 0.0021030009 0.0015677512 0.0010026696 6.046891E-4 3.576E-7 -5.89341E-4 -0.0011360647 -0.0016682744 -0.0021658838 -0.002658591 -0.0031322986 -0.0036027728 -0.0040403456 -0.0044765026 -0.004755094 -0.0052699 -0.005500078 -0.006232485 -0.006628692 -0.00701046 -0.007381424 -0.007837489 -0.008194104 -0.008512497 -0.008880153 -0.009194672 -0.009447828 -0.009738311 -0.010002464 -0.010245062 -0.010443635 -0.010617979 -0.010695308 -0.010877781 -0.010999303 -0.011084758 -0.011147119 -0.011251606 -0.011368725 -0.011348969 -0.011366357 -0.011345968 -0.011384439 -0.011378162 -0.011482146 -0.011395376 -0.0113104135 -0.01114817 -0.011148915 -0.011009499 -0.010835722 -0.010615662 -0.010414436 -0.010210514 -0.009979993 -0.009729311 -0.009496927 -0.009208471 -0.0089383125 -0.008146957 -0.008538589 -0.008150786 -0.007896394 -0.007511616 -0.006733432 -0.00706622 -0.0067967177 -0.0064556003 -0.0061396063 -0.005842 -0.005541414 -0.0052693784 -0.005008936 -0.0047308207 -0.004481584 -0.0041936934 -0.003953576 -0.0036695304 -0.0034035144 -0.003174901 -0.002924085 -0.0026794672 -0.0024285913 -0.002196014 -0.002001822 -0.001931846 -0.0016453266 -0.0014535488 -0.0012577474 -0.0011136532 -0.0010895432 -8.662642E-4 -7.64221E-4 -7.291436E-4 -5.949438E-4 -5.431772E-4 -4.95106E-4 -3.276765E-4 -3.434718E-4 -1.562536E-4 -8.91984E-5 -6.11842E-5 9.33409E-5 1.418591E-4 1.074076E-4 1.736581E-4 1.82271E-4 1.973808E-4 1.489818E-4 2.728999E-4 1.885593E-4 1.575649E-4 2.28286E-5 -1.146197E-4 -1.133084E-4 -2.094805E-4 -2.893507E-4 -3.214777E-4 -3.979504E-4 -3.804266E-4 -4.397035E-4 -5.965233E-4 -5.13196E-4 -4.618764E-4 -4.906654E-4 -5.337596E-4 -4.11123E-4 -3.612936E-4 -3.542602E-4 -1.165271E-4 -2.367496E-4 8.6695E-5 2.267659E-4 4.236698E-4 5.158186E-4 6.903112E-4 0.0011465848 0.0012533964 0.0015954377 0.0019519032 0.002259344 0.0026390255 0.002945155 0.0031825304 0.0035451057 0.003974706 0.0043480396 0.004709333 0.0050759316 0.0055014193 0.0058359504 0.006277144 0.006668836 0.0070481897 0.007453144 0.007850915 0.008214802 0.008579791 0.00894849 0.009280741 0.009615451 0.009910896 0.010188252 0.010391921 0.010493711 0.01050432 0.010467067 0.01036194 0.010229632 0.010104537 0.009932883 0.009765893 0.00957904 0.009421244 0.009236053 0.009003699 0.008768953 0.008485138 0.0081688985 0.007786956 0.007408671 0.0070343986 0.006707143 0.006326371 0.0059796637 0.0056510316 0.0052971 0.0049494924 0.0046052006 0.0042639096 0.0039592516 0.0035831184 0.0032689106 0.0029514355 0.002630977 0.0023436437 0.0020978973 0.0017790384 0.001568608 0.001377944 0.0011316128 8.867122E-4 7.02057E-4 4.997551E-4 3.642775E-4 1.637153E-4 3.52971E-5 -9.99197E-5 -2.737716E-4 -3.759414E-4 -5.020798E-4 -6.160215E-4 -7.222816E-4 -8.058809E-4 -9.058416E-4 -9.833314E-4 -0.0010619984 -0.001125254 -0.0011952892 -0.0012514108 -0.0012874268 -0.0013365336 -0.0013253578 -0.0014011264 -0.0013385378 -0.0014325008 -0.0013330598 -0.0013061502 -0.0013295208 -0.001281839 -0.0013138988 -0.0012442564 -0.0012459924 -0.0012582374 -0.001184646 -0.0011947426 -0.0012129722 -0.001228124 -0.0012449204 -0.0012961618 -0.001365143 -0.0012086544 -0.0013001398 -0.0013559876 -0.001394792 -0.0014239724 -0.0015210915 -0.001509982 -0.0015433777 -0.001528593 -0.0015556556 -0.0015898896 -0.0015995466 -0.0016122806 -0.001650475 -0.0016526682 -0.0016226146 -0.0016237758 -0.0016944856 -0.001671765 -0.0015716776 -0.0015426818 -0.001565639 -0.0015456136 -0.0014225376 -0.0014598388 -0.0013341568 -0.0013742596 -0.0011942984 -0.001239732 -0.001015529 -9.619222E-4 -8.719974E-4 -8.488148E-4 -7.169917E-4 -5.552992E-4 -3.933236E-4 -1.839101E-4 -1.382865E-4 3.79086E-5 2.01568E-4 3.620461E-4 5.501732E-4 7.881224E-4 9.023362E-4 9.746514E-4 0.0011485256 0.0012975336 0.0014738552 0.001603391 0.001763463 0.0018898174 0.0019988362 0.00211766 0.0022202523 0.002358824 0.0023813732 0.0024259836 0.002406613 0.002499422 0.0026029284 0.0027269167 0.002667314 0.0026724683 0.0026822442 0.002663519 0.0027364609 0.0026517166 0.0026241178 0.002565477 0.0025444255 0.002504086 0.002472015 0.002307078 0.0022521336 0.002141202 0.0020925068 0.0019649268 0.001849357 0.001743324 0.001642801 0.0015587472 0.0014302284 0.0012158454 0.0011135303 9.349958E-4 7.715337E-4 6.122887E-4 4.506633E-4 2.898313E-4 1.161657E-4 -2.26684E-5 -2.135783E-4 -3.638342E-4 -5.278364E-4 -6.907918E-4 -8.807668E-4 -0.0010161176 -0.00114844 -0.0018686912 -0.0018986724 -0.0019290148 -0.0019735396 -0.0020663813 -0.0021154993 -0.0022564866 -0.0022883378 -0.002403665 -0.0024931785 -0.0025166145)) (quote (-2.749462E-4 -2.735257E-4 -2.336204E-4 -2.265871E-4 -2.096295E-4 -1.977682E-4 -1.852512E-4 -1.48356E-4 -1.370311E-4 -1.330674E-4 -1.397133E-4 -1.116097E-4 -1.221597E-4 -9.91523E-5 -9.31919E-5 -9.27746E-5 -1.298785E-4 -1.708865E-4 -1.43826E-4 -1.799762E-4 -1.640022E-4 -2.042949E-4 -2.955496E-4 -2.913475E-4 -3.53992E-4 -4.637241E-4 -5.513132E-4 -6.607473E-4 -7.090271E-4 -7.916987E-4 -8.816422E-4 -9.837152E-4 -0.0010699034 -0.001108706 -0.0011705458 -0.0012910664 -0.0013798775 -0.0014257134 -0.0015850366 -0.0016820432 -0.0018340348 -0.0020236373 -0.0021837056 -0.002378404 -0.0025740564 -0.00283432 -0.0030558107 -0.003275782 -0.0035791397 -0.00380975 -0.0041038096 -0.004331887 -0.004637003 -0.004823476 -0.0050729513 -0.005261451 -0.0055110455 -0.0057308674 -0.005804032 -0.0060941875 -0.006298691 -0.006418228 -0.006726712 -0.0068494976 -0.0070724194 -0.00727734 -0.007483512 -0.0076618497 -0.00787726 -0.008014262 -0.008183539 -0.008345872 -0.00854218 -0.00867793 -0.008727014 -0.008899152 -0.009097934 -0.009208798 -0.009330571 -0.009467483 -0.009603083 -0.009785652 -0.009882629 -0.009972692 -0.010079265 -0.010123014 -0.010220945 -0.010269344 -0.010314524 -0.010345876 -0.010386229 -0.010387957 -0.010407209 -0.010430038 -0.010380864 -0.010389686 -0.010383904 -0.010339975 -0.010299504 -0.010248303 -0.010200083 -0.010118246 -0.010070205 -0.010017931 -0.009900093 -0.009951949 -0.009827256 -0.009809554 -0.009799838 -0.009828627 -0.009789288 -0.009755731 -0.009721994 -0.009674966 -0.009641409 -0.009604812 -0.009546578 -0.0094893575 -0.009429157 -0.00936985 -0.009323835 -0.009260535 -0.009176254 -0.00910908 -0.009049177 -0.00899756 -0.008919597 -0.008875132 -0.008815527 -0.0087378025 -0.008656979 -0.008571029 -0.008467317 -0.008372426 -0.00825417 -0.008150339 -0.0080292225 -0.007888675 -0.007854462 -0.007702112 -0.007354736 -0.0075062514 -0.007367969 -0.0072364807 -0.007104516 -0.0069282055 -0.00681448 -0.006666422 -0.006513953 -0.0063720946 -0.006219864 -0.00605917 -0.0059047938 -0.005726576 -0.0055708885 -0.00539577 -0.005232692 -0.005058646 -0.004914999 -0.004713893 -0.0045695305 -0.004389882 -0.004229188 -0.00409019 -0.0039070845 -0.0037626028 -0.0036154983 -0.0034625528 -0.003290534 -0.0031411648 -0.0029873848 -0.0028455255 -0.0026490689 -0.0024821759 -0.0023235085 -0.002131462 -0.0019601584 -0.0017535687 -0.0015559197 -0.0013576746 -0.0010910034 -9.653568E-4 -7.199049E-4 -4.810095E-4 -2.590418E-4 -4.12464E-5 2.282858E-4 4.90427E-4 6.92606E-4 9.549856E-4 0.001210928 0.0014350414 0.0016561748 0.0019013882 0.0021330119 0.0023645165 0.0025810004 0.0027718544 0.003017068 0.0032644272 0.0034917593 0.00375247 0.004027009 0.0043199063 0.0045872927 0.004885435 0.005186081 0.005479098 0.005808592 0.0061142445 0.006438136 0.006757498 0.0070604086 0.0074203015 0.007743001 0.008022189 0.008355737 0.008712888 0.009042978 0.009387374 0.009724975 0.010053635 0.010388136 0.010716677 0.011036515 0.0114040375 0.0117201805 0.012087941 0.012428999 0.012809753 0.013159752 0.013519883 0.013866782 0.014231802 0.0145760765 0.01494199 0.015236378 0.015579581 0.015878022 0.016176939 0.016445697 0.016697884 0.016903043 0.017070353 0.017199874 0.01734835 0.017427922 0.017521918 0.017571688 0.017596066 0.017563045 0.01755637 0.017465949 0.017301023 0.017158568 0.016936958 0.016708553 0.0164662 0.016219199 0.015964807 0.0157035 0.015458167 0.015165627 0.014724375 0.014545888 0.014330149 0.01409784 0.013937325 0.013647347 0.0133630335 0.013022035 0.012636304 0.012271345 0.011919469 0.011523455 0.011125535 0.010861784 0.010236055 0.009763211 0.009368956 0.008849859 0.008416444 0.007920444 0.0074016447 0.0069067776 0.0063967705 0.0058746934 0.0053521395 0.0048187226 0.004281476 0.0037218333 0.0032393784 0.0025545508 0.0020986796 0.0016115308 0.0010948628 6.387681E-4 1.722574E-4 -3.975183E-4 -7.731766E-4 -0.0013141782 -0.0018317849 -0.0022902042 -0.002789408 -0.003144547 -0.003642708 -0.0041775257 -0.004675761 -0.0051736236 -0.0056760907 -0.0060580373 -0.0062904954 -0.0067948103 -0.006947011 -0.0074623823 -0.007718056 -0.008003563 -0.008270413 -0.008499116 -0.008388042 -0.00919798 -0.00921458 -0.009492755 -0.009576321 -0.009503037 -0.009972215 -0.009984553 -0.0100850165 -0.0101266205 -0.0101469755 -0.010235816 -0.010186434 -0.010166854 -0.010117739 -0.010033011 -0.009989858 -0.009817809 -0.009700298 -0.009583056 -0.009423494 -0.009271383 -0.009108603 -0.008942306 -0.008744299 -0.008568406 -0.008372903 -0.008112192 -0.007935703 -0.007689357 -0.0074976087 -0.0072859526 -0.0069870353 -0.0067781806 -0.0065492988 -0.0063192845 -0.006111145 -0.0058963895 -0.005554259 -0.0053310394 -0.005105555 -0.004864156 -0.0045559406 -0.0042793155 -0.0040129423 -0.0037863853 -0.0034805537 -0.003183782 -0.0028908253 -0.0026122928 -0.0022876265 -0.0019818545 -0.0017046928 -0.0013727546 -0.0010927916 -8.068085E-4 -5.382299E-4 -3.211498E-4 -1.171827E-4 7.61747E-5 2.262592E-4 4.685521E-4 5.556941E-4 6.908774E-4 7.814169E-4 9.02474E-4 0.0010155442 0.0010324718 0.0010576844 0.00119555 0.0011220574 0.0012070538 0.0011803508 0.0011590124 0.001161814 0.0011233094 0.0011446476 9.764434E-4 0.0010849238 0.0010002852 8.618236E-4 8.413792E-4 8.431078E-4 7.824898E-4 8.670688E-4 6.983876E-4 5.687475E-4 5.503297E-4 4.72188E-4 4.134774E-4 3.799796E-4 4.56512E-4 2.319217E-4 2.296567E-4 3.312826E-4 2.59161E-4 2.394915E-4 2.543926E-4 1.015067E-4 2.490878E-4 2.270341E-4 2.855062E-4 5.85318E-5 1.934767E-4 7.64728E-5 8.83341E-5 1.884103E-4 1.802444E-4 2.014637E-4 9.81688E-5 2.728701E-4 3.379583E-4 3.837943E-4 3.609061E-4 6.107688E-4 7.233621E-4 8.398294E-4 9.940268E-4 0.001220584 0.0014272332 0.001583755 0.0019024015 0.0021823049 0.002590418 0.0027463436 0.0030776263 0.0033395887 0.00369066 0.003993809 0.004285753 0.004557848 0.004983783 0.005139947 0.0054107905 0.0057379008 0.005973339 0.006210685 0.006530583 0.006612122 0.0068402286 0.007097482 0.0072396994 0.007268667 0.007480741 0.007493973 0.0076518655 0.0076184874 0.0077555776 0.0077441335 0.007642925 0.0076341634 0.0075106626 0.0073772674 0.00722003 0.0070309346 0.0068523586 0.006597519 0.006380409 0.006111294 0.0058191717 0.0055555105 0.0052561164 0.0049414337 0.004598975 0.0043503046 0.00405249 0.0037451384 0.0034097433 0.0031517446 0.0028909445 0.0026558042 0.0024518373 0.0021679995 0.0018636584 0.0016382636 0.0014460982 0.0011991263 9.802282E-4 7.531643E-4 5.469024E-4 3.349781E-4 2.255142E-4 -1.2061E-4 -2.530217E-4 -3.829002E-4 -4.847944E-4 -5.819499E-4 -5.963148E-4 -6.885231E-4 -8.235276E-4 -8.891822E-4 -8.917154E-4 -9.497404E-4 -9.475648E-4 -9.239614E-4 -8.820892E-4 -8.958578E-4 -8.479358E-4 -8.121729E-4 -7.313788E-4 -7.194281E-4 -7.520914E-4 -6.552339E-4 -5.90533E-4 -4.424751E-4 -4.07666E-4 -2.839565E-4 -3.018975E-4 -1.668334E-4 -1.420975E-4 2.46465E-5 4.00245E-5 1.075268E-4 2.088547E-4 3.486574E-4 3.800392E-4 4.805923E-4 5.488694E-4 5.20885E-4 6.689727E-4 7.081032E-4 7.870495E-4 8.134246E-4 8.45939E-4 8.473098E-4 8.504094E-4 9.399354E-4 9.655654E-4 9.619594E-4 9.392202E-4 9.408892E-4 9.083748E-4 8.952022E-4 8.706748E-4 8.492172E-4 7.98732E-4 7.565618E-4 7.517338E-4 7.84427E-4 7.460117E-4 6.274879E-4 6.037354E-4 4.799366E-4 4.189014E-4 3.739297E-4 2.98053E-4 2.447367E-4 1.569986E-4 1.477897E-4 1.116991E-4 -1.1623E-6 -3.94285E-5 -7.53105E-5 -2.022982E-4 -1.828671E-4 -1.684725E-4 -2.1258E-4 -2.092719E-4 -2.600253E-4 -2.575815E-4 -2.266765E-4 -2.266765E-4 -2.46495E-4 -2.131462E-4 -2.146661E-4 -1.873374E-4 -1.809597E-4 -2.184212E-4 -1.692474E-4 -1.690388E-4 -1.620054E-4 -1.707375E-4 -1.389682E-4 -1.443923E-4 -1.320243E-4 -1.08093E-4 -1.356602E-4 -1.191795E-4 -1.125634E-4 -8.44598E-5 -6.32107E-5 -7.75456E-5 -7.1764E-5 -6.62208E-5 -2.57492E-5 -1.36793E-5 -3.23355E-5 -2.93553E-5 -7.20322E-5 -6.97076E-5 -6.67577E-5)) (quotequote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list -2.749462E-4 -2.735257E-4 -2.336204E-4 -2.265871E-4 -2.096295E-4 -1.977682E-4 -1.852512E-4 -1.48356E-4 -1.370311E-4 -1.330674E-4 -1.397133E-4 -1.116097E-4 -1.221597E-4 -9.91523E-5 -9.31919E-5 -9.27746E-5 -1.298785E-4 -1.708865E-4 -1.43826E-4 -1.799762E-4 -1.640022E-4 -2.042949E-4 -2.955496E-4 -2.913475E-4 -3.53992E-4 -4.637241E-4 -5.513132E-4 -6.607473E-4 -7.090271E-4 -7.916987E-4 -8.816422E-4 -9.837152E-4 -0.0010699034 -0.001108706 -0.0011705458 -0.0012910664 -0.0013798775 -0.0014257134 -0.0015850366 -0.0016820432 -0.0018340348 -0.0020236373 -0.0021837056 -0.002378404 -0.0025740564 -0.00283432 -0.0030558107 -0.003275782 -0.0035791397 -0.00380975 -0.0041038096 -0.004331887 -0.004637003 -0.004823476 -0.0050729513 -0.005261451 -0.0055110455 -0.0057308674 -0.005804032 -0.0060941875 -0.006298691 -0.006418228 -0.006726712 -0.0068494976 -0.0070724194 -0.00727734 -0.007483512 -0.0076618497 -0.00787726 -0.008014262 -0.008183539 -0.008345872 -0.00854218 -0.00867793 -0.008727014 -0.008899152 -0.009097934 -0.009208798 -0.009330571 -0.009467483 -0.009603083 -0.009785652 -0.009882629 -0.009972692 -0.010079265 -0.010123014 -0.010220945 -0.010269344 -0.010314524 -0.010345876 -0.010386229 -0.010387957 -0.010407209 -0.010430038 -0.010380864 -0.010389686 -0.010383904 -0.010339975 -0.010299504 -0.010248303 -0.010200083 -0.010118246 -0.010070205 -0.010017931 -0.009900093 -0.009951949 -0.009827256 -0.009809554 -0.009799838 -0.009828627 -0.009789288 -0.009755731 -0.009721994 -0.009674966 -0.009641409 -0.009604812 -0.009546578 -0.0094893575 -0.009429157 -0.00936985 -0.009323835 -0.009260535 -0.009176254 -0.00910908 -0.009049177 -0.00899756 -0.008919597 -0.008875132 -0.008815527 -0.0087378025 -0.008656979 -0.008571029 -0.008467317 -0.008372426 -0.00825417 -0.008150339 -0.0080292225 -0.007888675 -0.007854462 -0.007702112 -0.007354736 -0.0075062514 -0.007367969 -0.0072364807 -0.007104516 -0.0069282055 -0.00681448 -0.006666422 -0.006513953 -0.0063720946 -0.006219864 -0.00605917 -0.0059047938 -0.005726576 -0.0055708885 -0.00539577 -0.005232692 -0.005058646 -0.004914999 -0.004713893 -0.0045695305 -0.004389882 -0.004229188 -0.00409019 -0.0039070845 -0.0037626028 -0.0036154983 -0.0034625528 -0.003290534 -0.0031411648 -0.0029873848 -0.0028455255 -0.0026490689 -0.0024821759 -0.0023235085 -0.002131462 -0.0019601584 -0.0017535687 -0.0015559197 -0.0013576746 -0.0010910034 -9.653568E-4 -7.199049E-4 -4.810095E-4 -2.590418E-4 -4.12464E-5 2.282858E-4 4.90427E-4 6.92606E-4 9.549856E-4 0.001210928 0.0014350414 0.0016561748 0.0019013882 0.0021330119 0.0023645165 0.0025810004 0.0027718544 0.003017068 0.0032644272 0.0034917593 0.00375247 0.004027009 0.0043199063 0.0045872927 0.004885435 0.005186081 0.005479098 0.005808592 0.0061142445 0.006438136 0.006757498 0.0070604086 0.0074203015 0.007743001 0.008022189 0.008355737 0.008712888 0.009042978 0.009387374 0.009724975 0.010053635 0.010388136 0.010716677 0.011036515 0.0114040375 0.0117201805 0.012087941 0.012428999 0.012809753 0.013159752 0.013519883 0.013866782 0.014231802 0.0145760765 0.01494199 0.015236378 0.015579581 0.015878022 0.016176939 0.016445697 0.016697884 0.016903043 0.017070353 0.017199874 0.01734835 0.017427922 0.017521918 0.017571688 0.017596066 0.017563045 0.01755637 0.017465949 0.017301023 0.017158568 0.016936958 0.016708553 0.0164662 0.016219199 0.015964807 0.0157035 0.015458167 0.015165627 0.014724375 0.014545888 0.014330149 0.01409784 0.013937325 0.013647347 0.0133630335 0.013022035 0.012636304 0.012271345 0.011919469 0.011523455 0.011125535 0.010861784 0.010236055 0.009763211 0.009368956 0.008849859 0.008416444 0.007920444 0.0074016447 0.0069067776 0.0063967705 0.0058746934 0.0053521395 0.0048187226 0.004281476 0.0037218333 0.0032393784 0.0025545508 0.0020986796 0.0016115308 0.0010948628 6.387681E-4 1.722574E-4 -3.975183E-4 -7.731766E-4 -0.0013141782 -0.0018317849 -0.0022902042 -0.002789408 -0.003144547 -0.003642708 -0.0041775257 -0.004675761 -0.0051736236 -0.0056760907 -0.0060580373 -0.0062904954 -0.0067948103 -0.006947011 -0.0074623823 -0.007718056 -0.008003563 -0.008270413 -0.008499116 -0.008388042 -0.00919798 -0.00921458 -0.009492755 -0.009576321 -0.009503037 -0.009972215 -0.009984553 -0.0100850165 -0.0101266205 -0.0101469755 -0.010235816 -0.010186434 -0.010166854 -0.010117739 -0.010033011 -0.009989858 -0.009817809 -0.009700298 -0.009583056 -0.009423494 -0.009271383 -0.009108603 -0.008942306 -0.008744299 -0.008568406 -0.008372903 -0.008112192 -0.007935703 -0.007689357 -0.0074976087 -0.0072859526 -0.0069870353 -0.0067781806 -0.0065492988 -0.0063192845 -0.006111145 -0.0058963895 -0.005554259 -0.0053310394 -0.005105555 -0.004864156 -0.0045559406 -0.0042793155 -0.0040129423 -0.0037863853 -0.0034805537 -0.003183782 -0.0028908253 -0.0026122928 -0.0022876265 -0.0019818545 -0.0017046928 -0.0013727546 -0.0010927916 -8.068085E-4 -5.382299E-4 -3.211498E-4 -1.171827E-4 7.61747E-5 2.262592E-4 4.685521E-4 5.556941E-4 6.908774E-4 7.814169E-4 9.02474E-4 0.0010155442 0.0010324718 0.0010576844 0.00119555 0.0011220574 0.0012070538 0.0011803508 0.0011590124 0.001161814 0.0011233094 0.0011446476 9.764434E-4 0.0010849238 0.0010002852 8.618236E-4 8.413792E-4 8.431078E-4 7.824898E-4 8.670688E-4 6.983876E-4 5.687475E-4 5.503297E-4 4.72188E-4 4.134774E-4 3.799796E-4 4.56512E-4 2.319217E-4 2.296567E-4 3.312826E-4 2.59161E-4 2.394915E-4 2.543926E-4 1.015067E-4 2.490878E-4 2.270341E-4 2.855062E-4 5.85318E-5 1.934767E-4 7.64728E-5 8.83341E-5 1.884103E-4 1.802444E-4 2.014637E-4 9.81688E-5 2.728701E-4 3.379583E-4 3.837943E-4 3.609061E-4 6.107688E-4 7.233621E-4 8.398294E-4 9.940268E-4 0.001220584 0.0014272332 0.001583755 0.0019024015 0.0021823049 0.002590418 0.0027463436 0.0030776263 0.0033395887 0.00369066 0.003993809 0.004285753 0.004557848 0.004983783 0.005139947 0.0054107905 0.0057379008 0.005973339 0.006210685 0.006530583 0.006612122 0.0068402286 0.007097482 0.0072396994 0.007268667 0.007480741 0.007493973 0.0076518655 0.0076184874 0.0077555776 0.0077441335 0.007642925 0.0076341634 0.0075106626 0.0073772674 0.00722003 0.0070309346 0.0068523586 0.006597519 0.006380409 0.006111294 0.0058191717 0.0055555105 0.0052561164 0.0049414337 0.004598975 0.0043503046 0.00405249 0.0037451384 0.0034097433 0.0031517446 0.0028909445 0.0026558042 0.0024518373 0.0021679995 0.0018636584 0.0016382636 0.0014460982 0.0011991263 9.802282E-4 7.531643E-4 5.469024E-4 3.349781E-4 2.255142E-4 -1.2061E-4 -2.530217E-4 -3.829002E-4 -4.847944E-4 -5.819499E-4 -5.963148E-4 -6.885231E-4 -8.235276E-4 -8.891822E-4 -8.917154E-4 -9.497404E-4 -9.475648E-4 -9.239614E-4 -8.820892E-4 -8.958578E-4 -8.479358E-4 -8.121729E-4 -7.313788E-4 -7.194281E-4 -7.520914E-4 -6.552339E-4 -5.90533E-4 -4.424751E-4 -4.07666E-4 -2.839565E-4 -3.018975E-4 -1.668334E-4 -1.420975E-4 2.46465E-5 4.00245E-5 1.075268E-4 2.088547E-4 3.486574E-4 3.800392E-4 4.805923E-4 5.488694E-4 5.20885E-4 6.689727E-4 7.081032E-4 7.870495E-4 8.134246E-4 8.45939E-4 8.473098E-4 8.504094E-4 9.399354E-4 9.655654E-4 9.619594E-4 9.392202E-4 9.408892E-4 9.083748E-4 8.952022E-4 8.706748E-4 8.492172E-4 7.98732E-4 7.565618E-4 7.517338E-4 7.84427E-4 7.460117E-4 6.274879E-4 6.037354E-4 4.799366E-4 4.189014E-4 3.739297E-4 2.98053E-4 2.447367E-4 1.569986E-4 1.477897E-4 1.116991E-4 -1.1623E-6 -3.94285E-5 -7.53105E-5 -2.022982E-4 -1.828671E-4 -1.684725E-4 -2.1258E-4 -2.092719E-4 -2.600253E-4 -2.575815E-4 -2.266765E-4 -2.266765E-4 -2.46495E-4 -2.131462E-4 -2.146661E-4 -1.873374E-4 -1.809597E-4 -2.184212E-4 -1.692474E-4 -1.690388E-4 -1.620054E-4 -1.707375E-4 -1.389682E-4 -1.443923E-4 -1.320243E-4 -1.08093E-4 -1.356602E-4 -1.191795E-4 -1.125634E-4 -8.44598E-5 -6.32107E-5 -7.75456E-5 -7.1764E-5 -6.62208E-5 -2.57492E-5 -1.36793E-5 -3.23355E-5 -2.93553E-5 -7.20322E-5 -6.97076E-5 -6.67577E-5))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.003897644 -0.00399521 -0.0041259676 -0.0042557568 -0.0043956936 -0.004541382 -0.004653156 -0.0047608763 -0.004748866 -0.0048535615 -0.0048956573 -0.0049450845 -0.004969761 -0.004964024 -0.004982561 -0.004925072 -0.00481987 -0.004811108 -0.004708588 -0.0047511454 -0.0044890046 -0.004501254 -0.00420624 -0.004288703 -0.0039245784 -0.0039429367 -0.0037309227 -0.0033896563 -0.0033649209 -0.0031185747 -0.002891332 -0.0026920736 -0.0024573505 -0.0022096038 -0.0019759834 -0.0017414688 -0.00152722 -0.0012845696 -0.0010774136 -8.081198E-4 -5.399287E-4 -2.97755E-4 -7.26879E-5 1.539886E-4 2.92927E-4 6.302893E-4 8.730888E-4 0.0011162758 0.0012793244 0.0015207828 0.001744032 0.0020053685 0.0021618905 0.002391696 0.0025775137 0.0028398335 0.0029886365 0.003169477 0.0033361316 0.0034816265 0.0036446152 0.003733575 0.0038897097 0.0040504933 0.0041470826 0.004375726 0.004234582 0.004542172 0.0044900775 0.0044477284 0.004613161 0.004676074 0.004674047 0.004712671 0.0046994835 0.004739493 0.0047705025 0.0047528 0.004685074 0.004664585 0.004648164 0.004609078 0.0045982897 0.004472226 0.0043902695 0.0043383837 0.0042762906 0.004133925 0.0040324927 0.0039227754 0.0038367513 0.0037117896 0.00355874 0.003456682 0.003309518 0.0031844378 0.003084734 0.0029358717 0.0028013736 0.0027027727 0.0025599897 0.0024241358 0.0023236873 0.0021733793 0.0020611436 0.0019199996 0.001811415 0.0017765462 0.0016215296 0.0015127808 0.0014414638 0.0013688058 0.0013908596 0.0012423322 0.001234457 0.001149781 0.0011478514 0.0010749624 0.0010468066 0.0010213406 0.0010046738 9.945184E-4 9.895042E-4 9.654016E-4 9.896682E-4 9.90659E-4 9.934008E-4 0.0010083766 9.802806E-4 0.0010579228 0.0010538102 0.0010637642 0.00105571 0.001086913 0.0011534394 0.0011124612 0.0011619554 0.0011595414 0.001210794 0.0012354256 0.0012542532 0.0012449846 0.0012683272 0.0012492612 0.0012938456 0.001384832 0.0013281704 0.0013616756 0.0013909713 0.0014211014 0.0014836342 0.0014685914 0.0015347974 0.001453206 0.0014879556 0.001538448 0.001563102 0.0015693829 0.0015942752 0.001591444 0.0016371086 0.0016613156 0.0017582402 0.001731433 0.0017613844 0.0017810016 0.0017940104 0.001860749 0.0018349886 0.0018517152 0.00189602 0.001902826 0.0019666963 0.0019360072 0.0019517392 0.0019684546 0.0019810163 0.0019983724 0.0020063927 0.0020115935 0.0019827579 0.0019994157 0.0019703526 0.002009444 0.0019943044 0.002009999 0.0019779606 0.001965206 0.001946588 0.001934098 0.0019175712 0.001902573 0.001890631 0.001877308 0.0018750626 0.0018644916 0.0018809933 0.0018528584 0.001835242 0.0018388276 0.0018286808 0.001804417 0.001814587 0.0018051434 0.0017927344 0.0018096232 0.0018077418 0.0018479509 0.001851324 0.0018766968 0.0018976108 0.0019144714 0.0019344539 0.0019503796 0.0019594503 0.0019636043 0.001967255 0.0019706972 0.0019605048 0.001962375 0.0019486024 0.001965709 0.001952 0.0019448513 0.00194069 0.0019370356 0.0019307546 0.0018991456 0.001884736 0.0018777698 0.0018580185 0.0018327162 0.0018175097 0.001808554 0.0017857552 0.0017784908 0.0017667712 0.00175602 0.0017525108 0.0017390772 0.0017367676 0.001731798 0.0017343612 0.0017351508 0.0017360076 0.001731828 0.0017232968 0.0017220305 0.0017259643 0.0017161073 0.001699537 0.001700878 0.0016776696 0.0016555414 0.0016369522 0.0016153082 0.001605399 0.0015934558 0.0015691222 0.0015674606 0.0015421212 0.0015255886 0.001521863 0.0015164018 0.001494527 0.0015008302 0.0014744402 0.0014688672 0.0014669898)) (quote (-0.0025166145 -0.0025400576 -0.002611436 -0.0026267013 -0.002728615 -0.0027447485 -0.0027922085 -0.002835136 -0.002837901 -0.0028430857 -0.0028657492 -0.0028611105 -0.0028948668 -0.0028002083 -0.0028653543 -0.0028432366 -0.002718622 -0.0027968583 -0.002701316 -0.0025161223 -0.0026555918 -0.0023785755 -0.0025029853 -0.0023965463 -0.0024820045 -0.002251126 -0.002198137 -0.002257973 -0.002000872 -0.0019102396 -0.001807466 -0.0018304252 -0.0017022268 -0.0016947648 -0.0016031154 -0.0015089028 -0.0014131666 -0.0013233126 -0.0012454912 -0.0011811778 -0.0010514334 -9.566844E-4 -9.029582E-4 -8.113608E-4 -5.536079E-4 -7.182136E-4 -5.420893E-4 -4.899949E-4 -3.911257E-4 -2.474859E-4 -2.272725E-4 -1.142919E-4 -3.88697E-5 1.098514E-4 1.358911E-4 3.063083E-4 3.365949E-4 4.223585E-4 5.058424E-4 5.794168E-4 6.496832E-4 7.280335E-4 8.143261E-4 9.819568E-4 0.0010435656 9.046496E-4 0.0011272506 0.0011611134 0.0011545272 0.001399763 0.0012726188 0.0014063232 0.0013918058 0.0015118384 0.0014929178 0.001514908 0.0016236156 0.0015375614 0.0015783496 0.0015004614 0.0015421398 0.0014363118 0.0014148988 0.0013607778 0.001322981 0.0012344384 0.0012039096 0.0011003354 0.0010319018 9.459556E-4 8.904376E-4 7.923841E-4 6.61891E-4 6.069578E-4 4.821047E-4 4.042126E-4 3.216714E-4 1.912881E-4 1.170356E-4 5.03622E-5 -7.41072E-5 -1.662187E-4 -2.49533E-4 -3.403705E-4 -3.943034E-4 -4.880354E-4 -5.728379E-4 -6.376877E-4 -7.441491E-4 -7.93878E-4 -8.554646E-4 -9.242222E-4 -0.0010100604 -0.0010188186 -0.001101058 -0.0011234135 -0.0011931622 -0.0011978076 -0.0012516342 -0.0012840816 -0.0012754314 -0.001311973 -0.001320001 -0.0013358444 -0.0013114996 -0.0013438352 -0.001329139 -0.0013196358 -0.0013257974 -0.0012709014 -0.0012895912 -0.001258906 -0.0012692586 -0.0012414306 -0.0012034328 -0.0012013614 -0.0011664108 -0.001143776 -0.0011375026 -0.0010987 -0.0011079386 -0.0010672958 -0.0010384248 -0.001009196 -9.933264E-4 -9.694696E-4 -9.395034E-4 -9.190218E-4 -8.872078E-4 -8.745418E-4 -8.316785E-4 -7.985011E-4 -7.748529E-4 -7.508993E-4 -7.202402E-4 -6.854832E-4 -6.555617E-4 -6.71722E-4 -6.180406E-4 -5.70789E-4 -5.286783E-4 -4.941151E-4 -4.593581E-4 -4.350767E-4 -3.90932E-4 -3.5166E-4 -3.350228E-4 -3.167912E-4 -2.869219E-4 -2.497509E-4 -2.239868E-4 -1.91696E-4 -1.58675E-4 -1.396686E-4 -1.090318E-4 -9.0003E-5 -6.11544E-5 -3.14713E-5 -1.50725E-5 2.23368E-5 2.91392E-5 6.37695E-5 6.74948E-5 1.069084E-4 1.195818E-4 1.267046E-4 1.512095E-4 1.791492E-4 1.868606E-4 2.044663E-4 2.313778E-4 2.536476E-4 2.654046E-4 2.858862E-4 2.870932E-4 3.211349E-4 3.501177E-4 3.688559E-4 3.813356E-4 4.124567E-4 4.426837E-4 4.511476E-4 4.774705E-4 5.117134E-4 5.388334E-4 5.998462E-4 6.538332E-4 7.057562E-4 7.416457E-4 8.012056E-4 8.610786E-4 8.964688E-4 9.401888E-4 9.99108E-4 0.0010353626 0.0010959954 0.0011225642 0.001156725 0.0011769682 0.0012089388 0.0012428686 0.0012572558 0.0012885928 0.0013075322 0.0013220832 0.0013328494 0.0013328642 0.001337979 0.0013398714 0.0013476462 0.001352191 0.0013744608 0.0013715252 0.001375813 0.0013824552 0.0013947338 0.0014097728 0.001425922 0.001443699 0.0014601016 0.0014817716 0.0014760868 0.0014715642 0.0014751516 0.0014821478 0.0014688186 0.0014566184 0.0014386104 0.0014133158 0.00139964 0.0013640282 0.0013318304 0.0013112724 0.0012905244 0.0012433752 0.0012120418 0.0012090802 0.0011630114 0.0011134913 0.0010826942 0.0010399354 9.998716E-4 9.576576E-4 9.217152E-4 8.851458E-4 8.438352E-4 8.119475E-4 7.850733E-4 7.657718E-4)) (quote (-6.67577E-5 -6.38068E-5 -5.67436E-5 -3.49283E-5 -6.25253E-5 -8.05557E-5 -7.68304E-5 -8.10921E-5 -7.82907E-5 -1.242757E-4 -1.578033E-4 -1.469851E-4 -2.019405E-4 -2.559423E-4 -2.67446E-4 -2.773106E-4 -3.008842E-4 -3.359616E-4 -3.027916E-4 -5.195141E-4 -3.469884E-4 -5.679429E-4 -4.013181E-4 -5.628169E-4 -3.857017E-4 -6.140172E-4 -5.868971E-4 -3.964603E-4 -6.290376E-4 -5.887151E-4 -6.211102E-4 -5.840361E-4 -5.860925E-4 -5.401075E-4 -5.355477E-4 -5.628765E-4 -5.43803E-4 -5.350113E-4 -5.185306E-4 -4.868507E-4 -4.496872E-4 -4.339516E-4 -4.084706E-4 -3.685057E-4 -3.188848E-4 -3.335178E-4 -3.339648E-4 -2.613962E-4 -2.458692E-4 -2.420843E-4 -1.663268E-4 -1.554787E-4 -1.133978E-4 -1.237392E-4 -8.20458E-5 -4.76539E-5 -5.3048E-6 3.9637E-6 1.0401E-5 5.80251E-5 3.46899E-5 1.96695E-5 6.20782E-5 7.28369E-5 3.26335E-5 2.72125E-4 4.05908E-5 1.598895E-4 1.77294E-4 -2.39015E-5 1.196861E-4 4.81904E-5 3.52263E-5 -5.51343E-5 -1.7792E-5 -1.019239E-4 -2.052486E-4 -1.641512E-4 -2.955794E-4 -2.478361E-4 -3.948808E-4 -3.92735E-4 -4.330575E-4 -5.713403E-4 -5.835295E-4 -6.180406E-4 -6.773174E-4 -7.563531E-4 -8.078814E-4 -8.478166E-4 -8.80152E-4 -9.498298E-4 -0.0010351838 -0.0010593534 -0.001128018 -0.0011621714 -0.0012227 -0.0012828112 -0.0013322234 -0.0013636948 -0.0014600754 -0.001452744 -0.001523614 -0.0015641154 -0.0015834868 -0.0016559362 -0.0016977788 -0.0017211436 -0.0018003284 -0.0018258096 -0.0018374622 -0.0019158124 -0.0019150674 -0.0020480156 -0.0020406545 -0.002152383 -0.0021573305 -0.0022105277 -0.0022734106 -0.0023092032 -0.0023430288 -0.002409786 -0.0024253428 -0.002466321 -0.002506107 -0.0025431812 -0.00255242 -0.0025842488 -0.0026435554 -0.0025835336 -0.0026090443 -0.002622068 -0.0026594997 -0.0026609302 -0.002624571 -0.0026516915 -0.0026561618 -0.002595961 -0.0026439429 -0.0026004315 -0.0026080609 -0.0026168228 -0.0025694967 -0.0027059317 -0.0026428104 -0.0025197268 -0.002628088 -0.0026020408 -0.002579391 -0.002563059 -0.0024659038 -0.0024659634 -0.002507031 -0.002602756 -0.0025845766 -0.0025835035 -0.0025454164 -0.0024847389 -0.0025115013 -0.002642095 -0.0025969148 -0.002607584 -0.0024892688 -0.0026154518 -0.0026504395 -0.00263834 -0.002650499 -0.0025247336 -0.002687812 -0.002690196 -0.0027015207 -0.0026933553 -0.0026260019 -0.0027723313 -0.0027968884 -0.0027669669 -0.0028178096 -0.0028256178 -0.0028026104 -0.0028392077 -0.0028316977 -0.0028658507 -0.0028015375 -0.0028768182 -0.0028632284 -0.0029130578 -0.0028776527 -0.0028364659 -0.0028319955 -0.0027922392 -0.0027817488 -0.002775431 -0.002750218 -0.0027412176 -0.0027047992 -0.0026905537 -0.0026362539 -0.0026554463 -0.002620399 -0.0025889874 -0.0025792122 -0.002543211 -0.0025132299 -0.002511263 -0.0025237205 -0.0025051236 -0.0025205613 -0.0025047064 -0.002518535 -0.0025002957 -0.0024926663 -0.0024942756 -0.002467394 -0.0024487973 -0.0024332404 -0.0024263265 -0.002390027 -0.002375424 -0.0023177863 -0.0022907853 -0.0022857783 -0.0022064448 -0.0021908284 -0.0021395088 -0.0021055937 -0.0020371676 -0.0019681454 -0.0019567609 -0.0018900036 -0.001830101 -0.001756072 -0.0017319322 -0.0016728044 -0.001621604 -0.0015228988 -0.0014990568 -0.001439631 -0.001389742 -0.001347959 -0.0012984872 -0.001263857 -0.0012414458 -0.0012155176 -0.0012017489 -0.0011937022 -0.0012099148 -0.0012074114 -0.0012429954 -0.0012774468 -0.0013094544 -0.0013441444 -0.0013915896 -0.0014459492 -0.0014969708 -0.0015345216 -0.0015957952 -0.0016246438 -0.001682818 -0.0017768144 -0.0018362404 -0.0018864274 -0.001984656 -0.0020397902 -0.0021346212 -0.002233088 -0.002254665 -0.0023465753 -0.0024468305 -0.0024796573)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list -6.67577E-5 -6.38068E-5 -5.67436E-5 -3.49283E-5 -6.25253E-5 -8.05557E-5 -7.68304E-5 -8.10921E-5 -7.82907E-5 -1.242757E-4 -1.578033E-4 -1.469851E-4 -2.019405E-4 -2.559423E-4 -2.67446E-4 -2.773106E-4 -3.008842E-4 -3.359616E-4 -3.027916E-4 -5.195141E-4 -3.469884E-4 -5.679429E-4 -4.013181E-4 -5.628169E-4 -3.857017E-4 -6.140172E-4 -5.868971E-4 -3.964603E-4 -6.290376E-4 -5.887151E-4 -6.211102E-4 -5.840361E-4 -5.860925E-4 -5.401075E-4 -5.355477E-4 -5.628765E-4 -5.43803E-4 -5.350113E-4 -5.185306E-4 -4.868507E-4 -4.496872E-4 -4.339516E-4 -4.084706E-4 -3.685057E-4 -3.188848E-4 -3.335178E-4 -3.339648E-4 -2.613962E-4 -2.458692E-4 -2.420843E-4 -1.663268E-4 -1.554787E-4 -1.133978E-4 -1.237392E-4 -8.20458E-5 -4.76539E-5 -5.3048E-6 3.9637E-6 1.0401E-5 5.80251E-5 3.46899E-5 1.96695E-5 6.20782E-5 7.28369E-5 3.26335E-5 2.72125E-4 4.05908E-5 1.598895E-4 1.77294E-4 -2.39015E-5 1.196861E-4 4.81904E-5 3.52263E-5 -5.51343E-5 -1.7792E-5 -1.019239E-4 -2.052486E-4 -1.641512E-4 -2.955794E-4 -2.478361E-4 -3.948808E-4 -3.92735E-4 -4.330575E-4 -5.713403E-4 -5.835295E-4 -6.180406E-4 -6.773174E-4 -7.563531E-4 -8.078814E-4 -8.478166E-4 -8.80152E-4 -9.498298E-4 -0.0010351838 -0.0010593534 -0.001128018 -0.0011621714 -0.0012227 -0.0012828112 -0.0013322234 -0.0013636948 -0.0014600754 -0.001452744 -0.001523614 -0.0015641154 -0.0015834868 -0.0016559362 -0.0016977788 -0.0017211436 -0.0018003284 -0.0018258096 -0.0018374622 -0.0019158124 -0.0019150674 -0.0020480156 -0.0020406545 -0.002152383 -0.0021573305 -0.0022105277 -0.0022734106 -0.0023092032 -0.0023430288 -0.002409786 -0.0024253428 -0.002466321 -0.002506107 -0.0025431812 -0.00255242 -0.0025842488 -0.0026435554 -0.0025835336 -0.0026090443 -0.002622068 -0.0026594997 -0.0026609302 -0.002624571 -0.0026516915 -0.0026561618 -0.002595961 -0.0026439429 -0.0026004315 -0.0026080609 -0.0026168228 -0.0025694967 -0.0027059317 -0.0026428104 -0.0025197268 -0.002628088 -0.0026020408 -0.002579391 -0.002563059 -0.0024659038 -0.0024659634 -0.002507031 -0.002602756 -0.0025845766 -0.0025835035 -0.0025454164 -0.0024847389 -0.0025115013 -0.002642095 -0.0025969148 -0.002607584 -0.0024892688 -0.0026154518 -0.0026504395 -0.00263834 -0.002650499 -0.0025247336 -0.002687812 -0.002690196 -0.0027015207 -0.0026933553 -0.0026260019 -0.0027723313 -0.0027968884 -0.0027669669 -0.0028178096 -0.0028256178 -0.0028026104 -0.0028392077 -0.0028316977 -0.0028658507 -0.0028015375 -0.0028768182 -0.0028632284 -0.0029130578 -0.0028776527 -0.0028364659 -0.0028319955 -0.0027922392 -0.0027817488 -0.002775431 -0.002750218 -0.0027412176 -0.0027047992 -0.0026905537 -0.0026362539 -0.0026554463 -0.002620399 -0.0025889874 -0.0025792122 -0.002543211 -0.0025132299 -0.002511263 -0.0025237205 -0.0025051236 -0.0025205613 -0.0025047064 -0.002518535 -0.0025002957 -0.0024926663 -0.0024942756 -0.002467394 -0.0024487973 -0.0024332404 -0.0024263265 -0.002390027 -0.002375424 -0.0023177863 -0.0022907853 -0.0022857783 -0.0022064448 -0.0021908284 -0.0021395088 -0.0021055937 -0.0020371676 -0.0019681454 -0.0019567609 -0.0018900036 -0.001830101 -0.001756072 -0.0017319322 -0.0016728044 -0.001621604 -0.0015228988 -0.0014990568 -0.001439631 -0.001389742 -0.001347959 -0.0012984872 -0.001263857 -0.0012414458 -0.0012155176 -0.0012017489 -0.0011937022 -0.0012099148 -0.0012074114 -0.0012429954 -0.0012774468 -0.0013094544 -0.0013441444 -0.0013915896 -0.0014459492 -0.0014969708 -0.0015345216 -0.0015957952 -0.0016246438 -0.001682818 -0.0017768144 -0.0018362404 -0.0018864274 -0.001984656 -0.0020397902 -0.0021346212 -0.002233088 -0.002254665 -0.0023465753 -0.0024468305 -0.0024796573))) newobj))) (list "XVEA" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46599996 0.47400004 0.478 0.484 0.488 0.494 0.49799997 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.87399996 0.87399996 0.88400007 0.888 0.89400006 0.898 0.904 0.90799994 0.9110001 0.91800005 0.924 0.928 0.934 0.93799997 0.944 0.956 0.956 0.958 0.9639999 0.968 0.97400004 0.978 0.984 0.988 0.99399996 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.7240001 1.728 1.734 1.7379999 1.744 1.7479999 1.754 1.7579999 1.7640002 1.7680001 1.7740002 1.7780001 1.7840002 1.7880001 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.8380002 1.844 1.848 1.854 1.858 1.8639999 1.868 1.8739998 1.878 1.8839998 1.888 1.892 1.898 1.904 1.908 1.9139999 1.9179999 1.9239999 1.9279999 1.9339999 1.9379999 1.9440001 1.9480001 1.9540001 1.9580001 1.962 1.968 1.974 1.9779999 1.984 1.9869999)) (quote (0.021311904 0.021867516 0.022786862 0.023717167 0.024775785 0.025962452 0.02735437 0.028587988 0.0300492 0.03168143 0.03340885 0.03532053 0.037271005 0.039531526 0.041812793 0.04407519 0.046500605 0.049238168 0.05182926 0.054129716 0.05597327 0.05848998 0.060727656 0.062532686 0.06432821 0.06592739 0.065626234 0.06818358 0.069883354 0.06901018 0.0697901 0.07076424 0.0706773 0.07083941 0.071505 0.07173509 0.07085581 0.07087578 0.071115084 0.07052192 0.06968557 0.06920301 0.06792382 0.06679746 0.0654668 0.064034865 0.06245552 0.06102588 0.05919465 0.058261413 0.057457816 0.05685517 0.056452763 0.056536507 0.056978945 0.057598792 0.05864369 0.060299553 0.062263944 0.06468281 0.06767755 0.070951335 0.07480921 0.07894472 0.08358799 0.08858708 0.094441056 0.09998197 0.10603134 0.112707816 0.11973335 0.1267678 0.13394085 0.14101748 0.14788217 0.15521237 0.16277454 0.1702995 0.1770302 0.18422985 0.19014035 0.19760239 0.2053267 0.21225965 0.21803974 0.22564732 0.23274301 0.23981415 0.24578424 0.2523139 0.25883558 0.2635061 0.26882488 0.27221933 0.27704126 0.2824338 0.28776535 0.2926219 0.2973962 0.30204806 0.30597898 0.3100064 0.31334406 0.31659862 0.3197001 0.32283217 0.32555616 0.3282517 0.330751 0.33304766 0.33521402 0.3371567 0.3388977 0.34044373 0.3416096 0.34261748 0.34314242 0.34345746 0.34347507 0.34321603 0.34269202 0.34289536 0.341445 0.34091944 0.33982423 0.3377332 0.33687612 0.3358028 0.33425495 0.33254373 0.3311673 0.3301445 0.32877588 0.32770965 0.32664904 0.32605565 0.3250255 0.32432747 0.324346 0.32426968 0.32444942 0.32500672 0.32586247 0.3270143 0.3280288 0.32941645 0.33084694 0.33237618 0.3341402 0.33584097 0.33768362 0.33991095 0.34191662 0.34396166 0.34637296 0.34839618 0.3503444 0.3524524 0.35457343 0.35692376 0.35897678 0.36091834 0.36338645 0.3653724 0.36739823 0.3691805 0.37093952 0.3726523 0.37432694 0.3754326 0.3762558 0.37648198 0.3765021 0.3757772 0.37456727 0.37272105 0.37046713 0.367421 0.36429337 0.3606046 0.35749185 0.35461482 0.3515712 0.3485983 0.3455899 0.34233892 0.3401931 0.3377994 0.33591846 0.3327072 0.331502 0.32868308 0.32697693 0.3250653 0.3230023 0.32266033 0.3219759 0.32134676 0.320783 0.3205976 0.31983945 0.3208982 0.32066023 0.32286903 0.32339016 0.32593662 0.3260273 0.32806137 0.3307842 0.3336492 0.33682317 0.34019795 0.34323052 0.34955603 0.3537376 0.3570886 0.36042818 0.36321828 0.3669142 0.3701632 0.3729342 0.3753925 0.37794083 0.38026106 0.38280135 0.38495827 0.38742155 0.3893361 0.39091378 0.39221025 0.39314637 0.39356783 0.39402866 0.39433995 0.3941757 0.39362097 0.39298213 0.3920723 0.39079192 0.38934147 0.3878059 0.38600495 0.38416034 0.3824083 0.37990204 0.3773873 0.3744101 0.3712365 0.36791214 0.36492622 0.36033946 0.3554903 0.35060313 0.34552133 0.3403692 0.33511773 0.32968178 0.3242004 0.3185877 0.31411645 0.30931628 0.30356014 0.29786685 0.29208204 0.2872537 0.28219426 0.2769434 0.27170393 0.26653048 0.2616109 0.25665936 0.2510179 0.24666339 0.24154184 0.23694776 0.23253466 0.22830823 0.2242628 0.22040391 0.21679706 0.21352342 0.21030204 0.20809978 0.20548699 0.2028573 0.20024574 0.19789137 0.19547676 0.19313959 0.19116515 0.18931146 0.1876924 0.18642263 0.18648672 0.18617326 0.18599563 0.18597429 0.18604754 0.18640146 0.18691038 0.18774183 0.1891131 0.19044337 0.19214669 0.193368)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9869999 1.9879999 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote (0.193368 0.19377512 0.19538509 0.19775927 0.19958033 0.20117451 0.2027549 0.20440755 0.20592736 0.20760876 0.20994033 0.21201268 0.21514343 0.21754767 0.21963233 0.22203855 0.22467073 0.2274989 0.2309345 0.23409234 0.23741858 0.24095488 0.24462439 0.24858082 0.25268617 0.25673953 0.2610535 0.26524735 0.2693674 0.27372968 0.27817628 0.28288072 0.28745666 0.29226404 0.29703027 0.30196306 0.3067534 0.3116553 0.3165453 0.3215054 0.32616788 0.33120838 0.33604366 0.34124985 0.34644103 0.35138652 0.3561983 0.36091822 0.36535427 0.36984313 0.37446433 0.37921798 0.3837695 0.3881221 0.3903357 0.39364332 0.39733836 0.4010073 0.40439478 0.407584 0.4101681 0.41315198 0.41528425 0.41731066 0.41938192 0.41933948 0.42053404 0.42090338 0.42135692 0.4221871 0.4220731 0.42207438 0.42145678 0.42152718 0.42126188 0.42290044 0.4253332 0.4275837 0.43068105 0.4360235 0.4410819 0.4488164 0.45579335 0.4641408 0.47517034 0.48678824 0.49682003 0.50769556 0.51772267 0.52643115 0.5349423 0.54265094 0.54987646 0.55613167 0.5610766 0.56515837 0.5687436 0.5708944 0.5723095 0.5722014 0.57177645 0.571171 0.56977177 0.56741804 0.56448985 0.56109715 0.55698324 0.5538967 0.547455 0.54218406 0.5370554 0.5323009 0.5262555 0.5187678 0.511858 0.50410265 0.49610317 0.48844635 0.48130474 0.47388944 0.46612147 0.4583191 0.45046893 0.44312674 0.43562344 0.42812297 0.42053002 0.41351095 0.40647465 0.39995196 0.39426035 0.38872844 0.3839498 0.37962002 0.37571502 0.37338054 0.37071997 0.36835438 0.36658037 0.36473483 0.36308658 0.36173785 0.3604865 0.35928747 0.3582539 0.35726953 0.356136 0.3548644 0.3533487 0.35205337 0.34971935 0.34788436 0.3456834 0.34289 0.34004387 0.3370002 0.33357254 0.3305684 0.3269205 0.32301158 0.3191527 0.31528366 0.3111714 0.3070471 0.30288088 0.29893544 0.29414654 0.28962657 0.285036 0.28071687 0.27603486 0.27126098 0.26611298 0.2613483 0.2562813 0.25135905 0.24627994 0.24125333 0.23643843 0.23183839 0.22696775 0.2221806 0.21745479 0.21289836 0.2083413 0.20382811 0.19943081 0.19503972 0.19093533 0.18702063 0.1831593 0.17930451 0.17548344 0.17140752 0.16768347 0.1638604 0.1603274 0.15658319 0.15296129 0.14961548 0.14626701 0.14283763 0.13943088 0.13605009 0.13277819 0.12948977 0.12613635 0.12293342 0.11968214 0.11654259 0.113350965 0.11030464 0.107394256 0.10465274 0.101855055 0.099198714 0.09663163 0.09398101 0.091373354 0.088820786 0.086496264 0.084255256 0.082043775 0.079784535 0.07771753 0.075809255 0.07389725 0.07205359 0.07028257 0.068732694 0.067357905 0.06612302 0.06488004 0.06396113 0.06318235 0.06275131 0.06241902 0.062373523 0.062585466 0.06301212 0.063603476 0.06440606 0.06530451 0.06634352)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.4380002 3.444 3.4480002 3.454 3.4580002 3.464 3.468 3.474 3.478 3.4839998 3.488 3.4939998 3.498 3.5039997 3.508 3.5139997 3.518 3.5239997 3.5280004 3.533 3.5380004 3.5440002 3.5480004 3.5540002 3.5580004 3.5640002 3.5680003 3.5740002 3.578 3.584 3.588 3.5939999 3.598 3.6039999 3.608 3.6139999 3.618 3.6239999 3.628 3.6339999 3.638 3.6440003 3.648 3.6540003 3.658 3.6640003 3.668 3.6740003 3.678 3.6840003 3.688 3.6920002 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.7379997 3.744 3.7479997 3.754 3.7579997 3.7620004 3.7679997 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.8279999 3.832 3.8379999 3.844 3.8479998 3.854 3.8579998 3.8659997 3.8659997 3.874 3.8779998 3.884 3.8880003 3.894 3.8980003 3.904 3.9080003 3.914 3.9180003 3.924 3.9280002 3.934 3.938 3.944 3.948 3.9539998 3.958 3.9639998 3.9639998 3.9639998 3.978 3.9839998 3.988 3.9939998 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote (0.06634352 0.067820505 0.0691722 0.07052538 0.07185523 0.073481694 0.07523419 0.07697432 0.078409344 0.079985626 0.081624225 0.08315397 0.08455488 0.08602253 0.08762008 0.08908506 0.090685196 0.09226509 0.093898274 0.09558367 0.09727265 0.099085815 0.10088781 0.102814704 0.10474201 0.10707781 0.10928253 0.11159236 0.11414554 0.11663788 0.119085096 0.12177286 0.12429486 0.12690053 0.12950878 0.13260423 0.13539897 0.13837435 0.14128928 0.14445119 0.14774114 0.1512623 0.15490255 0.15853055 0.16242844 0.16654223 0.17081809 0.1752636 0.1799039 0.18439844 0.18915442 0.19412704 0.19930254 0.20462826 0.21020407 0.21593756 0.22196596 0.22831153 0.2349173 0.24197184 0.24927414 0.2565349 0.26400578 0.27162257 0.2794473 0.28736973 0.29522204 0.30345404 0.3118257 0.32031983 0.32892132 0.33750072 0.34617928 0.35506532 0.36382395 0.37270987 0.38143903 0.39010158 0.39871418 0.40708068 0.41489846 0.42298406 0.43084022 0.4383736 0.44612548 0.45362592 0.46008754 0.4661929 0.47199345 0.47693354 0.4810334 0.48420614 0.4860469 0.48730987 0.48743308 0.48670146 0.48477352 0.4819134 0.47760025 0.47254318 0.46650076 0.4592793 0.45177415 0.44363025 0.43557858 0.4270535 0.4184851 0.40996164 0.40164614 0.39388278 0.38665488 0.38015676 0.37522873 0.37063643 0.36669073 0.3636263 0.3618269 0.3611652 0.36161524 0.3635079 0.3665877 0.3699034 0.37535843 0.38121194 0.3859519 0.39188355 0.39828283 0.40477273 0.4152173 0.4230984 0.4288617 0.4335062 0.43421814 0.4416025 0.4464951 0.44442287 0.44494054 0.44707066 0.44881698 0.4506207 0.4512841 0.45154825 0.4512968 0.45025685 0.44934186 0.44806194 0.44646314 0.44447687 0.4426268 0.44015646 0.4381909 0.43565997 0.4335512 0.4307386 0.4281176 0.42510358 0.42196462 0.419374 0.4158927 0.41193122 0.4081868 0.40402213 0.39966446 0.39481378 0.3907682 0.38619167 0.38080987 0.37533578 0.3696681 0.36379784 0.35792527 0.35183302 0.34526116 0.33830956 0.33117157 0.32377687 0.31562248 0.30740896 0.29854625 0.28944412 0.27988794 0.27007627 0.260111 0.25053138 0.24045064 0.23056528 0.22149684 0.21191262 0.20280583 0.19345108 0.18527675 0.17658872 0.1679922 0.15967973 0.15215571 0.14557901 0.13922014 0.13343655 0.12796735 0.12364246 0.119277686 0.1156731 0.112257436 0.109617986 0.10737072 0.10575962 0.104580216 0.104087144 0.10417243 0.104667574 0.10577039 0.10748425)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote (0.10748425 0.109580584 0.1122589 0.11539692 0.11951844 0.12314103 0.12734774 0.13210298 0.13732849 0.14345525 0.1493445 0.15579422 0.16295062 0.17057482 0.17861119 0.1870937 0.19595155 0.2051789 0.21481905 0.22475246 0.23551245 0.24703107 0.25904393 0.271748 0.28528267 0.2997514 0.31493366 0.33088574 0.3477392 0.36554134 0.38363203 0.40274075 0.42249846 0.44303712 0.46408442 0.48586357 0.5080242 0.53075314 0.5542532 0.57804525 0.60205877 0.62604505 0.6496421 0.67237324 0.694114 0.71383447 0.7305516 0.74435455 0.7558259 0.76464004 0.77111394 0.774454 0.7744665 0.7710664 0.76362336 0.7507218 0.7354362 0.71790684 0.697947 0.67500395 0.65094275 0.6238657 0.5961372 0.56662375 0.53740335 0.5082173 0.47923025 0.4503509 0.42284212 0.3968408 0.37241876 0.34991106 0.32868406 0.30943847 0.29208916 0.27542883 0.26032168 0.24625398 0.23248254 0.21990648 0.20755247 0.19513093 0.18500372 0.17407428 0.165019 0.15645372 0.14892885 0.14228946 0.13683453 0.13343719 0.13176725 0.13317463 0.13480668 0.13956058 0.14518145 0.1532038 0.16306648 0.17515014 0.18739681 0.20146613 0.2176876 0.23438525 0.2526567 0.27147403 0.29116967 0.3114059 0.33215213 0.35337845 0.3746876 0.39654395 0.41761255 0.43854192 0.45893765 0.47827548 0.49657294 0.5137781 0.5301291 0.54515356 0.5589442 0.57136715 0.5823921 0.59225947 0.6008729 0.60847694 0.61384804 0.6183536 0.6218782 0.6246095 0.62598545 0.6263483 0.62552464 0.6239985 0.6209658 0.61728585 0.6125165 0.60700667 0.60096735 0.5942745 0.5871443 0.57941467 0.5709652 0.56194216 0.5522726 0.5421233 0.53198106 0.52145184 0.51056165 0.49953926 0.48852766 0.47740257 0.4661877 0.45456728 0.44227067 0.4305685 0.41828203 0.4060136 0.39351276 0.38106486 0.36840612 0.35594705 0.34345925 0.33057472 0.31777415 0.3051566 0.29263029 0.28008226 0.2675914 0.25526053 0.243075 0.23034097 0.21804826 0.20607096 0.19350721 0.1815568 0.17013748 0.15909834 0.14857035 0.13785886 0.12795156 0.11853945 0.10987658 0.10213127 0.09539591 0.08989061 0.08621074 0.084590934 0.08517203 0.08788331 0.09290281 0.099783674 0.10805023 0.11754579 0.12787491 0.1391407 0.15094368 0.16319454 0.17560523 0.18834318 0.20116419 0.21424562 0.22738765 0.24040485 0.2535063 0.26662722 0.27980325 0.29254553 0.2963553)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote (0.2963553 0.30588067 0.31956384 0.33345994 0.34702978 0.36128688 0.37522313 0.38990796 0.40413296 0.4190727 0.43421116 0.44930774 0.4647142 0.48023003 0.4958535 0.5116609 0.52761466 0.54354066 0.559673 0.5761452 0.5925909 0.609232 0.6261553 0.6428616 0.6595217 0.67568404 0.69122667 0.7058783 0.7192514 0.73038525 0.7367063 0.7374527 0.732506 0.7220353 0.7066676 0.6869469 0.66430194 0.63874406 0.6117009 0.58402884 0.55664874 0.5298528 0.50239647 0.47557372 0.44877324 0.42261702 0.39670345 0.37109923 0.34655887 0.322302 0.2988787 0.27660334 0.25522855 0.23525667 0.21638173 0.1987123 0.18268141 0.16801659 0.15478929 0.14303738 0.1326111 0.12350059 0.1154923 0.10861893 0.10239188 0.09721194 0.09289894 0.08891374 0.085497715 0.08231357 0.07949227 0.076955624 0.0745806 0.07237842 0.070591904 0.068163045 0.066269554 0.06409379 0.06223355 0.060377218 0.05869621 0.056728755 0.05473559 0.052992855 0.05090515 0.049212307 0.04755353 0.045816403 0.044320464 0.0427688 0.041439064 0.03996834 0.0383233 0.03699893 0.035390035 0.033620533 0.031830173 0.030110484 0.028368593 0.02671888 0.025022654 0.023510373 0.022102194 0.020644647 0.019188526 0.017661266 0.016217592 0.014861588 0.013773967 0.01277713 0.012001777 0.011241278 0.010731557 0.010542637 0.010492937 0.010594895 0.010613887 0.010911852 0.0112731075 0.011477382 0.011756217 0.012209689 0.01266531 0.012960063 0.013231562 0.013328559 0.013184886 0.013454051 0.013654825 0.013801448 0.013848667 0.013896013 0.014086459 0.014105909 0.0141464 0.01443645 0.014325358 0.014282728 0.014573872 0.0147305075 0.014493237 0.014318654 0.014298411 0.01414287 0.013958459 0.013943601 0.013783482 0.013598563 0.013256319 0.012725294 0.012422656 0.012092649 0.012045014 0.011790972 0.011549785 0.0113057885 0.011033805 0.010902562 0.010519407 0.010513174 0.010312486 0.009990891 0.009870383)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.086 6.088 6.096 6.096 6.102 6.109 6.112 6.118 6.122 6.128 6.133 6.138 6.142 6.148 6.152 6.158 6.162 6.168 6.172 6.178 6.182 6.188 6.194 6.198 6.203 6.208 6.214 6.218 6.224 6.228 6.234 6.238 6.244 6.25 6.254 6.258 6.264 6.268 6.274 6.278 6.284 6.288 6.292 6.298 6.304 6.308 6.314 6.318 6.324 6.328 6.334 6.338 6.344 6.348 6.354 6.358 6.362 6.368 6.374 6.378 6.384 6.388 6.394 6.398 6.404 6.408 6.414 6.418 6.424 6.428 6.432 6.435 6.442 6.448 6.454 6.458 6.464 6.466 6.471 6.478 6.484 6.488 6.493 6.498 6.502 6.508 6.512 6.518 6.522 6.528 6.534 6.538 6.542 6.548 6.552 6.558 6.564 6.568 6.574 6.578 6.582 6.588 6.594 6.598 6.604 6.608 6.614 6.618 6.622 6.628 6.633 6.638 6.644 6.648 6.654 6.658 6.664 6.664 6.674 6.678 6.684 6.688 6.694 6.698 6.704 6.708 6.714 6.718 6.724 6.728 6.734 6.738 6.744 6.748 6.756 6.756 6.764 6.768 6.774 6.78 6.786 6.788 6.792 6.798 6.804 6.808 6.814 6.818 6.826 6.826 6.832 6.838 6.844 6.848 6.854 6.858 6.862 6.868 6.8739996 6.878 6.882 6.888 6.892 6.8960004 6.902 6.909 6.912 6.9179998 6.922 6.928 6.932 6.9380007 6.942 6.948 6.9519997 6.9580007 6.962 6.966 6.9719997 6.9780007 6.984 6.9879995 6.9940004 6.9980006 7.003 7.0079994 7.0119996 7.0180006 7.026 7.026 7.0319996 7.038 7.042 7.0479994 7.0519996 7.058 7.062 7.0679994 7.074 7.078 7.082 7.0880003 7.0920005 7.098 7.104 7.1080003 7.114 7.118 7.122 7.1280003 7.134 7.138 7.144 7.1480003 7.154 7.158 7.164 7.168 7.174 7.178 7.1859994 7.1879997 7.194 7.198 7.202 7.2079997 7.2140007 7.218 7.2239995 7.2279997 7.232 7.238 7.2439995 7.2540007 7.2540007 7.258 7.2639995 7.2679997 7.274 7.278 7.282 7.2880006 7.292 7.298 7.302 7.3080006 7.312 7.318 7.3219996 7.3259997 7.332 7.3379994 7.3419995 7.3480005 7.3520007 7.3579993 7.363 7.3680005 7.3720007 7.3779993 7.3840003 7.3880005 7.396 7.396 7.4040003 7.408 7.414 7.418 7.424 7.428 7.432 7.438 7.444 7.448 7.452 7.458 7.4660006 7.4660006 7.474 7.478 7.4839997 7.488 7.494 7.498 7.5060005 7.5060005 7.514 7.518 7.5240007 7.528 7.534 7.538 7.5440006 7.548 7.554 7.5579996 7.5640006 7.568 7.5739994 7.5779996 7.5840006 7.588 7.592 7.5979996 7.6040006 7.608 7.6139994 7.6179996 7.624 7.628 7.6339994 7.6379995 7.644 7.648 7.6539993 7.6580005 7.6620007 7.668 7.6740003 7.6780005 7.684 7.688 7.6919994 7.6980004 7.7020006 7.7090006 7.7119994 7.7180004 7.7220006 7.728 7.7319994 7.7380004 7.742 7.748 7.7519994 7.758 7.762 7.766 7.7719994 7.778 7.782 7.788 7.7920003 7.798 7.802 7.808 7.8120003 7.818 7.822 7.826 7.8320003 7.838 7.842 7.848 7.852 7.858 7.8630004 7.868 7.872 7.878 7.882 7.888 7.8919997 7.898 7.902 7.9079995 7.9119997 7.9180007 7.922 7.9279995 7.933 7.9380007 7.942 7.9479995 7.9540005 7.9580007 7.962 7.9679995 7.9719997 7.978 7.982 7.9879995 7.994 7.998 8.003 8.008 8.012 8.018 8.022 8.028 8.034 8.038 8.044 8.048 8.054 8.066 8.066 8.068 8.072 8.078 8.084 8.088 8.092 8.098 8.102 8.109 8.112 8.118 8.122 8.126 8.132 8.138 8.142 8.148 8.152 8.158 8.162 8.168 8.172 8.178 8.182 8.188 8.192 8.196 8.202 8.208 8.212 8.218 8.222 8.228 8.232 8.238 8.242 8.248 8.252 8.258 8.262 8.266 8.272 8.278 8.282 8.288 8.292 8.298 8.302 8.308 8.312 8.318 8.322 8.328 8.332 8.338 8.342 8.348 8.352 8.358 8.363 8.364 8.373 8.378 8.382 8.388 8.392 8.398 8.398 8.408 8.414 8.418 8.422 8.428 8.433 8.433 8.442 8.448 8.454 8.458 8.464 8.464 8.469 8.478 8.484 8.49 8.492 8.498 8.502 8.507 8.512 8.518 8.522 8.528 8.532 8.537 8.542 8.549 8.552 8.558 8.562 8.568 8.573 8.578 8.582 8.588 8.592 8.598 8.602 8.608 8.612 8.618 8.622 8.626 8.631 8.638 8.642 8.648 8.652 8.658 8.658 8.668 8.672 8.678 8.682 8.688 8.692 8.696 8.702 8.708 8.712 8.718 8.722 8.728 8.733 8.738 8.742 8.748 8.752 8.758 8.762 8.769 8.772 8.778 8.782 8.788 8.792 8.798 8.803 8.808 8.812 8.818 8.824 8.824 8.832 8.838 8.844 8.848 8.852 8.858 8.862 8.868 8.872 8.878 8.882 8.888 8.892 8.898 8.902 8.908 8.912 8.918 8.922 8.928 8.932 8.938 8.942 8.948 8.952 8.958 8.962 8.968 8.972 8.978 8.982 8.988 8.992 8.998 9.002 9.008 9.012 9.016 9.023 9.028 9.032 9.038 9.042 9.048 9.05 9.058 9.062 9.068 9.082 9.082 9.084 9.093 9.098 9.102 9.108 9.112 9.118 9.123 9.126 9.129)) (quote (0.009870383 0.009810137 0.009433331 0.009182142 0.008933199 0.008754041 0.008642282 0.008331774 0.008003806 0.007776936 0.007641757 0.0072773886 0.0069426424 0.00643724 0.005856188 0.0052873334 0.005059758 0.005023973 0.005801012 0.0070598754 0.0088349935 0.010996472 0.013912016 0.017214915 0.021087982 0.025271586 0.029980388 0.034937837 0.04005299 0.045230188 0.050392393 0.055564147 0.06044484 0.06528363 0.06988471 0.07435454 0.07885349 0.08304296 0.08747472 0.09195758 0.09647991 0.101283536 0.10616299 0.11138123 0.116796926 0.12243038 0.12811512 0.13410066 0.14056073 0.14704553 0.15380182 0.1608258 0.16800522 0.17504846 0.18224213 0.18922358 0.19627275 0.20315323 0.20968069 0.21614538 0.22247479 0.22840654 0.23441927 0.24000226 0.24585797 0.2512413 0.25604784 0.2612012 0.26590636 0.2701194 0.27409765 0.2777765 0.28156468 0.2850779 0.28757516 0.2902537 0.29305747 0.29535002 0.29738858 0.29918045 0.30077147 0.3029766 0.30462044 0.30578408 0.30660346 0.30696437 0.30731082 0.30723262 0.3068614 0.30615753 0.3054439 0.30429423 0.30291164 0.3014465 0.29948092 0.29755896 0.2955564 0.29319215 0.29062012 0.28784668 0.28504306 0.28184474 0.2787446 0.27567688 0.2721767 0.2697309 0.2665923 0.2639663 0.2617539 0.26012895 0.25840414 0.25670385 0.25506553 0.25337195 0.2517923 0.25027132 0.2486461 0.24700073 0.24535388 0.24374344 0.24228734 0.24082786 0.23927896 0.2378411 0.23653797 0.23546347 0.23440066 0.23366085 0.23301424 0.23229538 0.23158325 0.2308417 0.22997752 0.22911099 0.22810184 0.22711033 0.22606 0.22486195 0.22360543 0.22264919 0.21938052 0.22062995 0.22125903 0.22157294 0.2217665 0.22132726 0.22127754 0.22138663 0.22117524 0.22094415 0.22063312 0.22025672 0.22000103 0.21943733 0.21894567 0.21844736 0.21814086 0.21777804 0.21757476 0.21751954 0.2177695 0.21795285 0.21838592 0.21898663 0.21948998 0.22027566 0.22134075 0.2223499 0.22323835 0.22376822 0.2245664 0.2255529 0.22649946 0.2272418 0.22802668 0.22864619 0.22902891 0.22918815 0.2293666 0.22938575 0.22687206 0.2282496 0.22876513 0.2286271 0.2283961 0.22807303 0.22743498 0.2269507 0.22646158 0.22599747 0.22553836 0.22509673 0.2247497 0.22453866 0.22423613 0.22400405 0.22386293 0.22373839 0.2237076 0.22387626 0.22416856 0.22489234 0.22571187 0.22693573 0.2284376 0.23029359 0.23249224 0.23505564 0.23808722 0.24130433 0.2450217 0.24907995 0.25328287 0.2579828 0.26287824 0.26789755 0.27297986 0.2784465 0.2839938 0.28979775 0.29567823 0.30172017 0.3079431 0.31430712 0.32065716 0.32726535 0.33378223 0.34064963 0.34752712 0.35468405 0.3619264 0.3692355 0.3766438 0.38417128 0.39167756 0.39943823 0.4067831 0.41439107 0.42172304 0.4289608 0.4359338 0.44254985 0.44867882 0.4541336 0.45909372 0.46368065 0.46752757 0.47113764 0.47420484 0.4767994 0.47858554 0.47990522 0.48048323 0.4799857 0.47884175 0.47674695 0.4738617 0.47048408 0.46685562 0.463078 0.45926297 0.45587137 0.45252174 0.44700888 0.4441206 0.4425502 0.4418786 0.4429079 0.44356325 0.4443288 0.44480333 0.44493204 0.4452399 0.44584396 0.44669333 0.44771793 0.44934565 0.45058268 0.45167744 0.45350835 0.45511234 0.45738506 0.45963326 0.46170276 0.4642589 0.4668037 0.46889886 0.4712481 0.47352442 0.4757786 0.47794068 0.48045436 0.48096353 0.48267284 0.48457754 0.48653615 0.48847222 0.4904192 0.49326238 0.4949159 0.49698144 0.49841204 0.49986643 0.50160736 0.50480366 0.50659514 0.50783206 0.50694854 0.5074409 0.50619066 0.505136 0.5047827 0.50229395 0.5012385 0.49996433 0.49717587 0.49389097 0.48981884 0.48547646 0.4808318 0.4767339 0.47089255 0.46636575 0.4601963 0.45464733 0.44792807 0.44158396 0.43472096 0.42702293 0.4189641 0.41068423 0.40181023 0.39266583 0.38296568 0.37281474 0.36264467 0.35188258 0.34095275 0.33005345 0.3191244 0.30805206 0.29712486 0.28624076 0.27529335 0.26457328 0.25434884 0.2438602 0.23393275 0.22386246 0.21462992 0.20604342 0.19695974 0.18866976 0.18089468 0.17353797 0.16681959 0.16059956 0.1537761 0.14773596 0.14245744 0.13768351 0.13308244 0.12922186 0.12610747 0.12376934 0.12259632 0.122136906 0.123048306 0.1251723 0.12856913 0.13288814 0.1383233 0.1442076 0.15122837 0.15975398 0.1690668 0.17965777 0.19089218 0.20282719 0.21545977 0.22794947 0.24073014 0.25426126 0.2684522 0.28246412 0.2960689 0.30998883 0.32381344 0.33723578 0.35053235 0.36348882 0.37648174 0.38920122 0.40118268 0.41266269 0.42465222 0.43617097 0.44679838 0.45648158 0.4658004 0.47490054 0.48395306 0.492226 0.49995986 0.506973 0.5120959 0.5177856 0.52145744 0.5247559 0.5288383 0.5311976 0.5327233 0.533908 0.53507895 0.5356416 0.5354502 0.5346728 0.5330873 0.5315315 0.52934826 0.52639425 0.5232545 0.5200526 0.5156046 0.50965006 0.5018389 0.4918637 0.47988632 0.46630445 0.45178625 0.43640575 0.4207346 0.4049086 0.3895564 0.37423572 0.35887858 0.34341645 0.32774183 0.311553 0.29477218 0.2778051 0.26100916 0.24508798 0.229077 0.21421607 0.20082386 0.18920718 0.17955178 0.17212615 0.16710212 0.16586696 0.1660436 0.168972 0.17492502 0.18268486 0.1922988 0.20394004 0.2157392 0.22828317 0.24212843 0.2561395 0.26991948 0.28408694 0.29773256 0.31143722 0.32451198 0.33764836 0.3498731 0.36172584 0.3725612 0.3826235 0.3920426 0.40015644 0.4076806 0.41486257 0.42085865 0.42615294 0.4303426 0.43383265 0.43635055 0.43828005 0.43914813 0.438671 0.43793985 0.43690628 0.43496042 0.43192223 0.4286884 0.4249572 0.42040202 0.41569662 0.4106777 0.40475187 0.39808214 0.39113465 0.38428113 0.37599552 0.36776066 0.35920873 0.3506754 0.3414263 0.33273947 0.32327566 0.31306797 0.30219895 0.29117465 0.27997258 0.2683784 0.25727335 0.24615544 0.23482086 0.22374876 0.21232298 0.20103035 0.18986644 0.17850816 0.16716074 0.15625163 0.14521806 0.13423632 0.12390604 0.112919554 0.10251965 0.092068754 0.08162409 0.07190706 0.062286266 0.05418048 0.04622919 0.041373093 0.037862774 0.037438956 0.040125046 0.04466531 0.050707262 0.057382178 0.065436475 0.073161945 0.08182146 0.09101761 0.09955922 0.10827173 0.11676742 0.12531008 0.1328728 0.14073637 0.14796093 0.15496533 0.1615359 0.16793017 0.17378517 0.1791157 0.18408972 0.1891152 0.19314225 0.19649995 0.19916088 0.20314275 0.20496193 0.20564644 0.20637734 0.2067564 0.2059184 0.20526746 0.20350249 0.2010669 0.19885707 0.19564948 0.19195239 0.18760014 0.18286249 0.17832802 0.17304489 0.16717372 0.16139724 0.15461192 0.14795754 0.14113406 0.13332263 0.12575124 0.117990926 0.11015333 0.10174138 0.093172506 0.08513973 0.076346174 0.06775143 0.05942871 0.051126056 0.042767935 0.034545236 0.026835565 0.020168109 0.017026319 0.017231029 0.019932114 0.02426397 0.029714827 0.03518317 0.049942006 0.060447604 0.06806079 0.07406767 0.07981668 0.08461878 0.089695394 0.09456206 0.09953634 0.104236774 0.10659165)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote (0.10659165 0.10894726 0.113325514 0.11722721 0.12126903 0.12507105 0.12860713 0.13191898 0.1340524 0.13625439 0.13812737 0.13971006 0.14109804 0.14160788 0.14235467 0.14234989 0.14108238 0.14051432 0.13898349 0.13766659 0.1353378 0.13291389 0.1295347 0.12756492 0.1238729 0.12076218 0.116923966 0.11205025 0.10774252 0.10269669 0.09734702 0.092459575 0.08702515 0.08165509 0.076105476 0.07050356 0.064924196 0.05928521 0.053911314 0.048538443 0.04289743 0.037697345 0.033412505 0.029811098 0.025731015 0.025588107 0.026063664 0.027765725 0.029845354 0.03289432 0.036651425 0.041222878 0.045525343 0.05032867 0.055072423 0.0605208 0.06541 0.07025248 0.07495397 0.079385884 0.08377584 0.08755011 0.09148775 0.095728986 0.09945676 0.10360902 0.10559134 0.10948553 0.111653045 0.11329247 0.115419775 0.11763992 0.119068235 0.12062501 0.12150792 0.12247827 0.12368056 0.12410384 0.12400775 0.123557136 0.123314776 0.1225735 0.12196984 0.12055868 0.118891254 0.117200285 0.115582384 0.113256656 0.110838644 0.10825345 0.10580118 0.103138045 0.10013271 0.09730483 0.09428284 0.09130435 0.08865102 0.08584735 0.0831001 0.0806312 0.07832102 0.075805634 0.07378572 0.07168413 0.06969708 0.067981355 0.06655344 0.06565586 0.064892404 0.06409881 0.06345878 0.06338466 0.06370113 0.064159304 0.064663515 0.065495774 0.066325724 0.06700347 0.067988605 0.06893191 0.06970955 0.07079353 0.071639225 0.07247905 0.07329164 0.07421288 0.07484516 0.07549599 0.07629414 0.076424554 0.07674359 0.07697109 0.07739949 0.07769122 0.07770404 0.077773176 0.07789075 0.0774655 0.07766498 0.07745585 0.0774607 0.077375315 0.07698216 0.077543244 0.07757607 0.07700277 0.07709253 0.077038646 0.07687488 0.07673634 0.07612078 0.075573445 0.07571509 0.0760941 0.07629629 0.076564394 0.07652739 0.07614032 0.076079466 0.076859176 0.077198275 0.07755779 0.07738873 0.07798132 0.07870642 0.07915905 0.0795898 0.07932907 0.08011175 0.080703005 0.08136919 0.08177346 0.08188776 0.0827943 0.08363199 0.08406227 0.08475008 0.08534181 0.085617915 0.086075865 0.08619205 0.08658613 0.086271636 0.08677069 0.08694183 0.08747353 0.087441936 0.08708948 0.0867393 0.08618298 0.085676596 0.08523843 0.084725015 0.08427259 0.083712295 0.083217815 0.082623415 0.08223991 0.08167497 0.08113521 0.08069473 0.080052935 0.07950532 0.0791267 0.07893611 0.078857795 0.07898821 0.07925581 0.079608426 0.07996637 0.08038561 0.080837056 0.08116837 0.08149686 0.081758015 0.08207344 0.082155556 0.0822379 0.08195787 0.08171889 0.0815678 0.08114021 0.08079983 0.0803104 0.07982358 0.079141155 0.078280285 0.0774986 0.076553814 0.07560358 0.07450351 0.07360117 0.07261217 0.07167189 0.07047996 0.06958747 0.068723545 0.06793946 0.06729764 0.06666334 0.06618782 0.06572631 0.0653088 0.06499818 0.06479819 0.06464082 0.06442026 0.06432314 0.06430425 0.0643085 0.064209126 0.06422012 0.06426229 0.06432665 0.06426126 0.06428979 0.06439576 0.06453872 0.06485068 0.06528319 0.06559872 0.06619544 0.0667901 0.06765926 0.06868196 0.0694289 0.0703513 0.07156654 0.07206977)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list "XEUL" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-92.10033 -92.10188 -92.10237 -92.11662 -92.060196 -92.03201 -92.04818 -91.9956 -91.938774 -91.85381 -91.815346 -91.73575 -91.65067 -91.56849 -91.4418 -91.338036 -91.223526 -91.19136 -91.09809 -90.93519 -90.69749 -90.60275 -90.46232 -90.299736 -90.14308 -89.96661 -89.11086 -89.66725 -89.45552 -88.45984 -88.51033 -88.432465 -87.91367 -87.83847 -87.78793 -87.68845 -87.224846 -87.27717 -87.3355 -87.096924 -86.91833 -87.00869 -86.8413 -86.94332 -86.753 -86.87497 -86.77025 -86.79062 -86.56718 -86.794205 -86.904366 -86.63157 -86.594445 -87.025 -86.996575 -87.039376 -87.38417 -87.2701 -87.49984 -87.79753 -87.68411 -88.34005 -88.351906 -88.74963 -88.973145 -89.28622 -89.37323 -90.042755 -90.524346 -90.65599 -91.20756 -91.53354 -92.1455 -92.854744 -93.56742 -93.983734 -94.35001 -94.80834 -95.66984 -96.267426 -97.46184 -97.937874 -98.41213 -99.23118 -100.57939 -100.867066 -101.74953 -102.41187 -103.746575 -104.55276 -105.41697 -107.02462 -108.207634 -110.18573 -111.25189 -112.41098 -113.39627 -114.901856 -116.1216 -117.14919 -118.534096 -119.596306 -121.11967 -122.37923 -123.68165 -124.89593 -126.58805 -127.97427 -129.2572 -130.73473 -132.21067 -133.59255 -135.14452 -136.65686 -138.10384 -139.54137 -141.07794 -142.38819 -143.84889 -145.20398 -146.52045 -147.61528 -149.18354 -150.11937 -151.40299 -152.78794 -153.69835 -154.81237 -155.89788 -156.86008 -157.88492 -158.80568 -159.60808 -160.42769 -161.15265 -161.89698 -162.74645 -163.3009 -163.91179 -164.42263 -164.85887 -165.23654 -165.65494 -165.97487 -166.31203 -166.52698 -166.77442 -166.92809 -167.07141 -167.14911 -167.19751 -167.18396 -167.16934 -167.12424 -167.06156 -166.95058 -166.79438 -166.66205 -166.45764 -166.23503 -165.97824 -165.71929 -165.53879 -165.2182 -164.92186 -164.6267 -164.20343 -163.90416 -163.58515 -163.25278 -162.8617 -162.53491 -162.15267 -161.77368 -161.35694 -160.97879 -160.46727 -160.11713 -159.67237 -159.24265 -158.805 -158.36495 -156.87877 -157.37465 -156.81809 -155.1961 -155.77594 -155.18987 -154.6514 -153.0209 -153.55345 -151.78226 -151.46468 -150.8418 -150.00368 -149.52249 -148.9467 -148.23464 -147.56348 -146.97978 -146.0007 -145.75446 -144.11373 -144.2217 -142.6418 -142.92646 -140.87574 -139.99251 -139.56598 -138.57508 -137.75493 -136.95421 -135.8725 -136.32411 -135.2519 -134.2737 -133.48627 -132.52335 -131.94666 -131.0498 -130.19925 -129.24246 -128.40267 -127.47455 -126.55974 -125.59678 -124.80206 -123.85679 -122.72504 -121.733445 -120.87218 -120.085884 -119.10076 -118.153595 -117.31872 -116.394516 -115.54926 -114.65202 -113.81864 -113.021576 -112.17682 -111.40127 -110.54432 -109.766304 -108.98477 -108.30194 -107.56347 -106.832535 -106.13415 -105.15808 -104.7712 -104.4099 -103.45455 -103.25101 -102.67896 -102.09276 -101.58317 -101.38746 -100.91054 -100.88572 -100.50473 -100.32118 -99.96518 -99.63802 -99.26073 -98.92255 -98.64782 -98.327545 -98.02941 -97.79044 -97.48239 -96.97447 -97.04263 -96.49951 -96.255226 -96.168564 -95.88939 -95.73352 -95.613396 -95.4208 -95.31832 -95.15922 -95.055565 -94.96134 -94.78322 -94.6685 -94.64486 -94.49598 -94.42536 -94.39023 -94.29672 -94.28567 -94.24329 -94.19907 -94.12504 -94.13827 -94.12888 -94.0456 -94.0301 -94.05306 -94.138665 -93.857575 -93.795784 -93.83008 -93.80195)) (quote (-51.618237 -51.577858 -51.59484 -51.554184 -51.52747 -51.51741 -51.249737 -51.45055 -51.40541 -51.393403 -51.359978 -51.30679 -51.301304 -51.33289 -51.296174 -51.29122 -51.268685 -51.04856 -51.03782 -50.988106 -51.22033 -51.032326 -50.978516 -50.978867 -50.98833 -50.977314 -50.561222 -50.987275 -50.9897 -50.5844 -50.551445 -50.540005 -50.612706 -50.603138 -50.590725 -50.60339 -50.655308 -50.65123 -50.621106 -50.68581 -50.705914 -50.686146 -50.726017 -50.71255 -50.755173 -50.731633 -50.81006 -50.824727 -50.836918 -50.87072 -50.874203 -51.006955 -51.0843 -51.059498 -51.182026 -51.250348 -51.250874 -51.43432 -51.50753 -51.526764 -51.69136 -51.710858 -51.882817 -51.930108 -52.102986 -52.248127 -52.426773 -52.528485 -52.665646 -52.86795 -52.972226 -53.260045 -53.411015 -53.616394 -53.79872 -54.10019 -54.288453 -54.547413 -54.81062 -55.024373 -55.329895 -55.48115 -55.83833 -56.115815 -56.408245 -56.675217 -56.936844 -57.293766 -57.594544 -57.828087 -58.141968 -58.490048 -58.72591 -59.463967 -59.797676 -60.117157 -60.42754 -60.60501 -60.854035 -61.203728 -61.465226 -61.747612 -61.892853 -62.085995 -62.312088 -62.582653 -62.64727 -62.81382 -63.00251 -63.116352 -63.235974 -63.375615 -63.423787 -63.476696 -63.560738 -63.5651 -63.520394 -63.53652 -63.487233 -63.45265 -63.380127 -63.49313 -63.153202 -63.238457 -63.095726 -62.72121 -62.73794 -62.516205 -62.28179 -62.134434 -61.812455 -61.49068 -61.271054 -60.92424 -60.628567 -60.24179 -59.91222 -59.564248 -59.082028 -58.748757 -58.376736 -57.9442 -57.5163 -57.043366 -56.546917 -56.113865 -55.622303 -55.137116 -54.603077 -54.1121 -53.67203 -53.093865 -52.578186 -52.08135 -51.47859 -50.902497 -50.307228 -49.79028 -49.230515 -48.67667 -48.17206 -47.631966 -46.893948 -46.372727 -45.78351 -45.195427 -44.705826 -44.06903 -43.42227 -42.862244 -42.28985 -41.727864 -41.181 -40.60742 -39.98408 -39.519944 -39.12196 -38.549996 -38.134274 -37.528565 -37.099987 -36.613823 -36.22582 -35.63722 -35.268898 -34.926487 -34.425316 -34.119347 -33.77908 -33.380417 -33.029515 -32.752713 -32.44464 -32.072655 -31.727419 -31.447005 -31.279667 -31.055542 -30.82851 -30.496304 -30.24657 -30.153216 -30.140118 -29.899989 -29.82042 -29.324612 -29.568316 -29.709069 -29.317927 -29.289175 -29.29399 -29.27896 -29.305417 -29.09549 -29.08724 -29.163878 -29.147379 -29.120394 -29.145512 -29.195059 -29.270386 -29.34332 -29.390717 -29.522248 -29.48019 -29.586895 -29.608487 -29.70025 -29.764889 -29.898943 -29.9785 -30.134354 -30.158177 -30.260293 -30.263516 -30.372286 -30.39109 -30.4458 -30.487334 -30.532624 -30.579272 -30.585576 -30.613728 -30.853589 -30.650015 -30.8131 -30.787945 -30.757805 -30.724562 -30.772738 -30.733927 -30.881724 -30.575985 -30.640282 -30.511479 -30.399712 -30.263182 -30.11628 -29.984732 -29.853096 -29.681799 -29.673703 -29.517107 -29.382725 -29.09184 -28.978814 -28.795592 -28.663962 -28.53373 -28.37384 -28.235335 -27.98417 -27.98283 -27.7104 -27.592764 -27.546122 -27.433878 -27.528113 -27.507983 -27.467808 -27.43806 -27.420323 -27.629528 -27.676527 -27.674706 -27.685788 -27.775654 -27.745528 -27.86139 -27.916069 -28.004618 -28.112284 -28.24947 -28.704827 -28.816197 -28.978096 -29.159657 -29.358994 -29.572327 -29.786234 -30.034543 -30.123082 -30.310473 -30.562436 -30.781689)) (quote (51.999905 52.164784 52.146614 52.30044 52.390397 52.47519 52.948857 52.7315 52.92728 53.16509 53.25423 53.563 53.757485 53.874813 54.18826 54.312508 54.590886 55.063805 55.26175 55.605893 55.50879 55.985268 56.381596 56.618 56.77212 57.049572 57.914414 57.42482 57.782776 58.466874 59.024613 59.378708 59.299927 59.51393 59.99574 60.29114 60.207745 60.53772 61.02553 61.160424 61.291783 61.74079 61.880974 62.210423 62.370408 62.710717 62.86067 63.111325 63.17622 63.567383 63.982136 63.73667 63.86242 64.49436 64.47415 64.66988 65.12495 64.87722 65.02473 65.27625 65.10432 65.819214 65.61897 65.747826 65.75988 65.984215 65.59012 65.9668 66.112686 66.016396 66.00743 65.83481 65.85635 65.91181 65.925316 65.65674 65.29648 65.097435 64.896416 64.60285 65.03488 64.139 63.51999 63.287636 63.46224 62.449673 62.03939 61.32695 60.877747 60.318543 59.361107 59.59664 58.802838 56.18123 55.383385 54.400666 53.479866 52.26667 51.347004 50.346928 48.873803 47.887978 46.6946 45.52517 44.29859 43.072117 41.899144 40.58848 39.46422 38.34964 37.05285 35.73181 34.462357 33.1161 31.823889 30.733139 29.456774 28.232356 26.922558 25.663363 24.442934 23.030125 22.07984 20.803324 19.590128 18.764107 17.580727 16.598732 15.767834 14.582324 13.746604 12.968722 12.128947 11.498865 10.818289 10.232583 9.113117 8.504713 8.255328 7.7365914 7.2818694 7.0843234 6.8250847 6.4215427 6.540731 6.3759427 6.2354527 6.3644447 6.295532 6.1888604 6.0984087 6.165079 6.2808228 6.3702345 6.762762 6.862116 7.223276 7.4209905 7.6940036 7.913394 8.278031 8.531433 9.31499 9.588557 10.181801 10.560555 11.027693 11.558095 12.02749 12.604165 12.954886 13.4114 14.000447 14.426863 14.99501 15.347042 15.7651825 16.78266 16.898514 17.343874 17.548764 17.906567 20.366866 18.070788 18.179512 20.836474 18.505148 18.478356 18.736487 21.484408 19.179339 21.68159 21.776793 21.816039 22.651247 22.125758 22.20642 22.275399 22.429127 22.772572 23.236834 22.515517 24.895127 22.660122 24.944157 23.987053 27.143515 26.065802 26.508343 27.027628 27.39142 27.219895 28.261397 24.837668 25.894478 26.102934 26.406743 27.023026 26.600783 27.045512 27.105427 27.575766 27.569609 27.853013 28.197922 28.325245 29.14343 29.509139 29.773978 30.13148 30.41082 30.895073 31.269383 31.77301 32.330727 32.716603 33.440998 34.023503 34.672577 35.34595 35.89531 36.656975 37.337967 38.781914 39.0884 40.555073 41.436295 42.351983 43.388466 44.042447 45.404404 47.48249 48.027386 50.137757 51.60178 53.05133 54.803246 56.866826 58.8884 62.050015 63.995034 66.10992 68.13337 69.903206 72.32745 74.21994 76.078026 77.831345 79.685685 81.34565 83.00726 84.297615 86.26827 87.599884 89.19858 91.00044 92.59274 94.431046 96.10549 97.72037 99.34468 100.92972 102.9159 104.36524 105.9764 107.22642 108.687355 109.82607 111.3187 112.48897 113.75957 115.07596 116.35264 118.64678 119.75798 120.98613 122.2749 123.45698 124.56083 125.62972 126.7417 128.02051 129.11797 130.06272 130.7405)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list 51.999905 52.164784 52.146614 52.30044 52.390397 52.47519 52.948857 52.7315 52.92728 53.16509 53.25423 53.563 53.757485 53.874813 54.18826 54.312508 54.590886 55.063805 55.26175 55.605893 55.50879 55.985268 56.381596 56.618 56.77212 57.049572 57.914414 57.42482 57.782776 58.466874 59.024613 59.378708 59.299927 59.51393 59.99574 60.29114 60.207745 60.53772 61.02553 61.160424 61.291783 61.74079 61.880974 62.210423 62.370408 62.710717 62.86067 63.111325 63.17622 63.567383 63.982136 63.73667 63.86242 64.49436 64.47415 64.66988 65.12495 64.87722 65.02473 65.27625 65.10432 65.819214 65.61897 65.747826 65.75988 65.984215 65.59012 65.9668 66.112686 66.016396 66.00743 65.83481 65.85635 65.91181 65.925316 65.65674 65.29648 65.097435 64.896416 64.60285 65.03488 64.139 63.51999 63.287636 63.46224 62.449673 62.03939 61.32695 60.877747 60.318543 59.361107 59.59664 58.802838 56.18123 55.383385 54.400666 53.479866 52.26667 51.347004 50.346928 48.873803 47.887978 46.6946 45.52517 44.29859 43.072117 41.899144 40.58848 39.46422 38.34964 37.05285 35.73181 34.462357 33.1161 31.823889 30.733139 29.456774 28.232356 26.922558 25.663363 24.442934 23.030125 22.07984 20.803324 19.590128 18.764107 17.580727 16.598732 15.767834 14.582324 13.746604 12.968722 12.128947 11.498865 10.818289 10.232583 9.113117 8.504713 8.255328 7.7365914 7.2818694 7.0843234 6.8250847 6.4215427 6.540731 6.3759427 6.2354527 6.3644447 6.295532 6.1888604 6.0984087 6.165079 6.2808228 6.3702345 6.762762 6.862116 7.223276 7.4209905 7.6940036 7.913394 8.278031 8.531433 9.31499 9.588557 10.181801 10.560555 11.027693 11.558095 12.02749 12.604165 12.954886 13.4114 14.000447 14.426863 14.99501 15.347042 15.7651825 16.78266 16.898514 17.343874 17.548764 17.906567 20.366866 18.070788 18.179512 20.836474 18.505148 18.478356 18.736487 21.484408 19.179339 21.68159 21.776793 21.816039 22.651247 22.125758 22.20642 22.275399 22.429127 22.772572 23.236834 22.515517 24.895127 22.660122 24.944157 23.987053 27.143515 26.065802 26.508343 27.027628 27.39142 27.219895 28.261397 24.837668 25.894478 26.102934 26.406743 27.023026 26.600783 27.045512 27.105427 27.575766 27.569609 27.853013 28.197922 28.325245 29.14343 29.509139 29.773978 30.13148 30.41082 30.895073 31.269383 31.77301 32.330727 32.716603 33.440998 34.023503 34.672577 35.34595 35.89531 36.656975 37.337967 38.781914 39.0884 40.555073 41.436295 42.351983 43.388466 44.042447 45.404404 47.48249 48.027386 50.137757 51.60178 53.05133 54.803246 56.866826 58.8884 62.050015 63.995034 66.10992 68.13337 69.903206 72.32745 74.21994 76.078026 77.831345 79.685685 81.34565 83.00726 84.297615 86.26827 87.599884 89.19858 91.00044 92.59274 94.431046 96.10549 97.72037 99.34468 100.92972 102.9159 104.36524 105.9764 107.22642 108.687355 109.82607 111.3187 112.48897 113.75957 115.07596 116.35264 118.64678 119.75798 120.98613 122.2749 123.45698 124.56083 125.62972 126.7417 128.02051 129.11797 130.06272 130.7405))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-93.80195 -93.79257 -93.895295 -93.915215 -94.04712 -94.08055 -94.16999 -94.22502 -94.28147 -94.36461 -94.47299 -94.5742 -95.24614 -95.35188 -95.47937 -95.621796 -95.82847 -95.9996 -96.1196 -96.35144 -96.58147 -96.80992 -97.03819 -97.358574 -97.65456 -97.9729 -98.18475 -98.70211 -99.034966 -99.453286 -99.86479 -100.28553 -100.72816 -101.22787 -101.73525 -102.25377 -102.87411 -103.45188 -104.11857 -104.38413 -104.956505 -105.703476 -106.32812 -107.11362 -107.86626 -108.65501 -109.464516 -110.255745 -111.40038 -112.30655 -113.23927 -114.23281 -115.28346 -116.37239 -116.45233 -117.642 -118.682305 -119.80822 -121.02918 -122.187706 -123.68372 -124.730255 -126.33747 -127.716606 -129.2812 -131.54502 -133.18268 -134.75478 -136.31302 -137.8857 -139.45493 -141.20478 -142.6374 -143.89986 -145.33975 -146.06485 -147.43477 -148.76944 -149.99353 -150.89014 -152.21791 -152.82251 -154.19118 -155.19806 -155.72028 -156.56179 -157.9931 -158.08448 -158.68648 -159.96395 -160.4592 -160.89344 -161.39176 -161.64257 -161.7173 -161.94164 -162.06574 -162.1136 -162.18433 -162.20873 -162.20848 -162.05821 -161.98474 -161.7522 -161.54038 -161.28153 -160.96163 -160.70769 -160.30406 -159.78572 -159.05774 -158.53621 -158.05695 -157.85306 -157.01078 -156.88677 -156.24904 -155.76914 -154.89037 -154.43824 -153.78456 -153.31649 -152.73172 -152.16963 -151.54869 -151.35645 -150.82363 -150.0978 -149.47916 -148.86974 -148.2018 -147.56726 -146.89238 -146.13217 -145.44164 -144.8033 -144.04283 -143.36252 -142.61963 -141.84049 -141.07956 -140.32964 -139.48947 -138.80048 -137.97891 -137.25925 -136.4556 -135.70929 -135.0305 -134.23073 -133.52053 -132.82141 -132.00368 -131.42783 -130.73928 -129.9937 -129.41344 -128.69554 -128.13488 -127.48204 -126.799446 -126.231224 -125.67582 -125.1309 -124.47441 -123.96432 -123.48461 -122.90919 -122.3395 -121.810425 -121.25223 -120.83112 -120.32728 -119.811776 -119.38272 -118.84809 -118.47456 -118.0676 -117.6692 -117.31594 -116.91279 -116.50906 -116.09794 -115.70062 -115.31116 -114.922486 -114.55107 -114.17824 -113.84429 -113.49708 -113.199715 -112.86894 -112.5301 -112.179215 -111.894226 -111.62845 -111.30242 -111.04644 -110.82126 -110.475174 -110.22944 -109.95705 -109.684075 -109.45418 -109.19247 -108.922036 -108.75282 -108.51993 -108.273796 -108.01258 -107.83031 -107.58179 -107.418206 -107.17087 -107.02442 -106.83963 -106.6046 -106.4151 -106.2452 -106.09633 -105.91623 -105.77238 -105.56534 -105.42328 -105.256714 -105.08964 -104.91674 -104.793175 -104.6999 -104.52343 -104.473656 -104.29983 -104.271195 -104.082436 -104.0039 -104.01284 -103.95853 -103.8583 -103.822365 -103.78028 -103.76162 -103.693726 -103.66789 -103.60902)) (quote (-30.781689 -30.854775 -31.051373 -31.121897 -31.392083 -31.654082 -31.984822 -32.27055 -32.564434 -32.865303 -33.41675 -33.770237 -34.506833 -34.880085 -35.225224 -35.62505 -36.029232 -36.37556 -36.656662 -37.077168 -37.51916 -37.92697 -38.44872 -38.832028 -39.3429 -39.784264 -40.24054 -40.803177 -41.277714 -41.77504 -42.35381 -42.88464 -43.41463 -43.97653 -44.488575 -45.081467 -45.67028 -46.195076 -46.757924 -47.183373 -47.670014 -48.23647 -48.71707 -49.325348 -49.87574 -50.429985 -50.954327 -51.470345 -52.20896 -52.67273 -53.218052 -53.74081 -54.239308 -54.794686 -54.89438 -55.324654 -55.74388 -56.173115 -56.690487 -57.147587 -57.51484 -57.67422 -58.111355 -58.43746 -58.57953 -59.121567 -59.26148 -59.55711 -59.688153 -59.682724 -59.899956 -59.78926 -59.674664 -59.591904 -59.362023 -58.952626 -58.646267 -58.31191 -57.89471 -57.45538 -56.85727 -56.39355 -55.6846 -55.007538 -54.44361 -53.613194 -52.725735 -52.10612 -51.29565 -50.373055 -49.55233 -48.709805 -47.79907 -46.97929 -46.13039 -45.26752 -44.305806 -43.49049 -42.637005 -41.866925 -41.037918 -40.07951 -39.232178 -38.50081 -37.66111 -36.854065 -36.07971 -35.155686 -34.799344 -33.845055 -33.052533 -32.03375 -31.305588 -30.795367 -30.033726 -29.473587 -28.92486 -28.254855 -27.592764 -26.998427 -26.46338 -26.010598 -25.469273 -24.895594 -24.45955 -23.960305 -23.62013 -23.15638 -22.666359 -22.30626 -21.93935 -21.654746 -21.25936 -20.981196 -20.739535 -20.410616 -20.034193 -19.894814 -19.62221 -19.461798 -19.263895 -19.032692 -18.786189 -18.627043 -18.375344 -18.207755 -18.048647 -17.883627 -17.676928 -17.486325 -17.399937 -17.215889 -17.066977 -16.944256 -16.773684 -16.578263 -16.45513 -16.317305 -16.27329 -16.154572 -15.96539 -15.7793045 -15.726955 -15.640664 -15.542395 -15.361003 -15.362407 -15.241737 -15.135803 -15.026287 -14.949345 -14.850637 -14.8018675 -14.701371 -14.625371 -14.5376625 -14.487414 -14.403113 -14.368564 -14.284276 -14.231683 -14.181352 -14.117015 -14.046026 -13.981792 -13.896971 -13.82744 -13.765161 -13.699253 -13.619345 -13.550496 -13.47632 -13.373627 -13.24955 -13.166399 -13.068721 -12.985821 -12.893504 -12.799865 -12.737307 -12.651311 -12.568283 -12.482553 -12.394602 -12.330393 -12.252786 -12.163894 -12.095091 -12.021835 -11.950347 -11.853932 -11.80847 -11.730017 -11.674507 -11.584914 -11.514482 -11.431472 -11.407593 -11.328471 -11.264235 -11.218775 -11.137443 -11.098806 -11.049507 -11.01292 -10.981032 -10.939815 -10.913833 -10.882698 -10.869073 -10.907899 -10.830079 -10.794391 -10.789759 -10.768489 -10.7582445 -10.74792 -10.753867 -10.736273 -10.73576 -10.71003 -10.714719 -10.723626 -10.720292)) (quote (130.7405 130.96643 131.69998 132.9962 133.64824 134.2056 135.06728 135.63648 136.06546 136.58759 137.44394 137.95874 138.87407 139.33054 139.72373 140.26766 140.62065 140.83835 141.58776 141.7498 142.0437 142.25035 142.55867 142.5331 142.85257 142.90056 143.13574 143.06192 143.08675 143.00078 143.11087 143.09894 143.00844 142.74605 142.52268 142.40053 142.0651 141.58428 141.17377 140.01309 139.2131 138.25679 137.51918 136.66504 135.62023 134.45999 133.42923 132.08951 130.53874 129.18268 127.78352 126.23096 124.635186 122.887146 121.01039 119.13168 117.271256 115.334275 113.49434 111.619866 109.363556 107.35942 105.25255 103.30185 101.15186 97.88214 95.54252 93.94799 91.989495 90.031975 88.26693 86.2789 84.0587 82.51649 80.35614 78.69143 75.64942 74.77789 72.85038 70.10905 69.269196 67.0722 66.15044 64.95172 63.63688 62.663205 62.695374 61.68951 61.2542 61.874287 61.744553 61.593445 61.67154 61.473835 61.7315 61.702362 61.577763 61.598965 61.624955 62.070698 62.210827 62.46733 62.769425 63.170617 63.475777 63.675663 63.89973 61.61715 65.542565 64.87917 64.39512 64.76417 65.04842 65.63639 65.49318 66.1996 66.438965 66.88895 66.70847 67.16336 67.50358 68.0414 68.52837 68.859375 69.27073 70.29262 70.81325 71.14245 71.05521 71.415665 71.74403 72.011 72.05671 72.293755 72.474686 73.45291 73.88012 73.71815 73.900215 73.97336 73.974175 74.22281 74.37767 74.45096 74.60638 74.69099 75.10627 75.13398 75.39282 75.55768 75.97757 76.02099 76.23057 76.68967 76.79627 77.012596 77.39219 77.64391 78.14596 78.510826 78.73997 78.91185 79.31292 79.59921 79.81206 79.99798 80.5426 80.80245 81.25081 81.34768 81.68029 82.039696 82.39098 82.45208 82.814965 82.880135 83.52251 83.78416 84.108635 84.454506 84.78691 85.10222 85.42258 85.66724 85.88407 86.19533 86.36568 86.56494 86.86566 87.10948 87.35178 87.67188 87.79013 87.98262 88.29366 88.58992 88.77296 89.12063 89.39323 89.57069 89.86506 90.11342 90.3799 90.58978 90.88868 91.0087 91.40651 91.62163 91.786316 91.96921 92.21311 92.39576 92.59746 92.76361 93.02949 93.17275 93.35775 93.530175 93.653565 93.8823 94.05129 94.25852 94.281876 94.51253 94.66477 94.85974 95.04767 95.10483 95.35928 95.39567 95.37217 95.72538 95.80982 95.93142 96.12616 96.24409 96.36114 96.46387 96.50588 96.64628 96.78401 96.85417 97.01198 97.03185)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list 130.7405 130.96643 131.69998 132.9962 133.64824 134.2056 135.06728 135.63648 136.06546 136.58759 137.44394 137.95874 138.87407 139.33054 139.72373 140.26766 140.62065 140.83835 141.58776 141.7498 142.0437 142.25035 142.55867 142.5331 142.85257 142.90056 143.13574 143.06192 143.08675 143.00078 143.11087 143.09894 143.00844 142.74605 142.52268 142.40053 142.0651 141.58428 141.17377 140.01309 139.2131 138.25679 137.51918 136.66504 135.62023 134.45999 133.42923 132.08951 130.53874 129.18268 127.78352 126.23096 124.635186 122.887146 121.01039 119.13168 117.271256 115.334275 113.49434 111.619866 109.363556 107.35942 105.25255 103.30185 101.15186 97.88214 95.54252 93.94799 91.989495 90.031975 88.26693 86.2789 84.0587 82.51649 80.35614 78.69143 75.64942 74.77789 72.85038 70.10905 69.269196 67.0722 66.15044 64.95172 63.63688 62.663205 62.695374 61.68951 61.2542 61.874287 61.744553 61.593445 61.67154 61.473835 61.7315 61.702362 61.577763 61.598965 61.624955 62.070698 62.210827 62.46733 62.769425 63.170617 63.475777 63.675663 63.89973 61.61715 65.542565 64.87917 64.39512 64.76417 65.04842 65.63639 65.49318 66.1996 66.438965 66.88895 66.70847 67.16336 67.50358 68.0414 68.52837 68.859375 69.27073 70.29262 70.81325 71.14245 71.05521 71.415665 71.74403 72.011 72.05671 72.293755 72.474686 73.45291 73.88012 73.71815 73.900215 73.97336 73.974175 74.22281 74.37767 74.45096 74.60638 74.69099 75.10627 75.13398 75.39282 75.55768 75.97757 76.02099 76.23057 76.68967 76.79627 77.012596 77.39219 77.64391 78.14596 78.510826 78.73997 78.91185 79.31292 79.59921 79.81206 79.99798 80.5426 80.80245 81.25081 81.34768 81.68029 82.039696 82.39098 82.45208 82.814965 82.880135 83.52251 83.78416 84.108635 84.454506 84.78691 85.10222 85.42258 85.66724 85.88407 86.19533 86.36568 86.56494 86.86566 87.10948 87.35178 87.67188 87.79013 87.98262 88.29366 88.58992 88.77296 89.12063 89.39323 89.57069 89.86506 90.11342 90.3799 90.58978 90.88868 91.0087 91.40651 91.62163 91.786316 91.96921 92.21311 92.39576 92.59746 92.76361 93.02949 93.17275 93.35775 93.530175 93.653565 93.8823 94.05129 94.25852 94.281876 94.51253 94.66477 94.85974 95.04767 95.10483 95.35928 95.39567 95.37217 95.72538 95.80982 95.93142 96.12616 96.24409 96.36114 96.46387 96.50588 96.64628 96.78401 96.85417 97.01198 97.03185))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-103.60902 -103.631966 -103.63863 -103.64635 -103.64824 -103.618164 -103.66723 -103.70467 -103.694886 -103.76975 -103.857 -103.840035 -103.859505 -103.91734 -104.001854 -104.05937 -104.09511 -104.15155 -104.203896 -104.26958 -104.32435 -104.36605 -104.42635 -104.50043 -104.570366 -104.77273 -104.83499 -104.90914 -105.01746 -105.18024 -105.234406 -105.38644 -105.52937 -105.67888 -105.82878 -106.032074 -106.08653 -106.344605 -106.53412 -106.64969 -106.90274 -107.1059 -107.27047 -107.47614 -107.64619 -107.933625 -108.13906 -108.37503 -108.551545 -108.82132 -109.043885 -109.29492 -109.64001 -109.867424 -110.2555 -110.57291 -110.84628 -111.21906 -111.605355 -112.053154 -112.514824 -112.867066 -113.39482 -113.83033 -114.36082 -114.795845 -115.30554 -115.81085 -116.38377 -116.895066 -117.42983 -118.04961 -118.66009 -119.32285 -119.84938 -120.538285 -121.2467 -121.960305 -122.671425 -123.405 -124.22686 -125.01296 -125.77579 -126.546295 -127.395615 -128.17685 -129.07942 -129.9489 -130.85416 -131.6966 -132.60367 -133.54129 -134.44678 -135.44818 -136.29056 -137.2618 -138.1386 -139.045 -139.89579 -140.81253 -141.47374 -142.24605 -143.0871 -143.83058 -144.46347 -145.10009 -145.69203 -146.10457 -146.58716 -147.09946 -147.42021 -147.65644 -147.48847 -147.6055 -147.45034 -147.40528 -147.25962 -147.24512 -147.0015 -146.58307 -146.31714 -146.06702 -145.49817 -145.04819 -144.58324 -143.99117 -143.3631 -142.73693 -141.54447 -140.78768 -139.91236 -139.30301 -138.15448 -137.1275 -136.37038 -135.9726 -135.05619 -135.04402 -134.24813 -133.30828 -132.59214 -131.80196 -130.9405 -130.19812 -129.32302 -128.39176 -127.61516 -126.660225 -125.64236 -124.9205 -123.74611 -122.88465 -121.73945 -120.742165 -119.68812 -118.47042 -117.12856 -115.76642 -114.59473 -113.03861 -111.913246 -110.601555 -109.33242 -107.909096 -105.78482 -104.4705 -102.972275 -101.61185 -100.10106 -98.78417 -97.09091 -95.64505 -94.0955 -92.603455 -91.17845 -89.326775 -87.93222 -86.44569 -85.122666 -83.849915 -82.60906 -81.20964 -80.67975 -78.84854 -78.12898 -77.07571 -75.71639 -75.209656 -74.54597 -73.56037 -72.69753 -72.43745 -71.422066 -71.01541 -70.38699 -70.161965 -69.111595 -69.23122 -68.3031 -67.9358 -67.6981 -67.12217 -66.5276 -66.48076 -65.798806 -65.62653 -65.204476 -64.86605 -64.63904 -64.31697 -64.073845 -63.87712)) (quote (-10.720292 -10.741917 -10.722183 -10.730704 -10.703548 -10.721984 -10.720531 -10.725649 -10.746173 -10.727604 -10.7204 -10.730821 -10.759422 -10.724544 -10.736929 -10.717101 -10.723224 -10.700882 -10.698235 -10.685929 -10.659247 -10.65837 -10.649714 -10.643884 -10.644653 -10.603447 -10.619346 -10.623721 -10.613834 -10.593939 -10.597099 -10.591128 -10.584394 -10.593762 -10.611266 -10.573701 -10.6092205 -10.611804 -10.636157 -10.671153 -10.677531 -10.737426 -10.791272 -10.838727 -10.885176 -10.947157 -11.019554 -11.086024 -11.136506 -11.234002 -11.300322 -11.398234 -11.47225 -11.577177 -11.658474 -11.793055 -11.904007 -12.013315 -12.104023 -12.229268 -12.32233 -12.475816 -12.625828 -12.741325 -12.859085 -12.999252 -13.114203 -13.2560835 -13.354302 -13.45989 -13.618298 -13.795225 -13.907542 -14.079269 -14.247756 -14.3694105 -14.542809 -14.751037 -14.899526 -15.125101 -15.358032 -15.54097 -15.728242 -15.942395 -16.17455 -16.369469 -16.57911 -16.836676 -17.062729 -17.322436 -17.560309 -17.8137 -18.139384 -18.426136 -18.751542 -19.094857 -19.476075 -19.866368 -20.18896 -20.554854 -20.9567 -21.129326 -21.569005 -21.95554 -22.451987 -22.936329 -23.384768 -23.896235 -24.436804 -24.98117 -25.51259 -26.125723 -26.75964 -27.394509 -28.066428 -28.75365 -29.430115 -30.053015 -30.776108 -31.47235 -32.19471 -32.910546 -33.676964 -34.402504 -35.125836 -35.890145 -36.61749 -37.455487 -38.224713 -39.0338 -39.825478 -40.53169 -40.94695 -42.243283 -42.974186 -43.090863 -43.861168 -44.850373 -45.620343 -46.42395 -47.065857 -47.738903 -48.47269 -49.097756 -49.80474 -50.514695 -51.18931 -51.86624 -52.54962 -53.058167 -53.8159 -54.327038 -55.08643 -55.60244 -56.178536 -56.772004 -57.40138 -57.962197 -58.490086 -58.997723 -59.52235 -60.012024 -60.484356 -61.140614 -61.619084 -61.770127 -62.388745 -62.736847 -63.11018 -63.396248 -63.71127 -63.988736 -64.23501 -64.48025 -64.69227 -64.8573 -65.05373 -65.20991 -65.32749 -65.44285 -65.53615 -65.53436 -65.59562 -65.66126 -65.598145 -65.62257 -65.71723 -65.6195 -65.66746 -65.58718 -65.70845 -65.58622 -65.447876 -65.42271 -65.35376 -65.362725 -65.15956 -65.213425 -65.00252 -64.94308 -64.905136 -64.760666 -64.58341 -64.52269 -64.518 -64.361016 -64.28965 -64.15556 -64.04841 -63.952324 -63.858975 -63.747216)) (quote (97.03185 97.24629 97.33858 97.43898 97.75792 97.63517 97.76571 97.89162 98.077484 98.17799 98.37174 98.43798 98.5133 98.727906 98.87742 99.063126 99.19924 99.341095 99.50207 99.53926 99.638 99.78218 99.83909 99.99514 100.11131 100.368004 100.52198 100.54302 100.73591 100.87282 100.98741 101.28045 101.30934 101.49961 101.553536 101.7686 101.92896 102.12131 102.31422 102.495186 102.766686 102.965065 103.33825 103.41776 103.63798 103.854836 103.98866 104.12824 104.112015 104.17765 104.22815 104.40888 104.55606 104.6676 104.887215 105.02023 105.1308 105.43678 105.714424 105.93729 106.09384 106.23406 106.34953 106.22487 106.1956 105.95989 105.69428 105.35332 104.96031 104.48352 103.958245 103.59693 102.97923 102.572365 101.887925 101.50886 100.917435 100.49486 99.891136 99.31285 98.749245 98.18839 97.35533 96.52366 95.72133 94.41929 93.28394 92.07128 90.73372 89.23873 87.70526 86.349396 84.72517 83.74862 82.7062 81.79283 80.86305 79.899025 78.76503 77.80656 76.69304 75.22568 74.46826 73.71842 72.77505 72.11782 71.3667 70.181595 69.219475 68.397446 67.59652 66.887474 65.03156 64.190056 62.389965 61.48298 60.42908 59.662697 58.611367 57.486626 56.592534 54.1864 55.063153 54.077366 51.652218 50.538853 49.788727 49.103398 52.627453 52.31082 51.51427 50.853146 46.568005 49.93623 50.05128 45.943154 45.73948 44.66927 44.538105 44.383423 44.694874 44.70628 44.75934 44.96423 45.114178 45.12254 45.313336 45.528416 45.712918 46.027165 46.223687 46.49711 46.36883 46.594445 46.46301 46.53533 46.547383 45.944615 45.991364 46.326397 46.09213 45.982003 45.993306 45.228264 45.40226 46.20627 45.74867 45.65397 46.042805 46.158245 46.51288 46.990277 47.263184 47.590554 48.12709 48.036522 48.380074 49.208573 49.877472 50.539223 51.241486 51.964966 51.60604 53.255406 53.393494 53.93895 54.782677 54.97224 54.96985 55.68451 55.968617 55.97716 56.99786 57.16969 57.32522 57.15759 57.771794 57.163002 57.932827 57.536602 57.461945 57.290223 57.5591 57.00877 56.362816 56.059464 55.918297 55.457154 55.04144 54.856247 54.47216 54.415207)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list 97.03185 97.24629 97.33858 97.43898 97.75792 97.63517 97.76571 97.89162 98.077484 98.17799 98.37174 98.43798 98.5133 98.727906 98.87742 99.063126 99.19924 99.341095 99.50207 99.53926 99.638 99.78218 99.83909 99.99514 100.11131 100.368004 100.52198 100.54302 100.73591 100.87282 100.98741 101.28045 101.30934 101.49961 101.553536 101.7686 101.92896 102.12131 102.31422 102.495186 102.766686 102.965065 103.33825 103.41776 103.63798 103.854836 103.98866 104.12824 104.112015 104.17765 104.22815 104.40888 104.55606 104.6676 104.887215 105.02023 105.1308 105.43678 105.714424 105.93729 106.09384 106.23406 106.34953 106.22487 106.1956 105.95989 105.69428 105.35332 104.96031 104.48352 103.958245 103.59693 102.97923 102.572365 101.887925 101.50886 100.917435 100.49486 99.891136 99.31285 98.749245 98.18839 97.35533 96.52366 95.72133 94.41929 93.28394 92.07128 90.73372 89.23873 87.70526 86.349396 84.72517 83.74862 82.7062 81.79283 80.86305 79.899025 78.76503 77.80656 76.69304 75.22568 74.46826 73.71842 72.77505 72.11782 71.3667 70.181595 69.219475 68.397446 67.59652 66.887474 65.03156 64.190056 62.389965 61.48298 60.42908 59.662697 58.611367 57.486626 56.592534 54.1864 55.063153 54.077366 51.652218 50.538853 49.788727 49.103398 52.627453 52.31082 51.51427 50.853146 46.568005 49.93623 50.05128 45.943154 45.73948 44.66927 44.538105 44.383423 44.694874 44.70628 44.75934 44.96423 45.114178 45.12254 45.313336 45.528416 45.712918 46.027165 46.223687 46.49711 46.36883 46.594445 46.46301 46.53533 46.547383 45.944615 45.991364 46.326397 46.09213 45.982003 45.993306 45.228264 45.40226 46.20627 45.74867 45.65397 46.042805 46.158245 46.51288 46.990277 47.263184 47.590554 48.12709 48.036522 48.380074 49.208573 49.877472 50.539223 51.241486 51.964966 51.60604 53.255406 53.393494 53.93895 54.782677 54.97224 54.96985 55.68451 55.968617 55.97716 56.99786 57.16969 57.32522 57.15759 57.771794 57.163002 57.932827 57.536602 57.461945 57.290223 57.5591 57.00877 56.362816 56.059464 55.918297 55.457154 55.04144 54.856247 54.47216 54.415207))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-63.87712 -63.6286 -63.55627 -63.391716 -63.224053 -63.059113 -62.922013 -62.77313 -62.7742 -62.732605 -62.73089 -62.625264 -62.72802 -62.774968 -62.91923 -62.97159 -63.153447 -63.30578 -63.434483 -63.695435 -63.99348 -64.340416 -64.77608 -65.38155 -66.07711 -66.869896 -67.86526 -68.94823 -70.19792 -71.605576 -73.24517 -74.983 -76.8446 -78.82861 -81.10251 -83.377495 -85.94604 -88.486275 -91.16328 -93.85061 -96.69723 -99.59635 -102.59602 -105.47379 -108.344185 -111.1904 -113.89028 -116.567406 -119.1353 -121.5916 -123.94433 -126.13327 -128.22193 -130.15345 -132.11022 -133.64766 -134.98097 -136.2947 -137.39754 -138.39966 -138.89554 -140.15433 -140.47365 -141.52495 -141.62961 -142.17296 -142.6022 -143.37354 -143.71826 -144.00135 -144.24085 -144.02727 -144.56342 -144.75734 -144.87487 -145.03069 -145.15065 -145.21692 -145.30083 -144.89809 -145.36827 -145.10002 -145.39885 -144.94998 -145.31572 -145.31302 -145.17302 -145.09375 -144.95331 -144.72542 -144.56893 -143.983 -143.32627 -143.61569 -143.65602 -143.41259 -143.2031 -142.38549 -142.44234 -141.96685 -141.23374 -141.01163 -140.1452 -139.55013 -138.88405 -138.08968 -137.41295 -136.44948 -135.46588 -134.42205 -133.27118 -131.92766 -130.56298 -129.17426 -127.60897 -125.89534 -124.16797 -122.241616 -120.28308 -118.15973 -116.009636 -113.63465 -111.20842 -108.683586 -106.05985 -103.2407 -100.40018 -97.57087 -94.45657 -91.4635 -88.25006 -85.06461 -81.89723 -78.781746 -75.569146 -72.411515 -69.29349 -66.209305 -63.486275 -60.675713 -58.01771 -55.418446 -52.962365 -50.635437 -48.38125 -46.209774 -44.015477 -42.06406 -40.209282 -38.33963 -36.638096 -35.152543 -33.53209 -31.961783 -30.691903 -29.286541 -28.023098 -26.818856 -25.7209 -24.89663 -23.858366 -23.020518 -22.093028 -21.256007 -20.383162 -19.499463 -18.779524 -18.026276 -17.239874 -16.509524 -15.838785 -15.172574 -13.913138 -13.364348 -12.644169 -12.219041 -11.741999 -11.167054 -10.6677885 -10.107702 -9.65782 -9.196621 -8.719757 -8.276497 -7.8413773 -7.400566 -7.066833 -6.557128 -6.194605 -5.829549 -5.547886 -5.288187 -5.007561 -4.7838225 -4.5271163 -4.346333 -4.20089 -3.9556918 -3.831255 -3.7038186 -3.6080478 -3.5531507 -3.511015 -3.4663227 -3.3868714 -3.3095186 -3.3244198)) (quote (-63.747216 -63.662793 -63.57909 -63.488644 -63.34692 -63.29449 -63.20755 -63.096566 -63.056874 -62.953476 -62.9629 -62.88397 -62.895806 -62.870106 -62.813084 -62.873848 -62.881817 -62.88693 -62.92068 -62.92603 -63.00882 -63.01509 -63.10519 -63.183087 -63.273194 -63.38102 -63.469078 -63.612786 -63.70398 -63.816643 -63.910145 -64.04255 -64.13946 -64.21319 -64.23521 -64.26423 -64.222 -64.15973 -64.10833 -63.951065 -63.733418 -63.45072 -63.103253 -62.695164 -62.193074 -61.650517 -61.058575 -60.322495 -59.502613 -58.66942 -57.69556 -56.70687 -55.685475 -54.663437 -53.72412 -53.039315 -51.959187 -51.023453 -50.18468 -49.48446 -48.667534 -48.01787 -47.362488 -46.793766 -46.266068 -45.737286 -45.3541 -45.003636 -44.635212 -44.38638 -44.203217 -43.980362 -43.804417 -43.69579 -43.52475 -43.439106 -43.37869 -43.301613 -43.32747 -43.23548 -43.189553 -43.14867 -43.17304 -43.145657 -43.38565 -43.35626 -43.52852 -43.665215 -43.83461 -44.091465 -44.235947 -44.31084 -44.491436 -44.722283 -45.33818 -45.658726 -45.989293 -46.265294 -46.538723 -46.99736 -47.556103 -48.05493 -48.68804 -49.263073 -49.89687 -50.613575 -51.372796 -52.14205 -52.877556 -53.669335 -54.422593 -55.266694 -56.05589 -56.88323 -57.64989 -58.435124 -59.2468 -60.050938 -60.799958 -61.55382 -62.179474 -62.873246 -63.5182 -64.09865 -64.52274 -65.02002 -65.480446 -65.870255 -66.24107 -66.49209 -66.74441 -67.098656 -67.09469 -67.22042 -67.14837 -67.11645 -66.99925 -66.8092 -66.6423 -66.29684 -66.105774 -65.7908 -65.45207 -65.10293 -64.69719 -64.2742 -63.817025 -63.37045 -62.92508 -62.439213 -61.96027 -61.574368 -60.933926 -60.317337 -59.92834 -59.515843 -59.047898 -58.594613 -58.137764 -57.626278 -57.209355 -56.781296 -56.346653 -55.970044 -55.628033 -55.307038 -54.969757 -54.658337 -54.36862 -54.070824 -53.851635 -53.605675 -53.278038 -53.11411 -52.912487 -52.800835 -52.727108 -52.549756 -52.503815 -52.405735 -52.44411 -52.439454 -52.477486 -52.544514 -52.617524 -52.731163 -52.88174 -53.03136 -53.209893 -53.396573 -53.6483 -53.88922 -54.187455 -54.466294 -54.78038 -55.147805 -55.541493 -55.922257 -56.367684 -56.819725 -57.27175 -57.809445 -58.32593 -58.8869 -59.342617 -59.765194 -59.944397)) (quote (54.415207 54.037068 53.867497 53.771756 53.785168 53.571354 53.567513 53.498673 53.31974 53.311985 53.18898 53.082375 52.76263 52.455677 52.17728 51.55843 51.08882 50.429154 49.76779 48.929566 47.995903 47.219384 46.41601 45.481156 44.463704 43.561707 42.58389 41.653897 40.88272 39.90275 39.40329 38.649235 37.69331 36.762448 35.4468 34.21314 32.88323 31.084647 29.382557 27.307003 25.08768 22.844229 20.324307 17.941239 15.377579 13.125749 11.560729 10.175933 8.875332 8.066031 7.62459 7.7770963 7.8349877 8.016024 8.815826 10.374819 10.424251 10.248692 10.251511 10.09364 10.871929 9.346006 10.191225 8.863483 9.780586 9.555668 9.331059 7.5773864 7.2563386 6.9111686 6.169937 7.013146 5.436212 4.844434 4.3963766 4.01546 3.7096718 3.5699282 3.5492077 4.637226 3.18967 5.243541 3.2770655 4.5906973 3.1027384 3.0038145 2.8384114 2.7342749 2.6496868 2.7872653 2.413156 0.9482126 3.6466308 1.1513566 2.112357 2.3267663 2.2580145 1.0098201 1.4600033 1.4749265 1.3405647 1.5893262 1.7786669 1.542692 1.525569 1.3547411 1.1506856 1.3579233 1.2806459 1.7044714 1.7856566 2.2654226 2.8027568 3.192606 3.9345968 4.8645606 5.811724 6.981885 8.349977 9.823559 11.306263 13.27242 15.0899725 17.238272 18.802433 21.032412 23.193114 25.908963 28.556796 31.191674 33.946534 37.42338 39.341633 42.519165 44.574707 47.259648 49.98954 52.954068 55.1009 57.977234 60.85447 63.176396 65.43564 67.56383 69.72752 71.59359 73.41967 75.094956 76.75846 78.29894 79.64372 80.878296 82.00548 83.2415 84.43419 85.69656 86.83465 87.86526 88.84934 90.38906 91.36401 92.30601 93.294136 94.26842 95.15979 95.920426 96.62153 97.42947 98.157006 97.874794 98.36213 98.94401 100.252594 100.71764 101.37073 101.85528 102.12364 102.57987 102.880036 103.28964 103.54805 103.82096 104.160034 104.47745 104.67395 104.84927 105.09615 105.42234 105.52025 105.599556 105.663895 105.59741 105.715805 105.57566 105.64133 105.52631 105.61284 105.65512 105.58809 105.53475 105.36705 105.367676 105.16925 104.96662 103.56396 103.03263 102.887146)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 54.415207 54.037068 53.867497 53.771756 53.785168 53.571354 53.567513 53.498673 53.31974 53.311985 53.18898 53.082375 52.76263 52.455677 52.17728 51.55843 51.08882 50.429154 49.76779 48.929566 47.995903 47.219384 46.41601 45.481156 44.463704 43.561707 42.58389 41.653897 40.88272 39.90275 39.40329 38.649235 37.69331 36.762448 35.4468 34.21314 32.88323 31.084647 29.382557 27.307003 25.08768 22.844229 20.324307 17.941239 15.377579 13.125749 11.560729 10.175933 8.875332 8.066031 7.62459 7.7770963 7.8349877 8.016024 8.815826 10.374819 10.424251 10.248692 10.251511 10.09364 10.871929 9.346006 10.191225 8.863483 9.780586 9.555668 9.331059 7.5773864 7.2563386 6.9111686 6.169937 7.013146 5.436212 4.844434 4.3963766 4.01546 3.7096718 3.5699282 3.5492077 4.637226 3.18967 5.243541 3.2770655 4.5906973 3.1027384 3.0038145 2.8384114 2.7342749 2.6496868 2.7872653 2.413156 0.9482126 3.6466308 1.1513566 2.112357 2.3267663 2.2580145 1.0098201 1.4600033 1.4749265 1.3405647 1.5893262 1.7786669 1.542692 1.525569 1.3547411 1.1506856 1.3579233 1.2806459 1.7044714 1.7856566 2.2654226 2.8027568 3.192606 3.9345968 4.8645606 5.811724 6.981885 8.349977 9.823559 11.306263 13.27242 15.0899725 17.238272 18.802433 21.032412 23.193114 25.908963 28.556796 31.191674 33.946534 37.42338 39.341633 42.519165 44.574707 47.259648 49.98954 52.954068 55.1009 57.977234 60.85447 63.176396 65.43564 67.56383 69.72752 71.59359 73.41967 75.094956 76.75846 78.29894 79.64372 80.878296 82.00548 83.2415 84.43419 85.69656 86.83465 87.86526 88.84934 90.38906 91.36401 92.30601 93.294136 94.26842 95.15979 95.920426 96.62153 97.42947 98.157006 97.874794 98.36213 98.94401 100.252594 100.71764 101.37073 101.85528 102.12364 102.57987 102.880036 103.28964 103.54805 103.82096 104.160034 104.47745 104.67395 104.84927 105.09615 105.42234 105.52025 105.599556 105.663895 105.59741 105.715805 105.57566 105.64133 105.52631 105.61284 105.65512 105.58809 105.53475 105.36705 105.367676 105.16925 104.96662 103.56396 103.03263 102.887146))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-3.3244198 -3.3616762 -3.4983774 -3.6045263 -3.9466422 -4.0524855 -4.985541 -5.0593295 -4.95408 -5.237839 -5.575493 -6.10884 -6.8128405 -7.5638127 -8.424415 -9.595422 -11.033562 -12.547382 -14.700029 -17.221957 -20.787404 -25.32815 -31.182318 -39.985016 -53.031525 -70.926895 -92.28484 -112.32464 -127.7635 -138.20285 -145.13404 -149.81255 -153.18323 -155.7022 -157.4339 -158.8995 -159.45978 -160.22063 -160.83269 -161.335 -161.6527 -161.96802 -162.3336 -162.50365 -162.76071 -162.97435 -163.13309 -162.93578 -163.38024 -163.50908 -163.62952 -163.67687 -163.75824 -163.79004 -163.91649 -163.92484 -163.95684 -163.97127 -164.03397 -164.05638 -164.03839 -163.99727 -163.98305 -163.92761 -163.89588 -163.81708 -163.65895 -163.67053 -163.66039 -163.51105 -163.4897 -163.41539 -163.34003 -163.2697 -163.2476 -163.1996 -163.09772 -163.05027 -162.99547 -162.90468 -162.90238 -162.89994 -162.85654 -162.87506 -162.86362 -162.86577 -162.88556 -162.88384 -162.90412 -162.90563 -162.96855 -162.97893 -162.97219 -162.99738 -162.97875 -163.01149 -163.03473 -163.14478 -163.17144 -163.17012 -163.1974 -163.14354 -163.22589 -163.25112 -163.25104 -163.28192 -163.30924 -163.34307 -163.39167 -163.48966 -163.51903 -163.56934 -163.6088 -163.63753 -163.64261 -163.6872 -163.7147 -163.73647 -163.76084 -163.76342 -163.82688 -163.92348 -163.87947 -163.95815 -163.98688 -163.99857 -164.06938 -164.03327 -164.0523 -164.07646 -164.10497 -164.15099 -164.10758 -164.13289 -164.14778 -164.23632 -164.22174 -164.21675 -164.19506 -164.21782 -164.25656 -164.26132 -164.25638 -164.30411 -164.28354 -164.27216 -164.26036 -164.29251 -164.30443 -164.34667 -164.35585 -164.41355 -164.43413 -164.42168 -164.46863 -164.45215 -164.4853 -164.53096 -164.58329 -164.61641 -164.65904 -164.7141 -164.73328)) (quote (-59.944397 -60.39244 -61.071583 -61.766755 -62.677857 -63.45941 -64.406 -65.214875 -65.95338 -66.87747 -67.81333 -68.82636 -69.93468 -71.05113 -72.20367 -73.45353 -74.66555 -75.94316 -77.27788 -78.60729 -79.98857 -81.30867 -82.610955 -83.79889 -84.84991 -85.48563 -85.62541 -85.13719 -84.17157 -82.94466 -81.48088 -80.05669 -78.57719 -77.20417 -75.83918 -74.58674 -73.391785 -72.37851 -71.32076 -70.3612 -69.27764 -68.330956 -67.63461 -66.78849 -66.13171 -65.48799 -64.953804 -64.29099 -63.926835 -63.53927 -63.100937 -62.739705 -62.47885 -62.198948 -62.01749 -61.787018 -61.606358 -61.465474 -61.304097 -61.166668 -61.07496 -60.93844 -60.83928 -60.761658 -60.651143 -60.58284 -60.489518 -60.41699 -60.277646 -60.237305 -60.1087 -60.056897 -59.986767 -59.89915 -59.818917 -59.654583 -59.596405 -59.50258 -59.501103 -59.334885 -59.250126 -59.202835 -59.14156 -59.07207 -58.94979 -58.87933 -58.84756 -58.77872 -58.70785 -58.621846 -58.56433 -58.4963 -58.383957 -58.351998 -58.289704 -58.285424 -58.194535 -58.076188 -58.07353 -58.02392 -58.03825 -58.03323 -57.976357 -57.93247 -57.887864 -57.900963 -57.89898 -57.910874 -57.894432 -57.912243 -57.807366 -57.909542 -57.927037 -57.9288 -57.92035 -57.97317 -57.961823 -57.96875 -58.030175 -58.083435 -58.110463 -58.071953 -58.069188 -58.181656 -58.16579 -58.180874 -58.130806 -58.23019 -58.261208 -58.231743 -58.271996 -58.315888 -58.320427 -58.359856 -58.367718 -58.325577 -58.397503 -58.464253 -58.49661 -58.438076 -58.50986 -58.525616 -58.525895 -58.512436 -58.54769 -58.55982 -58.59054 -58.611367 -58.62271 -58.620175 -58.64227 -58.5957 -58.611538 -58.633534 -58.69929 -58.703827 -58.680706 -58.657898 -58.679966 -58.69542 -58.701115 -58.706547 -58.7489)) (quote (102.887146 102.52339 101.95155 101.26581 100.300675 99.61283 99.27389 98.62952 98.842476 98.1881 97.64064 97.02063 96.505066 96.084114 95.745705 95.286476 94.67301 93.92734 92.58392 90.88118 88.323006 84.545456 79.65086 71.85265 59.59643 42.595166 21.75421 2.6238816 -12.176891 -22.007105 -28.088353 -31.89527 -34.06925 -35.886055 -36.524624 -37.22688 -36.738213 -36.922505 -37.02737 -37.295678 -36.51438 -36.601048 -36.843693 -36.394185 -36.31791 -36.2094 -36.112534 -35.24513 -35.994877 -35.97617 -36.07669 -36.282986 -36.270108 -36.61804 -36.853207 -36.88187 -37.08088 -37.18521 -37.535923 -37.69951 -37.81506 -37.979184 -37.98724 -38.077015 -37.97771 -38.08195 -37.98102 -37.870614 -37.90165 -37.723484 -37.735165 -37.524315 -37.51675 -37.32809 -37.471756 -36.92491 -37.01099 -36.786744 -36.709866 -36.286766 -36.2422 -36.15516 -35.912495 -35.986348 -35.74439 -35.856408 -35.620617 -35.58708 -35.66072 -35.43861 -35.616658 -35.428852 -35.288708 -35.3366 -35.16197 -35.229367 -34.957344 -34.894226 -34.961304 -34.819966 -34.812394 -34.703656 -34.764855 -34.73273 -34.587834 -34.604756 -34.584923 -34.66249 -34.819935 -34.845936 -34.719857 -34.98786 -35.038433 -35.029068 -35.004605 -35.313897 -35.38895 -35.33245 -35.29914 -35.43362 -35.703747 -35.786484 -35.708733 -35.950318 -35.94173 -35.97346 -35.854706 -36.00025 -36.016316 -35.8747 -36.00642 -36.155343 -35.928208 -35.90109 -36.008324 -35.987976 -36.087647 -36.11401 -36.014096 -35.83346 -35.970173 -36.03555 -35.902077 -35.948754 -35.91675 -35.62508 -35.533253 -35.643528 -35.589966 -35.743466 -35.639718 -35.628266 -35.643357 -35.45305 -35.43122 -35.310555 -35.348076 -35.362996 -35.440358 -35.30971 -35.26875 -35.275875 -35.38526)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 102.887146 102.52339 101.95155 101.26581 100.300675 99.61283 99.27389 98.62952 98.842476 98.1881 97.64064 97.02063 96.505066 96.084114 95.745705 95.286476 94.67301 93.92734 92.58392 90.88118 88.323006 84.545456 79.65086 71.85265 59.59643 42.595166 21.75421 2.6238816 -12.176891 -22.007105 -28.088353 -31.89527 -34.06925 -35.886055 -36.524624 -37.22688 -36.738213 -36.922505 -37.02737 -37.295678 -36.51438 -36.601048 -36.843693 -36.394185 -36.31791 -36.2094 -36.112534 -35.24513 -35.994877 -35.97617 -36.07669 -36.282986 -36.270108 -36.61804 -36.853207 -36.88187 -37.08088 -37.18521 -37.535923 -37.69951 -37.81506 -37.979184 -37.98724 -38.077015 -37.97771 -38.08195 -37.98102 -37.870614 -37.90165 -37.723484 -37.735165 -37.524315 -37.51675 -37.32809 -37.471756 -36.92491 -37.01099 -36.786744 -36.709866 -36.286766 -36.2422 -36.15516 -35.912495 -35.986348 -35.74439 -35.856408 -35.620617 -35.58708 -35.66072 -35.43861 -35.616658 -35.428852 -35.288708 -35.3366 -35.16197 -35.229367 -34.957344 -34.894226 -34.961304 -34.819966 -34.812394 -34.703656 -34.764855 -34.73273 -34.587834 -34.604756 -34.584923 -34.66249 -34.819935 -34.845936 -34.719857 -34.98786 -35.038433 -35.029068 -35.004605 -35.313897 -35.38895 -35.33245 -35.29914 -35.43362 -35.703747 -35.786484 -35.708733 -35.950318 -35.94173 -35.97346 -35.854706 -36.00025 -36.016316 -35.8747 -36.00642 -36.155343 -35.928208 -35.90109 -36.008324 -35.987976 -36.087647 -36.11401 -36.014096 -35.83346 -35.970173 -36.03555 -35.902077 -35.948754 -35.91675 -35.62508 -35.533253 -35.643528 -35.589966 -35.743466 -35.639718 -35.628266 -35.643357 -35.45305 -35.43122 -35.310555 -35.348076 -35.362996 -35.440358 -35.30971 -35.26875 -35.275875 -35.38526))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-164.73328 -164.74288 -164.7501 -164.7718 -164.83513 -164.8706 -164.9161 -164.939 -164.98326 -165.00048 -165.06061 -165.08254 -165.13799 -165.15346 -165.10742 -165.14328 -165.21376 -164.94783 -165.22154 -165.2499 -165.28002 -165.19243 -165.26467 -165.10456 -165.04901 -164.96779 -164.96538 -164.89408 -164.74808 -164.65921 -164.48812 -164.41564 -164.31798 -164.20368 -164.04538 -163.93642 -163.82868 -163.71833 -163.59009 -163.43805 -163.30043 -163.14014 -162.98224 -162.78726 -162.62982 -162.42263 -162.22249 -162.00482 -161.75424 -161.57308 -161.33841 -160.98763 -160.79299 -160.43094 -160.13636 -159.71302 -159.40978 -159.07572 -158.51827 -158.28044 -157.89855 -157.3423 -157.09857 -156.50583 -155.94892 -155.55663 -155.24623 -154.67505 -154.15349 -153.6985 -153.31089 -152.8519 -152.31809 -151.73726 -151.33444 -150.78699 -150.23123 -149.70438 -149.16501 -148.63858 -148.11734 -147.23857 -146.67157 -146.05344 -145.4963 -144.92548 -144.32003 -143.71898 -143.1357 -142.63149 -141.97965 -141.46999 -140.86809 -140.31256 -140.10375 -139.48633 -138.95357 -138.43604 -137.92276 -137.43366 -136.87409 -136.47859 -136.04602 -135.6744 -135.40085 -134.73583 -134.57222 -134.15515 -133.71773 -133.28754 -132.82222 -132.46791 -132.04613 -131.66919 -131.17621 -130.74083 -130.3497 -129.96335 -129.58551 -129.22777 -128.78249 -128.30139 -128.02867 -127.682045 -127.2302 -126.83902 -126.61324 -126.16625 -125.86568 -125.41501 -125.1036 -124.78766 -124.6089 -124.39096 -124.178475 -123.93052 -123.61982 -123.5522 -122.65476 -122.51607 -121.890656 -121.9967 -121.792786 -121.71768 -121.48377 -121.405205 -121.184845 -120.926094 -120.5559 -120.22592 -119.80994 -119.53815 -118.9838 -118.37659 -117.9872 -117.562775 -116.77839 -116.288994 -115.74752 -114.902405 -114.26621 -113.46295 -112.76026 -111.69343 -110.89016 -109.82015 -108.82449 -107.5133 -106.47323 -105.46554 -103.98585 -102.342354 -100.78128 -98.792855 -96.38339 -94.00934 -91.44997 -89.12211 -85.89177 -82.64202 -80.95603 -75.81175 -72.04561 -68.01875 -64.03784 -59.726902 -55.070103 -51.274647 -46.205735 -42.340817 -38.343304 -33.853333 -29.754389 -25.74536 -21.738659 -18.814743 -15.016945 -12.213402 -9.580962 -7.119505 -4.8559804 -2.7440656 -1.0049006 0.8905611 2.5325127 4.0962057 5.5272098 6.7806583 8.800577 9.934647 11.013277 11.939433 12.877056 14.411282 16.094803 16.076214 16.5922 18.497704 20.087847 21.219944 23.943959 25.735833 28.503668 32.30952 36.445473 42.23767 47.42578 58.654255 71.114174 83.99433 102.7245 116.88661 129.8722 139.27764 146.22368 151.57973 155.69446 158.69385 161.3433 163.64467 165.36917 166.72129 168.19387 169.4864 171.09029 171.7941 172.74114 173.27634 173.81746 174.2751 175.09732 175.82744 176.52448 176.77625 177.38007 178.01827 178.58893 179.16468 179.6908 -179.74068 -179.0377 -178.42917 -177.69094 -175.7189 -175.06244 -174.32155 -173.57125 -172.81383 -171.95992 -171.19997 -170.35497 -169.47037 -168.66649 -167.85602 -167.2296 -166.41867 -166.57106 -164.76607 -164.06815 -163.25695 -162.52993 -161.58866 -160.77336 -159.97893 -159.08744 -158.17531 -157.45627 -156.61277 -155.68633 -154.80643 -153.94335 -153.06948 -152.16855 -151.24678 -150.33693 -149.58483 -148.8752 -147.84735 -146.87889 -146.11682 -145.34194 -144.43584 -143.83992 -142.86263 -142.14167 -141.34076 -140.4457 -139.52074 -138.41126 -137.6483 -136.86112 -136.0748 -135.31226 -134.52573 -134.017 -133.16512 -132.48375 -131.72432 -131.0822 -129.9201 -129.58452 -129.05327 -128.25243 -127.66679 -126.45396 -126.27416 -125.62405 -124.97629 -124.33574 -123.70277 -122.989785 -122.455796 -121.85133 -121.33313 -120.65387 -120.26881 -119.683655 -119.14352 -118.698685 -118.24162 -117.9191 -117.505875 -117.0687 -116.665985 -116.42401 -116.0609 -115.81902 -115.3913 -114.88897 -114.703064 -114.43807 -113.991455 -113.7315 -113.38141 -113.269745 -112.86377 -112.93195 -112.541016 -112.39448 -111.99894 -112.04845 -111.78246 -111.54125 -111.37463 -111.52062 -111.089066 -111.11744 -111.009056 -110.85763 -110.68472 -110.580086 -110.58563 -110.58411 -110.65446 -110.59277 -110.597245 -110.6052 -110.63113 -110.65401 -110.726296 -110.82852 -110.84773 -110.743 -110.86513 -110.88095 -110.95031 -111.037896 -110.99505 -111.22741 -111.2072 -111.15376 -111.3451 -111.29523 -111.48554 -111.386025 -111.5175 -111.57105 -111.65578 -111.777664 -111.823555 -111.9344 -111.9918 -112.16357 -112.41443 -112.67417 -112.57218 -112.983826 -112.92977 -113.09352 -113.49758 -113.71132 -113.67406 -113.87615 -114.26054 -114.52168 -114.70808 -114.89864 -115.035065 -115.495835 -115.67863 -115.93038 -116.07926 -116.59903 -116.669876 -116.9878 -117.567826 -117.91306 -118.2067 -118.29535 -118.88564 -119.20313 -119.52876 -119.58387 -120.11922 -120.45709 -120.79293 -121.12986 -121.46222 -121.712906 -121.8157 -122.136925 -122.42991 -123.0804 -123.16279 -123.44524 -123.86886 -124.19911 -124.62648 -124.99783 -125.38446 -126.11662 -126.25277 -126.680535 -127.055 -127.4745 -127.89172 -128.51398 -128.62909 -128.94762 -129.5463 -129.95447 -130.09615 -130.70525 -130.85689 -131.4234 -131.60849 -132.18521 -132.63025 -132.82901 -133.25879 -133.57363 -133.85037 -134.10935 -134.28595 -134.54442 -134.75296 -134.8996 -135.14325 -135.19101 -135.30226 -135.45671 -135.55054 -135.63248 -135.74025 -135.6591 -135.8431 -135.85984 -135.89725 -135.98069 -135.9062 -135.99803 -136.15067 -136.16861 -136.21521 -136.17781 -136.19593 -136.13216 -136.13957 -136.18198 -136.16613 -136.04647 -136.07965 -136.10881 -135.99338 -135.99881 -135.83734 -135.76616 -135.57773 -135.58304 -135.56903 -135.40395 -135.39131 -135.32413 -135.15995 -135.1461 -134.94989 -134.82247 -134.75254 -134.59777 -134.49275 -134.53865 -134.42584 -134.37778 -134.18584 -134.18407 -134.01787 -133.9899 -134.0062 -133.97782 -133.91986 -133.84055 -133.86891 -133.84902 -133.80216 -133.75145 -133.8188 -133.75421 -133.99738 -133.95137 -133.91013 -134.06407 -134.11394 -134.16974 -134.2149 -134.43036 -134.47222 -134.58219 -134.7126 -134.83388 -134.93344 -135.02445 -135.1399 -135.26654 -135.31377 -135.51506 -135.82788 -135.81246 -135.90755 -136.16716 -136.2584 -136.30832 -136.45693 -136.57497 -136.73123 -136.86267 -137.02298 -137.1392 -137.1703 -137.3416 -137.50304 -137.65639 -137.69995 -137.83061 -137.8746 -137.90216 -138.03347 -138.10341 -138.14856 -138.30055 -138.38014 -138.41959 -138.43874 -138.60776 -138.64778 -138.66204 -138.78885 -138.80643 -138.82169 -138.87093 -138.91417 -138.96602 -138.93738 -139.0219 -138.98447 -138.97354 -138.9619 -138.96646 -138.91164 -138.79615 -138.73468 -138.75606 -138.66115 -138.55088 -138.51706 -138.40407 -138.33383 -138.26898 -138.22472 -138.1411 -138.13899)) (quote (-58.7489 -58.77007 -58.669674 -58.657917 -58.66035 -58.639954 -58.636475 -58.6149 -58.641968 -58.624974 -58.607514 -58.55521 -58.535668 -58.508366 -58.456723 -58.419903 -58.439106 -58.292504 -58.33555 -58.275063 -58.27592 -58.24552 -58.126954 -58.097027 -58.03994 -57.972607 -57.925423 -57.832238 -57.858178 -57.717904 -57.704434 -57.626427 -57.528523 -57.383088 -57.33703 -57.118798 -57.001465 -56.86642 -56.724358 -56.586377 -56.435067 -56.263363 -56.18581 -56.069245 -55.983868 -55.934754 -55.915474 -55.924305 -55.931378 -55.998978 -56.03295 -56.03539 -56.161972 -56.260804 -56.297554 -56.347996 -56.405926 -56.496796 -56.441372 -56.66053 -56.779206 -56.752243 -57.039494 -56.965954 -57.17766 -57.32888 -57.43466 -57.622193 -57.860573 -58.032818 -58.227353 -58.403214 -58.61476 -59.070218 -58.99113 -59.1706 -59.485856 -59.81831 -59.915356 -60.084328 -60.270668 -60.585438 -60.778138 -60.98008 -61.16471 -61.420685 -61.58582 -61.80581 -62.030884 -62.20955 -62.46733 -62.69751 -62.931378 -63.164456 -63.469105 -63.689392 -63.921364 -64.15978 -64.35065 -64.580506 -64.77637 -65.00314 -65.20206 -65.41365 -65.86432 -65.76554 -66.25235 -66.44324 -66.62291 -66.72599 -66.915306 -67.13066 -67.34121 -67.59641 -67.79714 -68.018715 -68.259415 -68.44881 -68.65761 -68.85283 -69.0527 -69.25238 -69.41824 -69.60448 -69.810074 -70.006096 -70.22327 -70.467865 -70.680046 -70.88368 -71.10307 -71.34878 -71.59893 -71.86781 -72.13833 -72.38456 -72.64925 -72.87803 -72.86173 -73.11664 -73.49485 -73.62386 -73.851036 -74.118615 -74.40898 -74.73508 -74.99321 -75.27061 -75.52434 -75.7975 -76.06855 -76.36466 -76.619515 -76.871346 -77.124855 -77.41998 -77.68213 -77.946396 -78.26885 -78.52454 -78.79935 -79.10996 -79.40542 -79.70187 -80.04147 -80.349655 -80.64824 -80.94112 -81.24595 -81.77735 -82.10778 -82.36765 -82.679756 -82.962235 -83.24477 -83.520516 -83.80967 -84.02599 -84.28108 -84.5353 -83.9557 -84.928925 -85.06842 -85.24183 -85.39454 -85.48471 -85.57614 -85.6474 -85.731224 -85.76297 -85.78152 -85.7836 -85.764824 -85.786606 -85.70662 -85.70284 -85.652275 -85.503975 -85.45366 -85.392716 -85.28665 -85.240136 -85.172325 -85.11928 -85.0584 -85.02964 -85.01517 -85.01202 -85.00101 -85.00843 -85.04325 -85.09754 -85.12756 -85.25442 -85.34981 -85.48697 -85.588196 -85.790406 -85.968346 -86.20452 -86.42171 -86.633766 -86.9034 -87.13864 -87.38712 -87.64383 -87.8953 -88.10997 -88.277336 -88.38899 -88.28971 -88.094666 -87.77486 -87.383316 -86.950554 -86.34291 -85.829926 -85.14559 -84.548416 -83.813965 -83.08471 -82.31284 -81.56545 -80.809365 -79.9656 -79.130936 -78.31838 -77.371666 -76.51261 -75.53997 -74.67946 -73.595375 -72.72141 -71.775215 -70.85828 -69.91742 -68.92855 -68.01309 -67.03113 -66.05316 -65.16643 -64.188614 -63.277867 -62.19603 -61.27555 -60.292504 -59.300507 -58.67562 -57.777974 -56.70287 -55.761555 -54.847657 -53.809666 -52.82943 -51.9233 -50.81146 -49.60265 -48.731827 -47.777806 -46.805912 -45.757805 -44.762753 -43.76598 -42.667538 -41.595513 -40.59808 -39.54367 -38.51154 -37.472657 -36.393483 -35.345166 -34.26645 -32.827515 -31.66172 -30.626566 -29.485865 -28.531 -27.445849 -26.310725 -25.339852 -24.253296 -23.30635 -22.361092 -21.135142 -20.482159 -19.357562 -18.222525 -16.826758 -15.159996 -13.795574 -12.648688 -11.925149 -10.445625 -9.998288 -9.092574 -8.007591 -6.943004 -5.8482013 -4.9279165 -5.288985 -2.9008417 -1.897496 -0.940237 0.033980582 -0.44674113 1.7628145 2.6819165 3.5185743 4.3158984 5.142442 5.9318285 6.70093 7.449813 8.140035 8.817627 9.4636755 10.167132 10.801794 11.390676 12.035057 12.554969 13.010378 13.624228 14.051246 14.519911 15.238393 15.332253 15.760906 16.367329 16.461075 16.991776 17.24958 17.537577 17.680069 17.947264 18.177432 18.186476 18.531813 18.686884 18.773848 18.718771 19.023245 19.138752 19.247961 19.00928 19.245236 19.258955 19.193469 19.069983 18.99919 18.87915 18.715897 18.589497 18.356907 18.092103 17.842284 17.47522 17.184149 16.742993 16.30154 15.927343 15.410789 14.901326 14.163644 13.572345 12.985945 12.229138 11.598841 10.846535 10.095667 9.289007 8.469676 7.578003 6.7723985 6.0107308 5.012584 4.072012 3.1168588 2.1878214 1.2833692 0.2783305 -0.9062231 -1.9241068 -3.0461438 -3.9594827 -5.024327 -6.135406 -7.1223254 -8.158135 -9.299629 -10.328711 -11.372133 -12.423214 -13.495093 -14.49264 -15.501168 -16.561606 -17.59428 -18.597317 -19.631966 -20.63096 -21.518946 -22.511342 -23.455609 -24.344347 -25.194405 -26.0125 -26.808108 -27.610844 -28.263733 -28.91967 -29.595995 -30.269499 -30.794047 -31.312397 -31.855463 -32.350987 -32.77607 -33.25687 -33.624073 -33.955903 -34.22676 -34.40726 -34.673817 -34.90077 -34.921086 -35.055935 -35.04749 -35.038124 -35.000866 -34.831238 -34.7554 -34.551255 -34.306523 -34.02817 -33.75139 -33.376927 -33.089745 -32.45319 -32.025078 -31.563517 -31.122057 -30.581198 -30.0852 -29.49468 -28.915719 -28.27579 -27.723338 -27.023503 -26.418808 -25.72768 -25.055483 -24.381913 -23.696072 -22.994914 -22.319224 -21.603608 -20.791686 -20.195855 -19.48297 -18.782406 -18.097493 -17.471823 -16.632922 -15.824168 -15.393972 -14.522269 -13.875821 -13.312474 -12.600382 -11.873568 -11.3309765 -10.736848 -10.161611 -9.395466 -8.859238 -8.367822 -7.748346 -7.242902 -6.782921 -6.3122993 -5.5246344 -5.0795603 -4.681391 -4.208652 -3.865729 -3.4603079 -3.0430239 -2.8231724 -2.4247547 -2.1955056 -1.8962695 -1.6476401 -1.4300919 -1.1400814 -1.0746428 -0.837404 -0.61083216 -0.57264734 -0.5206977 -0.45263615 -0.3254389 -0.3125927 -0.27199397 -0.23919219 -0.32248172 -0.38142824 -0.49398303 -0.4080943 -0.73734957 -0.7061188 -0.982549 -1.0841874 -1.3820683 -1.6170783 -1.8430779 -2.0283132 -2.2948783 -2.6054812 -2.8761988 -3.215531 -3.5903533 -3.9217198 -4.243841 -4.612509 -5.0758643 -5.412285 -5.8484793 -6.238458 -6.6643577 -7.131478 -7.549724 -8.066417 -8.458429 -8.863442 -9.373493 -9.865156 -10.568101 -10.969605 -11.42491 -11.845707 -12.352252 -12.672773 -13.181527 -13.597952 -14.108967 -14.489366 -14.826691 -15.1990795 -15.620852 -15.937141 -16.230219 -16.703356 -16.992154 -17.275937 -17.607495 -17.827477 -18.08127 -18.36644 -18.66217 -18.861683 -18.934382 -19.072653 -19.380652 -19.432423 -19.569314 -19.694157 -19.837687 -19.876322 -19.919749 -19.93082 -19.8921 -19.979807 -19.951212 -19.93038 -19.936013 -19.84047 -19.783207 -19.682333 -19.410895 -19.339213 -19.242066 -19.188982 -18.99049 -18.732785 -18.65174 -18.319838 -18.201874 -18.027436 -17.89588)) (quote (-35.38526 -35.43995 -35.20533 -35.17468 -35.22065 -35.161183 -35.1683 -35.08472 -35.094746 -35.047753 -35.004548 -34.833855 -34.686886 -34.569783 -34.21654 -34.00228 -34.039875 -32.939228 -33.65588 -33.476548 -33.449147 -32.997685 -33.01103 -32.772263 -32.86313 -32.65516 -32.834404 -33.07108 -33.12614 -33.40634 -33.599427 -33.79069 -34.091206 -34.163128 -34.328404 -34.39486 -34.55756 -34.489613 -34.43183 -34.578144 -34.417824 -34.258824 -34.19585 -34.270726 -34.413563 -34.57553 -34.9456 -35.803013 -36.15614 -36.901154 -37.520043 -38.040707 -38.491948 -38.93722 -39.337986 -39.578404 -39.72527 -40.038258 -40.288208 -40.674473 -40.889504 -41.03079 -41.582104 -41.62692 -42.226628 -42.62818 -43.202828 -44.15348 -44.069123 -44.824826 -45.43772 -45.96904 -46.4098 -47.44052 -47.57113 -47.964447 -48.325146 -49.03593 -49.25939 -49.508667 -49.85746 -50.175953 -50.505337 -50.611313 -50.820683 -51.03758 -51.26671 -51.47508 -51.718758 -51.90862 -52.205338 -52.67712 -53.007725 -53.396286 -54.592446 -54.90804 -55.48659 -56.050805 -56.62469 -57.220478 -57.64103 -58.417145 -58.88872 -59.43604 -60.65439 -60.16699 -61.582726 -62.077076 -62.52285 -63.344956 -63.958916 -64.743676 -65.42996 -66.267105 -66.90379 -67.74339 -68.57472 -69.37812 -70.17405 -70.97173 -71.526276 -72.08073 -72.7796 -73.405655 -74.00595 -74.64464 -75.51349 -76.21681 -77.13469 -77.930405 -78.83999 -79.93083 -81.203316 -82.55201 -83.803696 -85.05874 -86.163704 -87.67261 -89.29462 -90.39807 -90.29179 -92.06762 -92.910775 -93.82237 -94.40986 -95.70821 -96.063355 -96.446175 -96.75688 -97.04572 -97.02744 -97.217224 -96.83507 -96.60073 -96.37778 -96.314835 -95.5786 -95.37615 -95.08168 -94.30635 -93.83141 -93.15061 -92.65196 -91.67775 -91.05819 -89.96544 -88.91505 -87.62589 -86.65965 -86.16463 -84.69115 -82.7872 -81.08703 -78.9195 -76.25925 -73.63571 -70.89356 -68.3079 -64.88844 -61.504136 -58.799733 -54.253994 -50.256977 -46.103207 -41.972565 -37.448685 -32.829724 -29.008973 -23.935784 -20.241457 -16.33172 -12.014486 -8.186116 -4.523669 -0.8881693 1.6839982 5.21385 7.9447804 10.326746 12.599419 14.862146 16.90055 18.616953 20.487114 22.1157 23.720726 25.317986 26.806784 29.044281 30.491436 32.047448 33.600094 35.141068 37.23073 39.535794 40.652623 42.049176 44.51359 46.874733 48.94907 52.166287 55.002922 58.602547 63.23064 68.1612 74.68035 80.746735 92.623314 105.85789 119.62999 138.90282 153.74423 167.37409 177.58223 -174.88814 -168.98233 -164.24707 -160.69307 -157.31118 -154.28914 -151.83217 -149.93488 -147.83615 -145.89293 -143.40509 -142.14672 -140.6699 -139.69017 -138.76459 -137.86719 -136.43364 -135.56209 -134.31787 -133.68683 -132.61295 -131.51139 -130.6833 -129.84601 -129.20035 -128.56139 -127.619194 -126.9039 -125.722824 -120.40709 -119.43031 -118.28516 -116.97604 -115.27565 -113.82957 -112.46536 -110.974655 -109.255844 -107.73312 -106.239785 -103.849366 -102.4192 -102.26798 -99.57707 -98.45263 -97.04463 -95.78444 -94.21554 -92.98817 -91.53836 -90.19905 -88.457115 -87.09093 -85.687615 -83.86082 -82.11549 -80.52322 -78.97106 -76.31417 -74.50725 -72.74301 -71.383736 -70.184136 -67.72563 -66.586846 -64.77175 -63.059174 -61.332566 -60.607354 -57.804737 -56.099617 -54.43928 -52.35887 -49.603875 -46.449116 -43.03342 -40.72266 -40.38014 -36.68245 -35.642247 -33.65996 -31.308428 -29.380579 -27.730534 -26.068932 -30.61506 -22.72409 -19.953085 -19.28292 -17.023415 -22.19526 -14.145847 -13.074214 -11.904392 -10.686284 -9.402197 -7.872561 -6.513255 -5.536914 -4.1533203 -2.6947897 -1.2105957 0.28524166 1.5824294 2.824354 4.74464 6.3503323 7.4395027 9.031126 10.211055 11.885177 14.482776 14.197371 15.147674 16.844212 16.794493 18.673626 18.936985 19.559559 20.174975 20.850119 21.143332 21.42306 22.410717 23.148072 23.029879 22.85148 24.108473 24.034594 24.152014 23.785138 24.15859 24.718634 24.602829 24.5206 24.265746 24.334052 24.482535 24.8633 25.341267 25.326685 25.53821 25.702212 26.268326 26.359248 26.559515 26.76593 27.067908 26.819043 26.535153 26.418152 26.674685 26.517195 26.831074 26.764754 26.592314 26.4144 26.518994 26.233584 26.284873 26.447564 26.994545 26.959956 26.747975 26.547146 26.595622 26.738167 27.085047 27.21872 27.668166 28.736872 28.2724 29.155238 28.696482 28.889302 29.87524 29.441878 29.358323 29.41538 29.563517 29.903229 29.942629 29.496903 29.567297 29.599345 29.510312 29.073496 29.664422 29.65769 29.83824 29.915709 30.206709 30.592988 30.652699 30.811802 31.134457 31.229893 31.229716 31.147812 31.069697 30.977913 30.757569 30.457938 30.116555 29.791365 29.486128 29.143227 28.677683 28.276999 28.09108 27.619482 27.624794 27.238989 27.024502 26.669919 26.475184 26.253312 26.082678 25.858223 25.49707 25.206383 25.066084 25.090298 24.750132 25.257748 25.470522 25.429883 25.366089 25.656983 25.708544 26.038655 26.20715 26.753958 27.080985 27.56353 27.790387 27.943749 28.512236 28.96411 29.226418 29.704018 29.853123 29.95661 30.375546 30.347405 30.496493 30.515223 30.775387 30.616457 30.580267 31.251534 30.315995 31.881882 31.759316 31.689917 31.680037 31.8122 32.05224 32.29836 32.47976 32.6898 32.446587 32.57937 32.593327 33.0278 32.870308 32.64324 33.06322 33.052613 32.92381 33.348687 32.913735 33.13953 32.896195 32.799374 32.771607 32.773438 32.516068 32.938183 32.683918 32.751847 32.537835 32.402584 32.735314 32.475575 32.204792 32.42842 32.47538 32.534577 32.15885 32.16177 31.917143 31.625819 31.627699 31.928257 31.49845 31.569138 31.34614 31.651329 31.445313 31.501461 31.2635 31.275982 31.512259 31.191607 31.207142 31.47436 31.47986 31.151892 31.224955 31.342202 31.252429 31.379103 31.504712 31.307263 31.301733 31.250082 31.01002 31.02482 30.904553 31.07744 31.307484 30.857836 31.004355 31.194569 30.83201 30.585898 30.667674 30.75788 31.063042 31.033099 31.053175 31.186505 31.00868 31.002173 30.954472 30.84011 30.867436 30.930056 30.778512 30.506714 30.212952 30.295815 30.525094 30.167698 30.247464 30.057465 30.376709 30.231802 30.1516 30.298247 30.40279 30.266219 30.374335 30.65394 30.52885 30.528084 30.453593 30.33127 30.365097 30.392592 30.320244 30.543158 30.531653 30.585543 30.639296 30.542176 30.613492 30.350298 30.305928 30.570633 30.478114 30.622538 30.721966 30.654467 30.635157)) (quotequote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list -35.38526 -35.43995 -35.20533 -35.17468 -35.22065 -35.161183 -35.1683 -35.08472 -35.094746 -35.047753 -35.004548 -34.833855 -34.686886 -34.569783 -34.21654 -34.00228 -34.039875 -32.939228 -33.65588 -33.476548 -33.449147 -32.997685 -33.01103 -32.772263 -32.86313 -32.65516 -32.834404 -33.07108 -33.12614 -33.40634 -33.599427 -33.79069 -34.091206 -34.163128 -34.328404 -34.39486 -34.55756 -34.489613 -34.43183 -34.578144 -34.417824 -34.258824 -34.19585 -34.270726 -34.413563 -34.57553 -34.9456 -35.803013 -36.15614 -36.901154 -37.520043 -38.040707 -38.491948 -38.93722 -39.337986 -39.578404 -39.72527 -40.038258 -40.288208 -40.674473 -40.889504 -41.03079 -41.582104 -41.62692 -42.226628 -42.62818 -43.202828 -44.15348 -44.069123 -44.824826 -45.43772 -45.96904 -46.4098 -47.44052 -47.57113 -47.964447 -48.325146 -49.03593 -49.25939 -49.508667 -49.85746 -50.175953 -50.505337 -50.611313 -50.820683 -51.03758 -51.26671 -51.47508 -51.718758 -51.90862 -52.205338 -52.67712 -53.007725 -53.396286 -54.592446 -54.90804 -55.48659 -56.050805 -56.62469 -57.220478 -57.64103 -58.417145 -58.88872 -59.43604 -60.65439 -60.16699 -61.582726 -62.077076 -62.52285 -63.344956 -63.958916 -64.743676 -65.42996 -66.267105 -66.90379 -67.74339 -68.57472 -69.37812 -70.17405 -70.97173 -71.526276 -72.08073 -72.7796 -73.405655 -74.00595 -74.64464 -75.51349 -76.21681 -77.13469 -77.930405 -78.83999 -79.93083 -81.203316 -82.55201 -83.803696 -85.05874 -86.163704 -87.67261 -89.29462 -90.39807 -90.29179 -92.06762 -92.910775 -93.82237 -94.40986 -95.70821 -96.063355 -96.446175 -96.75688 -97.04572 -97.02744 -97.217224 -96.83507 -96.60073 -96.37778 -96.314835 -95.5786 -95.37615 -95.08168 -94.30635 -93.83141 -93.15061 -92.65196 -91.67775 -91.05819 -89.96544 -88.91505 -87.62589 -86.65965 -86.16463 -84.69115 -82.7872 -81.08703 -78.9195 -76.25925 -73.63571 -70.89356 -68.3079 -64.88844 -61.504136 -58.799733 -54.253994 -50.256977 -46.103207 -41.972565 -37.448685 -32.829724 -29.008973 -23.935784 -20.241457 -16.33172 -12.014486 -8.186116 -4.523669 -0.8881693 1.6839982 5.21385 7.9447804 10.326746 12.599419 14.862146 16.90055 18.616953 20.487114 22.1157 23.720726 25.317986 26.806784 29.044281 30.491436 32.047448 33.600094 35.141068 37.23073 39.535794 40.652623 42.049176 44.51359 46.874733 48.94907 52.166287 55.002922 58.602547 63.23064 68.1612 74.68035 80.746735 92.623314 105.85789 119.62999 138.90282 153.74423 167.37409 177.58223 -174.88814 -168.98233 -164.24707 -160.69307 -157.31118 -154.28914 -151.83217 -149.93488 -147.83615 -145.89293 -143.40509 -142.14672 -140.6699 -139.69017 -138.76459 -137.86719 -136.43364 -135.56209 -134.31787 -133.68683 -132.61295 -131.51139 -130.6833 -129.84601 -129.20035 -128.56139 -127.619194 -126.9039 -125.722824 -120.40709 -119.43031 -118.28516 -116.97604 -115.27565 -113.82957 -112.46536 -110.974655 -109.255844 -107.73312 -106.239785 -103.849366 -102.4192 -102.26798 -99.57707 -98.45263 -97.04463 -95.78444 -94.21554 -92.98817 -91.53836 -90.19905 -88.457115 -87.09093 -85.687615 -83.86082 -82.11549 -80.52322 -78.97106 -76.31417 -74.50725 -72.74301 -71.383736 -70.184136 -67.72563 -66.586846 -64.77175 -63.059174 -61.332566 -60.607354 -57.804737 -56.099617 -54.43928 -52.35887 -49.603875 -46.449116 -43.03342 -40.72266 -40.38014 -36.68245 -35.642247 -33.65996 -31.308428 -29.380579 -27.730534 -26.068932 -30.61506 -22.72409 -19.953085 -19.28292 -17.023415 -22.19526 -14.145847 -13.074214 -11.904392 -10.686284 -9.402197 -7.872561 -6.513255 -5.536914 -4.1533203 -2.6947897 -1.2105957 0.28524166 1.5824294 2.824354 4.74464 6.3503323 7.4395027 9.031126 10.211055 11.885177 14.482776 14.197371 15.147674 16.844212 16.794493 18.673626 18.936985 19.559559 20.174975 20.850119 21.143332 21.42306 22.410717 23.148072 23.029879 22.85148 24.108473 24.034594 24.152014 23.785138 24.15859 24.718634 24.602829 24.5206 24.265746 24.334052 24.482535 24.8633 25.341267 25.326685 25.53821 25.702212 26.268326 26.359248 26.559515 26.76593 27.067908 26.819043 26.535153 26.418152 26.674685 26.517195 26.831074 26.764754 26.592314 26.4144 26.518994 26.233584 26.284873 26.447564 26.994545 26.959956 26.747975 26.547146 26.595622 26.738167 27.085047 27.21872 27.668166 28.736872 28.2724 29.155238 28.696482 28.889302 29.87524 29.441878 29.358323 29.41538 29.563517 29.903229 29.942629 29.496903 29.567297 29.599345 29.510312 29.073496 29.664422 29.65769 29.83824 29.915709 30.206709 30.592988 30.652699 30.811802 31.134457 31.229893 31.229716 31.147812 31.069697 30.977913 30.757569 30.457938 30.116555 29.791365 29.486128 29.143227 28.677683 28.276999 28.09108 27.619482 27.624794 27.238989 27.024502 26.669919 26.475184 26.253312 26.082678 25.858223 25.49707 25.206383 25.066084 25.090298 24.750132 25.257748 25.470522 25.429883 25.366089 25.656983 25.708544 26.038655 26.20715 26.753958 27.080985 27.56353 27.790387 27.943749 28.512236 28.96411 29.226418 29.704018 29.853123 29.95661 30.375546 30.347405 30.496493 30.515223 30.775387 30.616457 30.580267 31.251534 30.315995 31.881882 31.759316 31.689917 31.680037 31.8122 32.05224 32.29836 32.47976 32.6898 32.446587 32.57937 32.593327 33.0278 32.870308 32.64324 33.06322 33.052613 32.92381 33.348687 32.913735 33.13953 32.896195 32.799374 32.771607 32.773438 32.516068 32.938183 32.683918 32.751847 32.537835 32.402584 32.735314 32.475575 32.204792 32.42842 32.47538 32.534577 32.15885 32.16177 31.917143 31.625819 31.627699 31.928257 31.49845 31.569138 31.34614 31.651329 31.445313 31.501461 31.2635 31.275982 31.512259 31.191607 31.207142 31.47436 31.47986 31.151892 31.224955 31.342202 31.252429 31.379103 31.504712 31.307263 31.301733 31.250082 31.01002 31.02482 30.904553 31.07744 31.307484 30.857836 31.004355 31.194569 30.83201 30.585898 30.667674 30.75788 31.063042 31.033099 31.053175 31.186505 31.00868 31.002173 30.954472 30.84011 30.867436 30.930056 30.778512 30.506714 30.212952 30.295815 30.525094 30.167698 30.247464 30.057465 30.376709 30.231802 30.1516 30.298247 30.40279 30.266219 30.374335 30.65394 30.52885 30.528084 30.453593 30.33127 30.365097 30.392592 30.320244 30.543158 30.531653 30.585543 30.639296 30.542176 30.613492 30.350298 30.305928 30.570633 30.478114 30.622538 30.721966 30.654467 30.635157))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-138.13899 -138.13689 -137.95185 -137.83884 -137.76937 -137.6683 -137.56955 -137.6055 -137.34786 -137.24065 -137.17189 -137.07056 -137.04093 -136.98618 -136.90436 -136.76898 -136.6832 -136.64009 -136.45552 -136.44762 -136.28139 -136.23708 -136.19203 -136.19298 -136.03601 -135.99587 -135.89966 -135.82459 -135.74399 -135.66506 -135.69802 -135.5094 -135.6211 -135.37992 -135.28444 -135.30342 -135.2738 -135.22277 -135.31761 -135.1864 -135.1587 -135.15038 -135.05402 -135.06455 -135.0409 -135.08469 -135.23087 -135.01714 -135.15349 -135.23734 -135.15679 -135.07212 -135.21379 -135.21637 -135.28043 -135.27686 -135.30573 -135.31175 -135.28992 -135.3906 -135.40453 -135.56325 -135.66382 -135.65579 -135.76683 -135.68791 -135.84754 -135.87995 -135.97208 -135.97911 -136.13898 -136.24594 -136.29268 -136.34561 -136.47769 -136.55821 -136.60572 -136.56203 -136.70732 -136.80635 -136.87955 -136.89444 -136.90772 -137.02173 -136.99437 -137.05846 -136.96588 -137.07572 -137.07674 -137.0259 -136.97834 -136.94345 -137.00833 -136.89539 -136.91776 -136.87789 -136.7982 -136.81327 -136.72788 -136.60837 -136.4997 -136.3918 -136.33216 -136.2694 -136.08805 -136.04346 -135.95725 -135.78725 -135.69004 -135.56276 -135.38855 -135.3285 -135.21558 -134.94849 -134.8889 -134.58193 -134.53582 -134.40624 -134.23755 -134.06021 -133.9018 -133.70745 -133.55025 -133.39583 -133.17772 -133.03624 -132.8639 -132.63928 -132.33829 -132.29682 -132.12198 -132.0053 -131.63964 -131.51432 -131.44309 -131.18862 -130.94145 -130.82238 -130.66332 -130.50656 -130.38205 -130.20589 -130.0784 -129.69774 -129.58353 -129.54164 -129.21977 -129.07779 -128.92806 -128.80059 -128.79183 -128.64527 -128.43587 -128.119 -127.94688 -127.80992 -127.63732 -127.90437 -127.75569 -127.342 -127.230675 -127.06178 -127.09358 -126.71581 -126.565796 -126.38037 -126.22347 -126.3136 -125.91822 -125.80335 -125.51367 -125.376305 -125.37121 -124.998795 -124.85248 -124.64306 -124.43627 -124.26446 -124.05488 -123.89156 -123.64161 -123.43522 -123.26096 -123.09809 -122.87525 -122.638726 -122.4735 -122.27012 -122.02372 -121.823075 -121.61447 -121.38835 -121.168946 -120.99654 -120.72387 -120.53625 -120.39095 -120.11188 -119.89941 -119.72298 -119.51942 -119.2525 -119.14332 -118.87528 -118.68072 -118.56072 -118.34956 -118.1705 -118.0129 -117.85585 -117.620056 -117.432625 -117.2318 -117.096566 -116.94223 -116.78691 -116.54629 -116.497506 -116.33328 -116.1421 -116.06285 -115.95139 -115.776 -115.64967 -115.5349 -115.43358 -115.28867 -115.156296 -115.095986 -115.03057 -114.92071 -114.824135 -114.725174 -114.63534 -114.58105 -114.59054 -114.479805 -114.47329 -114.401635 -114.35503 -114.33829 -114.24862 -114.33427 -114.25237 -114.24823 -114.17299 -114.11391 -114.10155 -114.03028 -114.0005 -113.96611 -113.866844 -113.7764 -113.74891 -113.70541 -113.561264 -113.31658 -113.19387 -113.065895 -112.925606 -112.80452 -112.67419 -112.46603 -112.35028 -112.13589 -111.99376 -111.8435 -111.58281 -111.48286)) (quote (-17.89588 -17.76428 -17.569298 -17.2219 -17.094696 -16.844189 -16.582745 -16.267018 -16.046099 -15.799587 -15.500288 -15.2548275 -15.083461 -14.830623 -14.490606 -14.263583 -13.940008 -13.796334 -13.430329 -12.99502 -12.989116 -12.58279 -12.550013 -12.140537 -12.197241 -11.774616 -11.585725 -11.640057 -11.260906 -10.962382 -10.857619 -10.811242 -10.63965 -10.479082 -10.390892 -10.313236 -10.226061 -10.127646 -10.12925 -10.138986 -10.013969 -10.001383 -10.039584 -10.028058 -10.217783 -10.179736 -10.225474 -10.170365 -10.31079 -10.413721 -10.473552 -10.566596 -10.705249 -10.91146 -10.956671 -11.088705 -11.1975765 -11.3754835 -11.582844 -11.729439 -11.87975 -12.164103 -12.350421 -12.533814 -12.697447 -13.115148 -13.212798 -13.637861 -13.845143 -13.817353 -14.283195 -14.556222 -14.695826 -15.081183 -15.159634 -15.449083 -15.671476 -15.923635 -16.240784 -16.428219 -16.662415 -16.867514 -17.080397 -17.350724 -17.59567 -17.864167 -18.028717 -18.300908 -18.494769 -18.716748 -18.868926 -19.073668 -19.310799 -19.442702 -19.67036 -19.88917 -19.965859 -20.229975 -20.396889 -20.453539 -20.75733 -20.899279 -21.013459 -21.14686 -21.273293 -21.437779 -21.517287 -21.607636 -21.795903 -21.902386 -22.015013 -22.0705 -22.262602 -22.303418 -22.493329 -22.587666 -22.696209 -22.7844 -22.912369 -22.991095 -23.045248 -23.224062 -23.278534 -23.39029 -23.433993 -23.573903 -23.6925 -23.768727 -23.824959 -23.949215 -24.115862 -24.174921 -24.242754 -24.30597 -24.532427 -24.53546 -24.675608 -24.779898 -24.886816 -24.972796 -25.069155 -25.194939 -25.297152 -25.445242 -25.544476 -25.649996 -25.769322 -25.912022 -25.980139 -26.139473 -26.269366 -26.359467 -26.525115 -26.6542 -26.759913 -26.91882 -27.017292 -27.38666 -27.485636 -27.69185 -27.79248 -27.989708 -28.086607 -28.292023 -28.442093 -28.594105 -28.81115 -28.914294 -29.135209 -29.246558 -29.462336 -29.59268 -29.820082 -29.980963 -30.218228 -30.372693 -30.579154 -30.758856 -30.96578 -31.113974 -31.33059 -31.556912 -31.731604 -31.91796 -32.085175 -32.320996 -32.44439 -32.655648 -32.846898 -33.052407 -33.26627 -33.47263 -33.664563 -33.84252 -34.05258 -34.216267 -34.44895 -34.59869 -34.75375 -34.983986 -35.149334 -35.342785 -35.52458 -35.73107 -35.90852 -36.053845 -36.27818 -36.49831 -36.67918 -36.927845 -37.138108 -37.38621 -37.573464 -37.79564 -38.004467 -38.252888 -38.502396 -38.693 -38.9134 -39.125046 -39.34873 -39.55993 -39.77221 -39.965168 -40.16975 -40.377453 -40.559716 -40.766568 -40.935547 -41.115014 -41.284066 -41.483647 -41.650555 -41.823777 -41.946598 -42.11361 -42.316834 -42.434185 -42.624665 -42.7918 -42.907578 -43.074864 -43.208588 -43.37098 -43.489315 -43.66031 -43.80982 -43.92377 -44.09481 -44.21521 -44.343525 -44.51751 -44.65679 -44.79009 -44.90988 -45.066258 -45.145615 -45.2955 -45.43821 -45.545536 -45.67179 -45.823693 -45.942257 -46.054593 -46.191006 -46.287953 -46.410813 -46.556813 -46.620106)) (quote (30.635157 30.61584 30.544436 30.763972 30.701693 30.251723 30.498023 30.480597 30.483813 30.317219 30.684477 30.33144 30.586441 30.598336 30.801405 30.723763 31.019707 30.738066 30.730797 30.873745 30.640997 30.832949 30.991822 30.886763 30.764336 30.897934 30.762396 30.696595 30.858138 31.003775 31.271624 30.75947 31.151165 30.95477 30.844985 30.879315 30.90651 30.939917 31.095509 30.778025 30.858639 30.965924 30.772852 30.794495 30.457785 30.78094 31.080952 30.89682 30.959115 31.226565 30.943406 30.784874 30.886712 30.95915 30.929924 30.891642 30.864354 30.676346 30.7061 30.855303 30.779002 30.857316 30.905779 30.81317 30.941243 30.754685 30.538554 30.541533 30.626393 30.601187 30.614172 30.864577 30.569144 30.446496 30.733157 30.455376 30.703204 30.375533 30.624918 30.573452 30.85089 30.727065 30.738089 30.740403 30.624508 30.55009 30.438357 30.372282 30.35624 30.281958 30.139903 30.12602 30.079878 30.056885 29.956276 29.601279 29.590405 29.578227 29.386668 29.409628 29.118756 28.960545 28.692933 28.727585 28.54235 28.472105 28.453536 28.204188 27.952546 27.834109 27.720837 27.69569 26.576386 27.112692 26.159659 26.664984 25.79383 25.667414 25.476958 25.365283 25.176697 24.92321 24.917845 24.433419 24.479208 24.360732 24.083895 24.121256 23.902852 23.71756 23.552216 23.477852 23.307433 23.320307 22.985682 23.045229 22.988278 22.822949 22.928229 22.78422 22.748299 22.776888 22.703719 22.50279 22.58912 22.326762 22.340804 22.244183 22.11599 22.183955 22.197865 22.170184 22.028702 22.001009 21.920023 21.855002 21.896864 21.07752 21.324107 21.087935 21.083495 21.073494 21.098696 20.97004 21.02551 21.115036 21.048399 21.265265 21.138184 21.225769 21.226695 21.28128 21.31238 21.422522 21.170632 21.455559 21.275227 21.52707 21.488833 21.957446 21.77741 22.196709 21.962082 22.504462 22.652289 22.877982 22.854956 22.82283 22.864638 22.715144 22.738429 22.784832 22.871165 22.980315 22.859469 22.99483 22.948565 23.010104 23.086697 22.96563 23.068846 23.092753 23.05822 23.131955 23.405529 23.75708 23.980759 24.4472 24.636776 24.965392 24.995186 25.133572 25.307637 25.657614 25.89517 26.17485 26.278489 26.586415 26.890339 27.132952 27.29949 27.474606 27.704764 27.938752 28.164843 28.321852 28.426905 28.436648 28.596064 28.769764 28.886788 29.086215 29.117344 29.060973 29.297518 29.221493 29.190409 29.227808 29.172532 29.187867 29.20823 29.211302 29.150542 29.132876 29.23595 29.120043 29.157479 29.068045 29.022736 28.98612 28.950119 28.887562 28.859847 28.905175 28.887248 28.745818 29.099272 28.981482 28.973633 29.035893 29.042328 29.005385 28.975646 29.035578 29.043543 29.009055 29.041489 28.869299 28.848652)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list 30.635157 30.61584 30.544436 30.763972 30.701693 30.251723 30.498023 30.480597 30.483813 30.317219 30.684477 30.33144 30.586441 30.598336 30.801405 30.723763 31.019707 30.738066 30.730797 30.873745 30.640997 30.832949 30.991822 30.886763 30.764336 30.897934 30.762396 30.696595 30.858138 31.003775 31.271624 30.75947 31.151165 30.95477 30.844985 30.879315 30.90651 30.939917 31.095509 30.778025 30.858639 30.965924 30.772852 30.794495 30.457785 30.78094 31.080952 30.89682 30.959115 31.226565 30.943406 30.784874 30.886712 30.95915 30.929924 30.891642 30.864354 30.676346 30.7061 30.855303 30.779002 30.857316 30.905779 30.81317 30.941243 30.754685 30.538554 30.541533 30.626393 30.601187 30.614172 30.864577 30.569144 30.446496 30.733157 30.455376 30.703204 30.375533 30.624918 30.573452 30.85089 30.727065 30.738089 30.740403 30.624508 30.55009 30.438357 30.372282 30.35624 30.281958 30.139903 30.12602 30.079878 30.056885 29.956276 29.601279 29.590405 29.578227 29.386668 29.409628 29.118756 28.960545 28.692933 28.727585 28.54235 28.472105 28.453536 28.204188 27.952546 27.834109 27.720837 27.69569 26.576386 27.112692 26.159659 26.664984 25.79383 25.667414 25.476958 25.365283 25.176697 24.92321 24.917845 24.433419 24.479208 24.360732 24.083895 24.121256 23.902852 23.71756 23.552216 23.477852 23.307433 23.320307 22.985682 23.045229 22.988278 22.822949 22.928229 22.78422 22.748299 22.776888 22.703719 22.50279 22.58912 22.326762 22.340804 22.244183 22.11599 22.183955 22.197865 22.170184 22.028702 22.001009 21.920023 21.855002 21.896864 21.07752 21.324107 21.087935 21.083495 21.073494 21.098696 20.97004 21.02551 21.115036 21.048399 21.265265 21.138184 21.225769 21.226695 21.28128 21.31238 21.422522 21.170632 21.455559 21.275227 21.52707 21.488833 21.957446 21.77741 22.196709 21.962082 22.504462 22.652289 22.877982 22.854956 22.82283 22.864638 22.715144 22.738429 22.784832 22.871165 22.980315 22.859469 22.99483 22.948565 23.010104 23.086697 22.96563 23.068846 23.092753 23.05822 23.131955 23.405529 23.75708 23.980759 24.4472 24.636776 24.965392 24.995186 25.133572 25.307637 25.657614 25.89517 26.17485 26.278489 26.586415 26.890339 27.132952 27.29949 27.474606 27.704764 27.938752 28.164843 28.321852 28.426905 28.436648 28.596064 28.769764 28.886788 29.086215 29.117344 29.060973 29.297518 29.221493 29.190409 29.227808 29.172532 29.187867 29.20823 29.211302 29.150542 29.132876 29.23595 29.120043 29.157479 29.068045 29.022736 28.98612 28.950119 28.887562 28.859847 28.905175 28.887248 28.745818 29.099272 28.981482 28.973633 29.035893 29.042328 29.005385 28.975646 29.035578 29.043543 29.009055 29.041489 28.869299 28.848652))) newobj))) (list "annotation" (list "performer on left side" "large circular movement" "-" "some other notes" "short gesture" "long gesture" "-" "-" "-" "-" "-" "-" "-" "-" "-" "")))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.5180149 -0.51818926 -0.51842785 -0.5186667 -0.51892674 -0.5192236 -0.5196335 -0.5199283 -0.520289 -0.52069504 -0.52114767 -0.5216576 -0.5222147 -0.5228272 -0.5235036 -0.5242257 -0.52500654 -0.5259272 -0.52686996 -0.5278544 -0.52875704 -0.5298295 -0.5309439 -0.53206456 -0.53322214 -0.53440655 -0.535583 -0.5368571 -0.53815967 -0.5394243 -0.5407968 -0.5422075 -0.54357946 -0.5450086 -0.5465127 -0.5480324 -0.54951346 -0.55108655 -0.55272246 -0.5543606 -0.5560205 -0.5577425 -0.5594462 -0.561199 -0.56296927 -0.5647668 -0.56657047 -0.5684029 -0.57021237 -0.5721111 -0.57403976 -0.5759909 -0.57796407 -0.5799987 -0.58207596 -0.58415807 -0.58626956 -0.5884282 -0.5905984 -0.59277606 -0.59499664 -0.59727967 -0.59956837 -0.6018707 -0.6042149 -0.60660857 -0.6089846 -0.6114413 -0.61394746 -0.61646986 -0.6189652 -0.6215443 -0.6241388 -0.62677336 -0.62942547 -0.6320819 -0.634663 -0.6372633 -0.63989467 -0.6424325 -0.6450272 -0.64756924 -0.6500632 -0.65253067 -0.6549417 -0.6572899 -0.65958596 -0.66181225 -0.66404057 -0.6661243 -0.6681273 -0.67011106 -0.6719689 -0.6738402 -0.6755151 -0.6770497 -0.67845446 -0.67974854 -0.68091715 -0.6818848 -0.6827506 -0.68340135 -0.6839417 -0.68427927 -0.68442137 -0.6843398 -0.6841071 -0.68367756 -0.6830471 -0.68221534 -0.6811528 -0.6798701 -0.67835135 -0.676566 -0.6745541 -0.6722779 -0.66976274 -0.66699654 -0.66397167 -0.6606936 -0.65715576 -0.6532586 -0.6492397 -0.6448733 -0.6403018 -0.63558084 -0.63049174 -0.62516696 -0.6196498 -0.61390704 -0.6079146 -0.6016678 -0.59521026 -0.588501 -0.5815592 -0.574372 -0.5669968 -0.5593951 -0.55153275 -0.5434726 -0.5351919 -0.52667314 -0.51792545 -0.5089432 -0.49976167 -0.49037358 -0.48078915 -0.47100338 -0.46101078 -0.4508253 -0.44045907 -0.42988673 -0.41915682 -0.40825143 -0.39716184 -0.38594893 -0.37458348 -0.36307648 -0.35142303 -0.33961853 -0.32771456 -0.31570297 -0.3035143 -0.29125205 -0.2788722 -0.2664153 -0.25385994 -0.24119462 -0.22845446 -0.21569819 -0.20289052 -0.1901056 -0.17732288 -0.164615 -0.1519732 -0.13946559 -0.12708144 -0.11487305 -0.102829196 -0.09101797 -0.07933748 -0.067823775 -0.056366738 -0.045322743 -0.034485858 -0.023695788 -0.013284841 -0.0031080759 0.006902947 0.016753674 0.02623978 0.035569705 0.04460958 0.05327327 0.061602235 0.06971898 0.077437885 0.08481916 0.09183341 0.098461494 0.104690425 0.110543564 0.11625414 0.1213306 0.12628334 0.13056235 0.13484666 0.13860037 0.14202795 0.1451021 0.1477833 0.1501073 0.15216623 0.15359397 0.15487758 0.15589611 0.1566473 0.15716912 0.15741885 0.15747339 0.15728054 0.156894 0.15630786 0.1555041 0.15458435 0.15346009 0.1521291 0.15062532 0.14897391 0.1472001 0.14530389 0.14328595 0.14115094 0.13893003 0.13661976 0.13422692 0.1317862 0.12928154 0.126715 0.124091715 0.12141509 0.11872332 0.115986586 0.1131505 0.11042551 0.107615024 0.10482643 0.10206208 0.09933101 0.09662197 0.094007194 0.09145969 0.088996686 0.08659758 0.08428313 0.08203551 0.07986848 0.07768965 0.07559615 0.07356283 0.071576536 0.06960747 0.06771613 0.0658806 0.06404047 0.062198706 0.06038371 0.05856293 0.056728956 0.05486759 0.05294696 0.050913733 0.048830994 0.046595056 0.044241157 0.04171547 0.03908675 0.036265225 0.033301965 0.030214295 0.026978685 0.02361235 0.020008592 0.016279087 0.01243074 0.008433347 0.0042675813 8.0492E-6 -0.004403597 -0.00895906 -0.013654805 -0.018492187 -0.023468882 -0.028703623 -0.034063235 -0.039543298 -0.04516473 -0.050905526 -0.05678878 -0.06279454 -0.068946265 -0.07528272 -0.08171139 -0.088295236 -0.093310736)) (quote (0.5026709 0.50330204 0.5041226 0.50495387 0.5058019 0.5066711 0.5075324 0.5084375 0.5093446 0.5102538 0.5111627 0.5120649 0.5129645 0.51385546 0.5147395 0.515614 0.5164737 0.51729686 0.5181204 0.5189251 0.519738 0.52051145 0.5212735 0.52201736 0.5227467 0.5234659 0.5239087 0.52468 0.5253969 0.52578545 0.526284 0.5268027 0.5272297 0.5276567 0.52810055 0.5284991 0.52874887 0.52903414 0.5293249 0.5295166 0.5296532 0.5297867 0.5298254 0.52984125 0.52976144 0.52963317 0.5294051 0.5290981 0.528643 0.52815295 0.52759064 0.5268922 0.5260741 0.5252093 0.52425355 0.5231686 0.5219679 0.52063466 0.51917375 0.5175657 0.515813 0.5139919 0.5119772 0.5098452 0.50755036 0.5051186 0.50245244 0.4997039 0.4967766 0.4936195 0.49024823 0.48670903 0.48298758 0.479081 0.4750057 0.4706515 0.46604136 0.46120572 0.45622355 0.45097363 0.44566268 0.43996912 0.43401364 0.42788038 0.42165905 0.41503003 0.40817818 0.4010898 0.39386773 0.38637394 0.37865192 0.370872 0.3628452 0.3547825 0.34644032 0.33784747 0.32903096 0.3200261 0.31084266 0.30149814 0.29200953 0.28238168 0.27264458 0.2627973 0.25285167 0.24281241 0.23270093 0.22251572 0.21226251 0.20196802 0.19162537 0.18126528 0.17089235 0.16052586 0.1501785 0.13987074 0.12963052 0.11946163 0.10939356 0.099452846 0.08965322 0.079984136 0.07051377 0.06120963 0.052111756 0.043250077 0.034591228 0.026167091 0.01800304 0.010112451 0.0024991383 -0.0048529077 -0.011898715 -0.01864955 -0.02509332 -0.03124103 -0.037040964 -0.042518806 -0.047677078 -0.052492388 -0.05695566 -0.061063506 -0.06482875 -0.06821625 -0.07124514 -0.07389343 -0.07617267 -0.078077175 -0.0796052 -0.08075238 -0.08151861 -0.08190627 -0.0819259 -0.08156506 -0.080854595 -0.07977298 -0.07833909 -0.07656671 -0.074445576 -0.07200284 -0.06923567 -0.06615995 -0.06278777 -0.059101504 -0.05514846 -0.050919705 -0.04642728 -0.041694437 -0.036717926 -0.031517275 -0.026098615 -0.02048157 -0.014667906 -0.0086534275 -0.00244216 0.003942838 0.010520777 0.017241057 0.024145164 0.031246609 0.03852257 0.045987156 0.053375986 0.061277818 0.06931402 0.07720586 0.0856524 0.09422702 0.1029567 0.11151816 0.120637566 0.12955697 0.1387723 0.14817383 0.15769914 0.16751322 0.1774885 0.18759756 0.19783524 0.20823555 0.21867922 0.22938235 0.23995652 0.2509295 0.26172024 0.27289718 0.28376085 0.29479957 0.30594406 0.3171022 0.32831055 0.33955985 0.35074312 0.36226815 0.373638 0.3849156 0.39610684 0.4072071 0.41833195 0.42932686 0.44020614 0.4509182 0.46152493 0.47198695 0.48230073 0.49244922 0.5024724 0.51231307 0.5219818 0.5314487 0.54071045 0.54972816 0.55860556 0.56724006 0.5756599 0.58385826 0.591842 0.599596 0.6071131 0.6144009 0.6214781 0.6283298 0.6349492 0.64123965 0.6474301 0.6532994 0.6589641 0.6644392 0.6697185 0.6748373 0.67970694 0.68416507 0.68869156 0.69291687 0.6970104 0.7009949 0.7048512 0.70867956 0.7123316 0.71600974 0.7194957 0.72272563 0.7258279 0.72876955 0.73171467 0.7345017 0.7371376 0.7396393 0.7419888 0.74416167 0.7461959 0.7479421 0.74970526 0.7511422 0.7524391 0.7536143 0.7546181 0.75546265 0.75617385 0.7567532 0.75720644 0.757521 0.75770224 0.7577653 0.7577067 0.7575269 0.7572474 0.75682515 0.7562898 0.7556448 0.75485975 0.7539642 0.7529356 0.751774 0.7504882 0.7490423 0.7474933 0.7457992 0.7439324 0.74195 0.7398229 0.73749614 0.7350387 0.7324344 0.7303855)) (quote (0.96449394 0.96484775 0.9653376 0.9658841 0.96649266 0.9671568 0.967894 0.9686921 0.969579 0.97056 0.97162927 0.972803 0.97406495 0.97545636 0.9769402 0.97851927 0.98021347 0.9820202 0.98392636 0.9859018 0.9879559 0.99012566 0.9923572 0.99463547 0.9969826 0.99937535 1.0016524 1.0041778 1.0067041 1.0090469 1.011499 1.0139891 1.0164157 1.0188402 1.0212956 1.0237186 1.0260388 1.028382 1.0307144 1.0329441 1.0350952 1.0372088 1.0391917 1.0410873 1.042868 1.0445231 1.0460465 1.047447 1.0486523 1.0497673 1.0507445 1.0515571 1.0521833 1.0526903 1.0530489 1.0532129 1.0531739 1.0529816 1.0525738 1.0519374 1.0511128 1.050073 1.0488083 1.0472838 1.0455403 1.0435636 1.041267 1.0387879 1.0360533 1.0330373 1.0297139 1.0261701 1.0223489 1.0183088 1.0140488 1.0095594 1.0047927 0.9998106 0.9946808 0.9892843 0.9837777 0.97799927 0.9719744 0.96580124 0.95949036 0.9529051 0.9461714 0.93924404 0.9322332 0.92500985 0.9176188 0.9102261 0.90267116 0.8951849 0.887497 0.879663 0.87173886 0.8637709 0.85570604 0.84753 0.83935625 0.8310652 0.8227732 0.8144093 0.8059829 0.79746855 0.7889242 0.78031117 0.7716602 0.7629577 0.7542188 0.7454371 0.73662496 0.72778327 0.7189426 0.7100767 0.7012245 0.6923715 0.6835237 0.67467255 0.66582925 0.65689105 0.64808536 0.6391868 0.6303141 0.62152815 0.6126479 0.6037708 0.5949178 0.5860819 0.5772107 0.56831337 0.5594399 0.550551 0.54167414 0.5327627 0.5238825 0.5149908 0.50605017 0.4971098 0.4881482 0.47916356 0.47016418 0.46114397 0.4521536 0.44313073 0.434124 0.4251441 0.41618612 0.40729365 0.3984389 0.38961762 0.38088062 0.37223387 0.36363983 0.35516363 0.34682402 0.33857858 0.3304733 0.32247815 0.31463182 0.30693832 0.29938033 0.2920106 0.28480834 0.2777908 0.27096948 0.26437512 0.2579607 0.25176272 0.24583836 0.24015314 0.23470722 0.22955653 0.22474043 0.22019261 0.21599193 0.21215964 0.20864041 0.20552667 0.20268989 0.20015201 0.19789012 0.19603315 0.1944592 0.19313576 0.19224371 0.19165671 0.19134532 0.1912881 0.19165175 0.19225994 0.1931921 0.19448285 0.19609164 0.19800793 0.2003262 0.20301962 0.20609819 0.20955859 0.2133345 0.21759205 0.22201982 0.2270407 0.23227906 0.23794429 0.24376537 0.25013345 0.25683665 0.26393107 0.2713883 0.279176 0.28729433 0.2959572 0.30483785 0.31397724 0.3234546 0.33315673 0.3431739 0.3534747 0.36400062 0.374795 0.3858359 0.39710265 0.408657 0.4204127 0.4324154 0.44459018 0.45692927 0.46944416 0.4821047 0.49489158 0.50778383 0.5208263 0.5339394 0.54711384 0.5603726 0.57368714 0.5870312 0.6004082 0.61380905 0.62721724 0.6406451 0.6541394 0.66752297 0.6809205 0.69423777 0.7074821 0.7206536 0.73379195 0.7467054 0.7595487 0.7721704 0.7846738 0.79701055 0.80916256 0.8211232 0.83285285 0.8444042 0.8558649 0.8671622 0.8782148 0.8890827 0.899754 0.91030086 0.9206584 0.9308243 0.9408047 0.95060897 0.9602649 0.9697304 0.97893757 0.9880562 0.99691815 1.0056231 1.0141268 1.0224587 1.0305885 1.0385314 1.0463039 1.053911 1.0613314 1.0686367 1.0757257 1.0826292 1.0893257 1.0958279 1.1021392 1.1082287 1.1141373 1.119834 1.1253326 1.13065 1.1358432 1.1408136 1.1456113 1.1502279 1.1546599 1.1588929 1.1629559 1.1668328 1.1704837 1.1739903 1.1773154 1.1796787)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list 0.96449394 0.96484775 0.9653376 0.9658841 0.96649266 0.9671568 0.967894 0.9686921 0.969579 0.97056 0.97162927 0.972803 0.97406495 0.97545636 0.9769402 0.97851927 0.98021347 0.9820202 0.98392636 0.9859018 0.9879559 0.99012566 0.9923572 0.99463547 0.9969826 0.99937535 1.0016524 1.0041778 1.0067041 1.0090469 1.011499 1.0139891 1.0164157 1.0188402 1.0212956 1.0237186 1.0260388 1.028382 1.0307144 1.0329441 1.0350952 1.0372088 1.0391917 1.0410873 1.042868 1.0445231 1.0460465 1.047447 1.0486523 1.0497673 1.0507445 1.0515571 1.0521833 1.0526903 1.0530489 1.0532129 1.0531739 1.0529816 1.0525738 1.0519374 1.0511128 1.050073 1.0488083 1.0472838 1.0455403 1.0435636 1.041267 1.0387879 1.0360533 1.0330373 1.0297139 1.0261701 1.0223489 1.0183088 1.0140488 1.0095594 1.0047927 0.9998106 0.9946808 0.9892843 0.9837777 0.97799927 0.9719744 0.96580124 0.95949036 0.9529051 0.9461714 0.93924404 0.9322332 0.92500985 0.9176188 0.9102261 0.90267116 0.8951849 0.887497 0.879663 0.87173886 0.8637709 0.85570604 0.84753 0.83935625 0.8310652 0.8227732 0.8144093 0.8059829 0.79746855 0.7889242 0.78031117 0.7716602 0.7629577 0.7542188 0.7454371 0.73662496 0.72778327 0.7189426 0.7100767 0.7012245 0.6923715 0.6835237 0.67467255 0.66582925 0.65689105 0.64808536 0.6391868 0.6303141 0.62152815 0.6126479 0.6037708 0.5949178 0.5860819 0.5772107 0.56831337 0.5594399 0.550551 0.54167414 0.5327627 0.5238825 0.5149908 0.50605017 0.4971098 0.4881482 0.47916356 0.47016418 0.46114397 0.4521536 0.44313073 0.434124 0.4251441 0.41618612 0.40729365 0.3984389 0.38961762 0.38088062 0.37223387 0.36363983 0.35516363 0.34682402 0.33857858 0.3304733 0.32247815 0.31463182 0.30693832 0.29938033 0.2920106 0.28480834 0.2777908 0.27096948 0.26437512 0.2579607 0.25176272 0.24583836 0.24015314 0.23470722 0.22955653 0.22474043 0.22019261 0.21599193 0.21215964 0.20864041 0.20552667 0.20268989 0.20015201 0.19789012 0.19603315 0.1944592 0.19313576 0.19224371 0.19165671 0.19134532 0.1912881 0.19165175 0.19225994 0.1931921 0.19448285 0.19609164 0.19800793 0.2003262 0.20301962 0.20609819 0.20955859 0.2133345 0.21759205 0.22201982 0.2270407 0.23227906 0.23794429 0.24376537 0.25013345 0.25683665 0.26393107 0.2713883 0.279176 0.28729433 0.2959572 0.30483785 0.31397724 0.3234546 0.33315673 0.3431739 0.3534747 0.36400062 0.374795 0.3858359 0.39710265 0.408657 0.4204127 0.4324154 0.44459018 0.45692927 0.46944416 0.4821047 0.49489158 0.50778383 0.5208263 0.5339394 0.54711384 0.5603726 0.57368714 0.5870312 0.6004082 0.61380905 0.62721724 0.6406451 0.6541394 0.66752297 0.6809205 0.69423777 0.7074821 0.7206536 0.73379195 0.7467054 0.7595487 0.7721704 0.7846738 0.79701055 0.80916256 0.8211232 0.83285285 0.8444042 0.8558649 0.8671622 0.8782148 0.8890827 0.899754 0.91030086 0.9206584 0.9308243 0.9408047 0.95060897 0.9602649 0.9697304 0.97893757 0.9880562 0.99691815 1.0056231 1.0141268 1.0224587 1.0305885 1.0385314 1.0463039 1.053911 1.0613314 1.0686367 1.0757257 1.0826292 1.0893257 1.0958279 1.1021392 1.1082287 1.1141373 1.119834 1.1253326 1.13065 1.1358432 1.1408136 1.1456113 1.1502279 1.1546599 1.1588929 1.1629559 1.1668328 1.1704837 1.1739903 1.1773154 1.1796787))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.093310736 -0.09498263 -0.101765424 -0.10870906 -0.11570842 -0.12276675 -0.12988715 -0.13708592 -0.14433652 -0.15165895 -0.15908517 -0.166551 -0.17419863 -0.18185178 -0.18950866 -0.197233 -0.20502514 -0.21286544 -0.22080735 -0.22875257 -0.23674342 -0.24478513 -0.25287184 -0.26099944 -0.26915628 -0.27732494 -0.2855207 -0.2937249 -0.30192116 -0.3101273 -0.31832933 -0.3265365 -0.33471778 -0.34290642 -0.3510601 -0.35920355 -0.36730495 -0.37536606 -0.38335997 -0.3913083 -0.39917335 -0.40698034 -0.41469282 -0.42234096 -0.42989635 -0.43733805 -0.44465458 -0.45184255 -0.45887017 -0.46573672 -0.47246167 -0.47902894 -0.4853946 -0.49156588 -0.49737376 -0.5029876 -0.5083802 -0.5135251 -0.518401 -0.5229851 -0.5272279 -0.5311805 -0.53475965 -0.5379674 -0.5408679 -0.5432105 -0.5452191 -0.5467348 -0.5477997 -0.5484587 -0.54852826 -0.5480923 -0.547032 -0.5454034 -0.54304725 -0.54005874 -0.5363645 -0.53199637 -0.5269419 -0.521133 -0.51462234 -0.50735105 -0.49940187 -0.49068376 -0.48112103 -0.47083777 -0.45979524 -0.44803923 -0.43558025 -0.42241544 -0.4086467 -0.39424086 -0.37926263 -0.36376813 -0.3478141 -0.33140227 -0.31452662 -0.29732248 -0.279757 -0.26199055 -0.24395801 -0.22564785 -0.20715592 -0.18859034 -0.1699128 -0.15117964 -0.13245909 -0.113597825 -0.09510247 -0.07661035 -0.058192186 -0.039858673 -0.021774928 -0.0039584628 0.013621595 0.030941379 0.047939036 0.06466501 0.08107992 0.09717606 0.112900466 0.12826216 0.14323807 0.15787521 0.17209496 0.18596065 0.1993437 0.21230221 0.2248001 0.23684317 0.24847919 0.25966465 0.27042806 0.28076494 0.29070413 0.3002948 0.3094942 0.3183302 0.32683587 0.33501402 0.34286594 0.35039777 0.35766765 0.3646296 0.3713477 0.3778015 0.3840282 0.39000103 0.3957484 0.40127945 0.4065495 0.41165298 0.41656438 0.42127427 0.42584342 0.43024006 0.4344789 0.43856195 0.44246328 0.4462105 0.4498114 0.4533186 0.4566343 0.45979434 0.4628307 0.46574065 0.4684627 0.4710736 0.4735322 0.47585797 0.47806484 0.48015192 0.48213628 0.4839573 0.48570034 0.48731616 0.48883805 0.49026638 0.4916044 0.4928447 0.49400452 0.49508485 0.4960938 0.49704418 0.49793494 0.49877045 0.4995498 0.50029064 0.50100166 0.50169677 0.50235266 0.5029972 0.5036325 0.50425327 0.504866 0.50547195 0.5060549 0.50662464 0.50717944 0.5077112 0.50821615 0.50868404 0.5091328 0.5095567 0.50994677 0.5103096 0.51065064 0.51097185 0.51126004 0.5115211 0.51176554 0.5119865 0.51218856 0.5123673 0.51252407 0.51265365 0.512737 0.5128073 0.51284814 0.51285547 0.51281327 0.5127387 0.51261974 0.5124659 0.5122669 0.512013 0.51171107 0.51135964 0.51096565 0.5105112 0.5100122 0.5094338 0.50881666 0.5081451 0.50743884 0.5066861 0.50589216 0.5050509 0.50417555 0.5032646 0.502329 0.5013565 0.50035525 0.4993289)) (quote (0.7303855 0.7297025 0.72682626 0.7237669 0.7205881 0.71726537 0.7138109 0.710208 0.7064977 0.7026522 0.69861246 0.69442857 0.69005204 0.68557275 0.68095917 0.67620367 0.6713175 0.6662739 0.66106534 0.65570736 0.6501958 0.6445274 0.6387179 0.63273037 0.62657577 0.6202699 0.613792 0.60715735 0.60037566 0.593421 0.5862945 0.5789895 0.5715179 0.56386936 0.5560407 0.5480346 0.5398647 0.531496 0.5229384 0.51416284 0.50522393 0.49606842 0.486741 0.47718158 0.46742645 0.45747954 0.44732827 0.43698412 0.42644706 0.41570225 0.40474704 0.39357585 0.38220546 0.37064445 0.3590279 0.3472064 0.33518922 0.3230227 0.31070668 0.2982782 0.2858257 0.27327514 0.26070356 0.24810483 0.23553923 0.22306629 0.21063042 0.19828183 0.18607034 0.17402999 0.16222148 0.15080592 0.13976617 0.12916373 0.119111285 0.10957251 0.10053196 0.092155926 0.084375426 0.07708159 0.07054628 0.064468816 0.059166536 0.054428943 0.050120838 0.04629873 0.04322592 0.040494617 0.0383302 0.0368335 0.035842948 0.035314158 0.035249163 0.03565874 0.0366078 0.03802621 0.03991627 0.04224311 0.0450075 0.048200183 0.051828094 0.05588551 0.06031602 0.06514564 0.07035368 0.07595452 0.08194283 0.088057906 0.09481427 0.10184608 0.10920456 0.11684444 0.12467723 0.13257446 0.14078069 0.14899561 0.15733937 0.1658016 0.17447886 0.18319926 0.19196147 0.20076519 0.20960406 0.21849022 0.22740063 0.23619692 0.24506143 0.2539855 0.2629073 0.27188605 0.2809128 0.2899584 0.29904947 0.30815017 0.3172531 0.32646677 0.33561838 0.34476513 0.3538575 0.36292997 0.37192792 0.38088217 0.38971537 0.39851278 0.40720612 0.4158053 0.42427775 0.4326362 0.44085786 0.4489091 0.45679784 0.46453187 0.4720769 0.47944117 0.48658857 0.49355704 0.5003091 0.5069222 0.5133422 0.5195395 0.52554077 0.53133947 0.53699875 0.5424555 0.5477253 0.552803 0.5577529 0.56250674 0.5670514 0.57141155 0.5755802 0.57957286 0.5833887 0.5870183 0.5904872 0.5937635 0.5968971 0.5998716 0.60267544 0.6053463 0.6078679 0.61021954 0.61242855 0.6144964 0.61643094 0.61823857 0.619906 0.62145794 0.62289054 0.62422115 0.6254516 0.6265831 0.6276102 0.6285294 0.629348 0.63007254 0.6307139 0.63125664 0.63170136 0.63206006 0.6323523 0.63255495 0.63267786 0.6327213 0.6326839 0.63254804 0.6323413 0.6320546 0.6317041 0.63128287 0.6307895 0.63022894 0.6295884 0.6289112 0.62816215 0.62734026 0.6264631 0.62551874 0.6245018 0.6234267 0.6222976 0.6211067 0.6198585 0.61853254 0.6171475 0.6157112 0.6142216 0.6126669 0.61102975 0.6093339 0.60759157 0.60577214 0.6038777 0.601939 0.59993947 0.5978502 0.5957092 0.59351564 0.5912529 0.5889256 0.5865422 0.5841021 0.581617 0.5790801)) (quote (1.1796787 1.1804665 1.1834383 1.186274 1.1889166 1.1913583 1.1936406 1.1956968 1.1975757 1.1992515 1.2007412 1.201972 1.2028619 1.2035496 1.2040255 1.2042662 1.2042877 1.2040237 1.2034949 1.2026955 1.2016555 1.2003793 1.1988199 1.1969885 1.1948685 1.1924729 1.1897838 1.1868727 1.1836891 1.1802336 1.1765196 1.172523 1.1682799 1.1637793 1.1590254 1.1540089 1.1487432 1.1432368 1.1374709 1.1315074 1.1253166 1.1188674 1.1121781 1.1052506 1.0980764 1.090693 1.0831075 1.0753102 1.0673318 1.0591459 1.0507598 1.0421664 1.0333828 1.0244266 1.0154452 1.006222 0.99680955 0.9872022 0.9774536 0.9675186 0.9573726 0.94698424 0.93645907 0.92573256 0.9147467 0.90378416 0.8924927 0.8811056 0.8694851 0.8575674 0.84551424 0.8330831 0.8204523 0.80743605 0.7941462 0.78033734 0.76616925 0.75169594 0.7368874 0.7216449 0.70613266 0.6901611 0.6739822 0.65750576 0.6406068 0.62340665 0.6061994 0.58879716 0.5713955 0.5541421 0.5369112 0.51986725 0.5029796 0.48633268 0.47001788 0.45406306 0.43849632 0.42339784 0.40880096 0.39474297 0.3812079 0.3682448 0.35588548 0.34411165 0.3330058 0.32255027 0.3127782 0.3034583 0.29512164 0.2873226 0.28020573 0.2736626 0.26777956 0.26265138 0.25812736 0.25432006 0.2511167 0.24850905 0.2464523 0.24502228 0.24412212 0.24379559 0.24398142 0.24468194 0.24589561 0.24775017 0.2500307 0.25281703 0.25606838 0.25979143 0.26399535 0.26860744 0.27368414 0.27920726 0.2851162 0.29149154 0.29821798 0.3052761 0.31274942 0.32045475 0.32848609 0.3368137 0.34542573 0.35425347 0.3633245 0.3726188 0.38209525 0.3917425 0.40152657 0.41152576 0.42155027 0.43173423 0.4419962 0.45227346 0.46261284 0.47297212 0.48332745 0.4937264 0.5040714 0.51439167 0.52469725 0.53496415 0.54515344 0.5553066 0.5653974 0.5754612 0.5853433 0.5951693 0.6049189 0.61461545 0.62418277 0.63363225 0.64291716 0.6521351 0.6611833 0.67012656 0.6789055 0.6875448 0.69606865 0.7044732 0.71270705 0.72080797 0.7287658 0.73659307 0.7442723 0.7518056 0.7592056 0.7664547 0.77358664 0.7805953 0.78747285 0.794212 0.8008161 0.80725146 0.8135788 0.81975556 0.82582444 0.8317361 0.83752126 0.8432021 0.84875435 0.85416955 0.85945374 0.86460776 0.86964196 0.87454314 0.8793037 0.88394487 0.88844926 0.89283187 0.8970749 0.90119964 0.9052067 0.9091111 0.9128847 0.9165469 0.92009914 0.9235175 0.9268101 0.9299814 0.93305427 0.93601364 0.938854 0.9415525 0.94414205 0.946625 0.9489801 0.9512022 0.9532738 0.9552256 0.95706797 0.9587526 0.96025557 0.9616575 0.9629142 0.96400816 0.9649502 0.9657791 0.96646196 0.96699095 0.9673904 0.967659 0.96782017 0.9678552)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list 1.1796787 1.1804665 1.1834383 1.186274 1.1889166 1.1913583 1.1936406 1.1956968 1.1975757 1.1992515 1.2007412 1.201972 1.2028619 1.2035496 1.2040255 1.2042662 1.2042877 1.2040237 1.2034949 1.2026955 1.2016555 1.2003793 1.1988199 1.1969885 1.1948685 1.1924729 1.1897838 1.1868727 1.1836891 1.1802336 1.1765196 1.172523 1.1682799 1.1637793 1.1590254 1.1540089 1.1487432 1.1432368 1.1374709 1.1315074 1.1253166 1.1188674 1.1121781 1.1052506 1.0980764 1.090693 1.0831075 1.0753102 1.0673318 1.0591459 1.0507598 1.0421664 1.0333828 1.0244266 1.0154452 1.006222 0.99680955 0.9872022 0.9774536 0.9675186 0.9573726 0.94698424 0.93645907 0.92573256 0.9147467 0.90378416 0.8924927 0.8811056 0.8694851 0.8575674 0.84551424 0.8330831 0.8204523 0.80743605 0.7941462 0.78033734 0.76616925 0.75169594 0.7368874 0.7216449 0.70613266 0.6901611 0.6739822 0.65750576 0.6406068 0.62340665 0.6061994 0.58879716 0.5713955 0.5541421 0.5369112 0.51986725 0.5029796 0.48633268 0.47001788 0.45406306 0.43849632 0.42339784 0.40880096 0.39474297 0.3812079 0.3682448 0.35588548 0.34411165 0.3330058 0.32255027 0.3127782 0.3034583 0.29512164 0.2873226 0.28020573 0.2736626 0.26777956 0.26265138 0.25812736 0.25432006 0.2511167 0.24850905 0.2464523 0.24502228 0.24412212 0.24379559 0.24398142 0.24468194 0.24589561 0.24775017 0.2500307 0.25281703 0.25606838 0.25979143 0.26399535 0.26860744 0.27368414 0.27920726 0.2851162 0.29149154 0.29821798 0.3052761 0.31274942 0.32045475 0.32848609 0.3368137 0.34542573 0.35425347 0.3633245 0.3726188 0.38209525 0.3917425 0.40152657 0.41152576 0.42155027 0.43173423 0.4419962 0.45227346 0.46261284 0.47297212 0.48332745 0.4937264 0.5040714 0.51439167 0.52469725 0.53496415 0.54515344 0.5553066 0.5653974 0.5754612 0.5853433 0.5951693 0.6049189 0.61461545 0.62418277 0.63363225 0.64291716 0.6521351 0.6611833 0.67012656 0.6789055 0.6875448 0.69606865 0.7044732 0.71270705 0.72080797 0.7287658 0.73659307 0.7442723 0.7518056 0.7592056 0.7664547 0.77358664 0.7805953 0.78747285 0.794212 0.8008161 0.80725146 0.8135788 0.81975556 0.82582444 0.8317361 0.83752126 0.8432021 0.84875435 0.85416955 0.85945374 0.86460776 0.86964196 0.87454314 0.8793037 0.88394487 0.88844926 0.89283187 0.8970749 0.90119964 0.9052067 0.9091111 0.9128847 0.9165469 0.92009914 0.9235175 0.9268101 0.9299814 0.93305427 0.93601364 0.938854 0.9415525 0.94414205 0.946625 0.9489801 0.9512022 0.9532738 0.9552256 0.95706797 0.9587526 0.96025557 0.9616575 0.9629142 0.96400816 0.9649502 0.9657791 0.96646196 0.96699095 0.9673904 0.967659 0.96782017 0.9678552))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4993289 0.49828678 0.4972226 0.49614066 0.4950427 0.49393347 0.49282402 0.49170116 0.4905728 0.48944697 0.4883254 0.4871892 0.4860476 0.48489928 0.4837434 0.482574 0.48138276 0.4801699 0.47891834 0.4776284 0.47629377 0.4749191 0.47349787 0.47202417 0.4705024 0.46894273 0.4673293 0.46565646 0.46393245 0.46215522 0.46030396 0.45840094 0.45642328 0.45435908 0.4522218 0.44997898 0.44763014 0.4451876 0.44263715 0.43998173 0.437216 0.43432462 0.43129355 0.42812338 0.42481357 0.42135742 0.4177648 0.41402626 0.4101291 0.406093 0.4019098 0.397598 0.39318734 0.38866708 0.38406545 0.37936145 0.37456962 0.36967862 0.36469752 0.35962 0.35445702 0.34917822 0.3437745 0.3382525 0.33263013 0.3268732 0.3209858 0.31495935 0.30881876 0.30256498 0.29616597 0.28964907 0.28302205 0.27627 0.26939613 0.2623729 0.25525904 0.24802949 0.24064563 0.23313657 0.22551462 0.21776095 0.2098811 0.2018653 0.1937237 0.18547882 0.17707658 0.16855622 0.15990702 0.15116149 0.14229024 0.13330387 0.12420482 0.115012124 0.10571156 0.096275434 0.0866809 0.076979324 0.06719616 0.057267417 0.047200676 0.037117135 0.026842656 0.01645 0.0058590244 -0.0048618256 -0.01570669 -0.026720746 -0.03787252 -0.04917289 -0.060613364 -0.07216832 -0.08387006 -0.095667936 -0.10749541 -0.11942026 -0.13139467 -0.1434071 -0.15545696 -0.16754094 -0.17959926 -0.19158803 -0.20364495 -0.21565025 -0.22746629 -0.23922248 -0.2509309 -0.26251748 -0.27430034 -0.28589478 -0.29724848 -0.30839917 -0.31899035 -0.3299981 -0.34074563 -0.35076582 -0.36071983 -0.37054887 -0.38023406 -0.38977745 -0.3991013 -0.40823045 -0.41713816 -0.42582822 -0.43432787 -0.44261009 -0.45066813 -0.45848054 -0.46608293 -0.47342813 -0.4805822 -0.4874857 -0.49420282 -0.50064314 -0.5068798 -0.5128772 -0.51866955 -0.52427155 -0.5296125 -0.5347115 -0.5396317 -0.54431826 -0.5488052 -0.5529908 -0.55702794 -0.56095827 -0.564599 -0.5680711 -0.57136924 -0.57449145 -0.5774434 -0.58020896 -0.58278037 -0.5851744 -0.5873911 -0.5893669 -0.5912001 -0.59287286 -0.5943915 -0.59573794 -0.59689266 -0.5978329 -0.5985007 -0.5990238 -0.5992881 -0.5993524 -0.5992492 -0.5989231 -0.5983846 -0.5977291 -0.5969086 -0.5958919 -0.5947682 -0.59350384 -0.592137 -0.5906001 -0.58901465 -0.5872799 -0.5854822 -0.5835527 -0.58154375 -0.57946104 -0.5773381 -0.5750769 -0.57277817 -0.5703986 -0.5679595 -0.5654503 -0.56287826 -0.5602615 -0.5575929 -0.5548852)) (quote (0.5790801 0.5764504 0.5737879 0.57108474 0.56834746 0.5655392 0.5626665 0.55974824 0.5568168 0.55383784 0.55080987 0.5477509 0.54466767 0.5415486 0.53838474 0.5352 0.5319784 0.5287208 0.52542305 0.5220905 0.5187276 0.51531756 0.51187307 0.50838507 0.50486285 0.5012678 0.49762806 0.49394447 0.49018362 0.4863804 0.48255068 0.47864693 0.47471046 0.47073245 0.46670392 0.4626093 0.4585135 0.45436248 0.45018512 0.44595593 0.44168848 0.4373734 0.43301442 0.4286382 0.42421624 0.419749 0.4152352 0.41066685 0.40606144 0.40143105 0.3967758 0.3920917 0.3873617 0.3825898 0.37776405 0.3728958 0.3679805 0.36300012 0.3579582 0.35278505 0.3475344 0.34222806 0.33680838 0.3312983 0.32564366 0.31990862 0.31405595 0.3080746 0.30194864 0.29567042 0.2892534 0.28267652 0.27592704 0.26898322 0.26186273 0.25454366 0.2469824 0.23918692 0.23118203 0.22293768 0.21443054 0.20567505 0.19664541 0.18734296 0.17772536 0.16777376 0.15755536 0.14701692 0.1361497 0.12495206 0.113454096 0.10164527 0.08961195 0.077266954 0.064695016 0.051918734 0.039010436 0.025991165 0.012929682 -1.424905E-4 -0.01314392 -0.026055694 -0.038792558 -0.051324465 -0.06356985 -0.075490505 -0.08703492 -0.09810917 -0.108690225 -0.118756354 -0.12825786 -0.13720311 -0.14567349 -0.15347769 -0.1606979 -0.16720654 -0.17305033 -0.17826779 -0.18284907 -0.18682979 -0.19025208 -0.19325686 -0.19563976 -0.19759593 -0.1992769 -0.200587 -0.20155524 -0.20225315 -0.20242006 -0.20245321 -0.20241544 -0.20229362 -0.20208809 -0.20179612 -0.20150945 -0.20132382 -0.20116316 -0.20081598 -0.20058255 -0.20048027 -0.20050335 -0.20064251 -0.20088995 -0.20124921 -0.20171036 -0.2022891 -0.20296784 -0.20376578 -0.2046705 -0.20567295 -0.2067766 -0.20798394 -0.2092363 -0.21058318 -0.211994 -0.21347931 -0.21502723 -0.21656735 -0.21819541 -0.21988829 -0.22160776 -0.22337874 -0.2251852 -0.2269672 -0.22873172 -0.23053473 -0.23230955 -0.23405609 -0.23577628 -0.23743829 -0.23903235 -0.2405689 -0.2419908 -0.24330224 -0.2445071 -0.24554442 -0.24641767 -0.24713542 -0.24765468 -0.2480216 -0.2482263 -0.24827722 -0.24813986 -0.2479222 -0.24753748 -0.24700941 -0.24636756 -0.24551355 -0.24450168 -0.24329853 -0.24198382 -0.24045235 -0.23875244 -0.23690526 -0.23490279 -0.2327901 -0.23050422 -0.22812639 -0.2256004 -0.22297424 -0.22025644 -0.21742492 -0.2144816 -0.21148549 -0.20844756 -0.20531702 -0.20215088 -0.19892177 -0.19564107 -0.19232403 -0.1889515 -0.18552213)) (quote (0.9678552 0.96774054 0.96752966 0.9672093 0.96677816 0.9662265 0.965566 0.96480453 0.96396566 0.9630078 0.96195585 0.9608404 0.9596571 0.95838637 0.9570264 0.95559925 0.9540809 0.95250404 0.9508719 0.94916964 0.9474038 0.9455703 0.9436768 0.94171036 0.9396738 0.9375235 0.9353257 0.9330362 0.930662 0.9282036 0.925654 0.9230072 0.9202945 0.9174945 0.9146232 0.91161877 0.9085347 0.90535176 0.9020845 0.89870286 0.8952037 0.8915821 0.88785416 0.8840103 0.88002867 0.8759092 0.8716434 0.8672374 0.8626692 0.8579674 0.85307056 0.8479617 0.8426231 0.83706 0.83123464 0.825159 0.81879467 0.81214595 0.80519784 0.79796035 0.79039824 0.78255404 0.77443457 0.76602 0.7573168 0.74831295 0.739052 0.729478 0.7196039 0.70942957 0.69896257 0.6882142 0.6771697 0.66582925 0.65422225 0.6423451 0.6302285 0.61787707 0.60529894 0.5925305 0.5796421 0.5665351 0.5532902 0.5399416 0.52644426 0.51286614 0.49933952 0.4858289 0.472365 0.45904925 0.44593224 0.43309394 0.4205983 0.40847403 0.39681315 0.38565716 0.3751039 0.36514428 0.35589302 0.34736756 0.3396207 0.33267698 0.32655916 0.3213497 0.31694326 0.31348985 0.31087372 0.30912367 0.30819756 0.3080554 0.30875435 0.31022275 0.3124403 0.31543037 0.31916645 0.32362995 0.32890132 0.3348727 0.34151202 0.348859 0.35693303 0.36554036 0.374904 0.38485703 0.39523688 0.4062321 0.41773668 0.42975712 0.44261944 0.45579997 0.46926838 0.48302904 0.49686518 0.51142484 0.52617324 0.5406547 0.55545754 0.5705965 0.58587647 0.6013371 0.616856 0.6324648 0.6481408 0.6638167 0.67956377 0.69533164 0.7111108 0.7268842 0.74268407 0.75843537 0.7742256 0.78995926 0.8057147 0.82139475 0.8370546 0.8526374 0.8681463 0.8836619 0.89903665 0.9142777 0.92943454 0.9444484 0.95931954 0.974037 0.9886963 1.0031446 1.0173816 1.0314293 1.0452715 1.0589024 1.072337 1.0855495 1.0985051 1.111191 1.1236132 1.1357696 1.1475687 1.1590648 1.1701824 1.1809418 1.1913067 1.2012805 1.2108635 1.220101 1.2289002 1.2373152 1.2454236 1.2530789 1.2603731 1.2672272 1.2738042 1.2799016 1.285579 1.2908452 1.2957645 1.3003724 1.3045992 1.308485 1.3119923 1.3152385 1.31809 1.3206332 1.3227811 1.3246056 1.3261614 1.3273275 1.3281906 1.328724 1.3289276 1.3288204 1.3284216 1.3276535)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list 0.9678552 0.96774054 0.96752966 0.9672093 0.96677816 0.9662265 0.965566 0.96480453 0.96396566 0.9630078 0.96195585 0.9608404 0.9596571 0.95838637 0.9570264 0.95559925 0.9540809 0.95250404 0.9508719 0.94916964 0.9474038 0.9455703 0.9436768 0.94171036 0.9396738 0.9375235 0.9353257 0.9330362 0.930662 0.9282036 0.925654 0.9230072 0.9202945 0.9174945 0.9146232 0.91161877 0.9085347 0.90535176 0.9020845 0.89870286 0.8952037 0.8915821 0.88785416 0.8840103 0.88002867 0.8759092 0.8716434 0.8672374 0.8626692 0.8579674 0.85307056 0.8479617 0.8426231 0.83706 0.83123464 0.825159 0.81879467 0.81214595 0.80519784 0.79796035 0.79039824 0.78255404 0.77443457 0.76602 0.7573168 0.74831295 0.739052 0.729478 0.7196039 0.70942957 0.69896257 0.6882142 0.6771697 0.66582925 0.65422225 0.6423451 0.6302285 0.61787707 0.60529894 0.5925305 0.5796421 0.5665351 0.5532902 0.5399416 0.52644426 0.51286614 0.49933952 0.4858289 0.472365 0.45904925 0.44593224 0.43309394 0.4205983 0.40847403 0.39681315 0.38565716 0.3751039 0.36514428 0.35589302 0.34736756 0.3396207 0.33267698 0.32655916 0.3213497 0.31694326 0.31348985 0.31087372 0.30912367 0.30819756 0.3080554 0.30875435 0.31022275 0.3124403 0.31543037 0.31916645 0.32362995 0.32890132 0.3348727 0.34151202 0.348859 0.35693303 0.36554036 0.374904 0.38485703 0.39523688 0.4062321 0.41773668 0.42975712 0.44261944 0.45579997 0.46926838 0.48302904 0.49686518 0.51142484 0.52617324 0.5406547 0.55545754 0.5705965 0.58587647 0.6013371 0.616856 0.6324648 0.6481408 0.6638167 0.67956377 0.69533164 0.7111108 0.7268842 0.74268407 0.75843537 0.7742256 0.78995926 0.8057147 0.82139475 0.8370546 0.8526374 0.8681463 0.8836619 0.89903665 0.9142777 0.92943454 0.9444484 0.95931954 0.974037 0.9886963 1.0031446 1.0173816 1.0314293 1.0452715 1.0589024 1.072337 1.0855495 1.0985051 1.111191 1.1236132 1.1357696 1.1475687 1.1590648 1.1701824 1.1809418 1.1913067 1.2012805 1.2108635 1.220101 1.2289002 1.2373152 1.2454236 1.2530789 1.2603731 1.2672272 1.2738042 1.2799016 1.285579 1.2908452 1.2957645 1.3003724 1.3045992 1.308485 1.3119923 1.3152385 1.31809 1.3206332 1.3227811 1.3246056 1.3261614 1.3273275 1.3281906 1.328724 1.3289276 1.3288204 1.3284216 1.3276535))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.5548852 -0.5521252 -0.5493217 -0.5464766 -0.54355985 -0.54062504 -0.53766025 -0.5346425 -0.53157557 -0.5284315 -0.5252678 -0.5220335 -0.51872057 -0.51533705 -0.51190395 -0.50838614 -0.504799 -0.50116766 -0.49746904 -0.49373382 -0.48995063 -0.4861314 -0.48230717 -0.47846717 -0.4745815 -0.47068712 -0.46676362 -0.46282828 -0.458843 -0.45480904 -0.45072103 -0.44653416 -0.44221994 -0.43775812 -0.43313602 -0.42831078 -0.42328683 -0.41801402 -0.41245604 -0.40656313 -0.40028968 -0.39356828 -0.3863611 -0.3786023 -0.37021244 -0.361178 -0.35148272 -0.3410922 -0.3300165 -0.3182692 -0.30586785 -0.29281276 -0.27919158 -0.26509884 -0.25070813 -0.23623099 -0.22157471 -0.20675913 -0.19191759 -0.1771936 -0.16264369 -0.14833562 -0.13438596 -0.12076854 -0.10762324 -0.09488364 -0.08263339 -0.070810125 -0.05946994 -0.048601006 -0.038182844 -0.028209597 -0.018610744 -0.00940142 -5.426856E-4 0.007879682 0.015943408 0.023622925 0.030880876 0.03774849 0.044192907 0.050127246 0.05580208 0.060890146 0.065643095 0.06993255 0.07376494 0.07707836 0.07985656 0.08217057 0.08399764 0.08547387 0.08616253 0.08662799 0.08631674 0.08554841 0.08427106 0.08276484 0.08064112 0.07805568 0.07507903 0.07151209 0.06759599 0.06320723 0.05840537 0.053184033 0.047635187 0.041705508 0.03543899 0.028873517 0.02207489 0.015060524 0.007897459 6.352341E-4 -0.006699535 -0.014074213 -0.021415774 -0.02870422 -0.03588657 -0.042933222 -0.04981975 -0.056505837 -0.06297813 -0.06920325 -0.07510502 -0.08073964 -0.08606747 -0.09108952 -0.09578372 -0.10014402 -0.10416446 -0.10789385 -0.11121745 -0.11423269 -0.11686233 -0.11920153 -0.12125021 -0.1230153 -0.124493465 -0.1257199 -0.12671195 -0.12745415 -0.12797427 -0.12827038 -0.12835975 -0.12824789 -0.12793133 -0.12744127 -0.12677889 -0.12594483 -0.12495958 -0.123844736 -0.122604534 -0.12121004 -0.11972718 -0.11816031 -0.116493106 -0.11473174 -0.11289487 -0.110991836 -0.10903661 -0.10704566 -0.10503481 -0.1030299 -0.10103019 -0.099043064 -0.09707603 -0.09514269 -0.0932628 -0.09145177 -0.08970506 -0.08804744 -0.08653256 -0.08508839 -0.0837564 -0.0825385 -0.08143248 -0.08045402 -0.07962979 -0.07899156 -0.07851174 -0.07822031 -0.07812273 -0.07822858 -0.07853282 -0.079059996 -0.07978373 -0.08074465 -0.0819122 -0.08328342 -0.084858686 -0.08663114 -0.08857868 -0.090713725 -0.09301812 -0.095482424 -0.09810527 -0.10087863 -0.103787005 -0.106836446 -0.10999871 -0.113280766 -0.11667741 -0.12016807 -0.12372252 -0.12731146 -0.1283615)) (quote (-0.18552213 -0.18206239 -0.17856322 -0.17503113 -0.17143709 -0.16788057 -0.1643125 -0.1607353 -0.15716824 -0.15358019 -0.15004951 -0.14653847 -0.14304416 -0.13956231 -0.13608134 -0.13260824 -0.12914536 -0.12566607 -0.122181386 -0.11865056 -0.115106136 -0.11150552 -0.10787876 -0.104200445 -0.10045696 -0.096657835 -0.092791975 -0.08888397 -0.08493026 -0.08093391 -0.07697045 -0.073024705 -0.069108226 -0.065233425 -0.061371886 -0.057559878 -0.053791654 -0.050031852 -0.04631296 -0.04260686 -0.038930156 -0.03531963 -0.0317987 -0.028408433 -0.025138949 -0.022034504 -0.01909046 -0.016202415 -0.0133811 -0.010676521 -0.008074372 -0.0056247227 -0.0033204204 -0.0011740042 7.467304E-4 0.002429559 0.003983852 0.005435406 0.0067709414 0.0080039175 0.009139308 0.010267811 0.011346594 0.012480783 0.013616649 0.014839769 0.01614933 0.017588443 0.019117685 0.020756992 0.022500936 0.024327662 0.026331062 0.028472266 0.03075109 0.033139415 0.03567759 0.03832793 0.041090194 0.043943275 0.046961837 0.05003762 0.053292226 0.056603887 0.06005503 0.06355918 0.06715549 0.07081651 0.07451604 0.07829122 0.0821201 0.08610657 0.090038985 0.094077304 0.09796359 0.10193701 0.10597432 0.110251114 0.1144559 0.11872291 0.123090036 0.12747616 0.13191985 0.13643298 0.14099781 0.1456048 0.15027206 0.15494895 0.15962644 0.16428663 0.16892372 0.17348162 0.1779652 0.18234837 0.18661784 0.19073154 0.19467697 0.19843424 0.20197657 0.20530783 0.20844035 0.21131493 0.21395956 0.21633618 0.2185274 0.22043877 0.22207834 0.22342186 0.22447177 0.2252489 0.22572977 0.22580409 0.22569879 0.22523259 0.22458811 0.2236429 0.2224222 0.22091306 0.21918956 0.2172099 0.21496469 0.21254495 0.2099662 0.20723036 0.20433115 0.20129532 0.19816046 0.19489497 0.19151543 0.18803574 0.18447419 0.18082373 0.17710458 0.173328 0.16950876 0.16563082 0.16171988 0.15777536 0.15381842 0.14983551 0.1458187 0.1418101 0.13777033 0.13370073 0.12959305 0.12545319 0.12129161 0.11710564 0.11289936 0.10874926 0.10458399 0.100374505 0.09626687 0.092163816 0.08804239 0.08395814 0.079915226 0.07601139 0.072169505 0.06843468 0.06483568 0.061387796 0.05813027 0.05510105 0.052292243 0.049723048 0.047401753 0.045403988 0.043619864 0.04205145 0.040720608 0.039644644 0.03879405 0.038188678 0.037788235 0.03760361 0.03761755 0.037819174 0.03821089 0.03879361 0.03955262 0.040459995 0.041547146 0.04279688 0.044285477 0.045888815 0.046383854)) (quote (1.3276535 1.3265935 1.3251689 1.3234035 1.3212373 1.3188003 1.3159775 1.3127862 1.3092069 1.3052027 1.3008367 1.2960676 1.2908628 1.2852346 1.2791733 1.2726781 1.2657365 1.2583387 1.2504735 1.2421475 1.2332689 1.223827 1.2138057 1.2031752 1.1919062 1.1799371 1.167271 1.153861 1.1396735 1.124666 1.1088683 1.0921946 1.0746566 1.0562158 1.0368852 1.0166208 0.9954383 0.97331834 0.9502166 0.92617924 0.90121317 0.87535465 0.84866024 0.8212236 0.7931274 0.76455087 0.7357201 0.70678616 0.6778079 0.6489324 0.6202437 0.59196234 0.5642334 0.5371899 0.5109947 0.48592693 0.46189126 0.43899053 0.4172939 0.39692366 0.3777289 0.36002806 0.34353626 0.32851872 0.31462774 0.30197927 0.29048374 0.28024924 0.2710008 0.26266772 0.25518832 0.24841073 0.24250035 0.23720284 0.23247741 0.22833666 0.22469619 0.22151473 0.21888937 0.21656932 0.21488138 0.21356994 0.21277528 0.21231078 0.21248535 0.21310093 0.2141291 0.21562849 0.21762008 0.22008069 0.22297746 0.22637126 0.23018748 0.23454973 0.23944353 0.24487067 0.25083128 0.25738904 0.264435 0.27214587 0.2806413 0.28973904 0.29967564 0.31031743 0.3217602 0.33399224 0.34706143 0.3609775 0.3757248 0.3913868 0.4078327 0.42513242 0.44324747 0.4621056 0.48167092 0.5019072 0.5228209 0.5443182 0.56637007 0.5889089 0.61187244 0.6352453 0.6589601 0.68300117 0.7071786 0.7315576 0.7560893 0.7807502 0.8054354 0.83012426 0.85474867 0.8793048 0.90367496 0.9278805 0.9518472 0.9755528 0.9989874 1.0221065 1.0449091 1.0673468 1.0893731 1.1109812 1.1321356 1.1528264 1.1730877 1.1928716 1.2121673 1.2309795 1.2493191 1.2671701 1.2845315 1.301357 1.3175976 1.3333788 1.3485849 1.3632596 1.3773736 1.3909496 1.4039613 1.416445 1.4283754 1.4397163 1.4504969 1.4607335 1.4704126 1.4795199 1.4880631 1.4960519 1.5034886 1.5103189 1.5166025 1.522312 1.5274302 1.5319961 1.5359905 1.5394365 1.5423429 1.5446869 1.5464953 1.5477414 1.548464 1.5486581 1.5483149 1.5474386 1.5460365 1.5441103 1.541658 1.5386555 1.5351329 1.531097 1.5265604 1.5215079 1.5159596 1.5098854 1.5033069 1.4962174 1.4886415 1.4805534 1.4719689 1.4628675 1.4532559 1.443157 1.4325522 1.4214397 1.4098156 1.3977169 1.3940982)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 1.3276535 1.3265935 1.3251689 1.3234035 1.3212373 1.3188003 1.3159775 1.3127862 1.3092069 1.3052027 1.3008367 1.2960676 1.2908628 1.2852346 1.2791733 1.2726781 1.2657365 1.2583387 1.2504735 1.2421475 1.2332689 1.223827 1.2138057 1.2031752 1.1919062 1.1799371 1.167271 1.153861 1.1396735 1.124666 1.1088683 1.0921946 1.0746566 1.0562158 1.0368852 1.0166208 0.9954383 0.97331834 0.9502166 0.92617924 0.90121317 0.87535465 0.84866024 0.8212236 0.7931274 0.76455087 0.7357201 0.70678616 0.6778079 0.6489324 0.6202437 0.59196234 0.5642334 0.5371899 0.5109947 0.48592693 0.46189126 0.43899053 0.4172939 0.39692366 0.3777289 0.36002806 0.34353626 0.32851872 0.31462774 0.30197927 0.29048374 0.28024924 0.2710008 0.26266772 0.25518832 0.24841073 0.24250035 0.23720284 0.23247741 0.22833666 0.22469619 0.22151473 0.21888937 0.21656932 0.21488138 0.21356994 0.21277528 0.21231078 0.21248535 0.21310093 0.2141291 0.21562849 0.21762008 0.22008069 0.22297746 0.22637126 0.23018748 0.23454973 0.23944353 0.24487067 0.25083128 0.25738904 0.264435 0.27214587 0.2806413 0.28973904 0.29967564 0.31031743 0.3217602 0.33399224 0.34706143 0.3609775 0.3757248 0.3913868 0.4078327 0.42513242 0.44324747 0.4621056 0.48167092 0.5019072 0.5228209 0.5443182 0.56637007 0.5889089 0.61187244 0.6352453 0.6589601 0.68300117 0.7071786 0.7315576 0.7560893 0.7807502 0.8054354 0.83012426 0.85474867 0.8793048 0.90367496 0.9278805 0.9518472 0.9755528 0.9989874 1.0221065 1.0449091 1.0673468 1.0893731 1.1109812 1.1321356 1.1528264 1.1730877 1.1928716 1.2121673 1.2309795 1.2493191 1.2671701 1.2845315 1.301357 1.3175976 1.3333788 1.3485849 1.3632596 1.3773736 1.3909496 1.4039613 1.416445 1.4283754 1.4397163 1.4504969 1.4607335 1.4704126 1.4795199 1.4880631 1.4960519 1.5034886 1.5103189 1.5166025 1.522312 1.5274302 1.5319961 1.5359905 1.5394365 1.5423429 1.5446869 1.5464953 1.5477414 1.548464 1.5486581 1.5483149 1.5474386 1.5460365 1.5441103 1.541658 1.5386555 1.5351329 1.531097 1.5265604 1.5215079 1.5159596 1.5098854 1.5033069 1.4962174 1.4886415 1.4805534 1.4719689 1.4628675 1.4532559 1.443157 1.4325522 1.4214397 1.4098156 1.3977169 1.3940982))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.1283615 -0.13098686 -0.13473934 -0.13853844 -0.1423658 -0.14624 -0.15018597 -0.1541338 -0.15809694 -0.16206788 -0.16602797 -0.16996727 -0.17387487 -0.17772235 -0.18150454 -0.18517408 -0.1887112 -0.19209846 -0.19529145 -0.19826366 -0.20099229 -0.20343532 -0.20550817 -0.20722117 -0.20851016 -0.20931076 -0.20958513 -0.20924863 -0.2082417 -0.20648115 -0.2039526 -0.20068805 -0.19671002 -0.19208446 -0.18689531 -0.18130544 -0.17541933 -0.16932968 -0.16305737 -0.15663943 -0.15008067 -0.14347156 -0.13685617 -0.13029939 -0.12385948 -0.11756691 -0.11148172 -0.10568533 -0.10005242 -0.094685175 -0.08959985 -0.08480675 -0.08027042 -0.07601813 -0.07200296 -0.0682325 -0.06466678 -0.06129512 -0.058111117 -0.055085503 -0.052205306 -0.04945122 -0.046808936 -0.044272654 -0.04183486 -0.039491944 -0.03723788 -0.035050344 -0.03293157 -0.030899104 -0.028935664 -0.02703882 -0.025196964 -0.023424486 -0.021684496 -0.020053665 -0.018461848 -0.016939177 -0.015459444 -0.014014049 -0.0126195345 -0.011287253 -0.010012143 -0.008764176 -0.0075778794 -0.0064081988 -0.00526722 -0.0041606147 -0.0030867013 -0.002044625 -0.0010198612 -3.4708E-5 9.102112E-4 0.001840925 0.0027280096 0.003579044 0.004390807 0.00518781 0.0059398436 0.006653166 0.0073261354 0.007972779 0.008593904 0.009181197 0.009733812 0.010242704 0.010725472 0.011175538 0.011606043 0.012012453 0.012405644 0.012760656 0.0130989095 0.013431 0.013734811 0.014029865 0.01430685 0.014580366 0.014841253 0.015107784 0.015372782 0.015636525 0.015885052 0.016142901 0.016400777 0.016649504 0.016875769 0.017094149 0.017317392 0.017527745 0.017733243 0.017943945 0.018140909 0.0183252 0.018494787 0.018662379 0.018828333 0.018999527 0.01915869 0.019304974 0.019427484 0.019561984 0.019694517 0.019831432 0.019957046 0.020063142 0.020174113 0.020290155 0.020411069 0.020535045 0.020661628 0.020778036 0.020886 0.0209764 0.021082161 0.021169179 0.0212642 0.021364768 0.021458717 0.021558125 0.021648666 0.02173811 0.021802199)) (quote (0.046383854 0.04762156 0.049484358 0.051448744 0.053495806 0.055652723 0.057808206 0.06009803 0.06236557 0.06473464 0.06718172 0.06969143 0.07225896 0.07487708 0.077534206 0.08025288 0.083026655 0.08583377 0.08870079 0.09162147 0.09454673 0.09753877 0.10056174 0.10360508 0.10668116 0.10976132 0.112845876 0.11592133 0.119015604 0.12216065 0.12534538 0.12850112 0.13160354 0.134652 0.13767196 0.14070364 0.14375298 0.14683374 0.14998369 0.15315745 0.15632306 0.15940301 0.16232856 0.16510251 0.16770846 0.17016506 0.17249234 0.17468004 0.17679784 0.1788101 0.18074028 0.18260871 0.1844061 0.18615294 0.18784517 0.18951039 0.19115755 0.19278975 0.19442523 0.19606914 0.19773539 0.19942722 0.20114103 0.20287323 0.20462138 0.2064017 0.20819603 0.2099768 0.21175955 0.21353372 0.21528605 0.21701779 0.21870625 0.22037904 0.22201501 0.22354222 0.2250658 0.22651011 0.22792034 0.22925699 0.23054895 0.23175094 0.23289068 0.23395533 0.2349528 0.2358867 0.23677318 0.23760267 0.23839404 0.2391467 0.23986107 0.24054203 0.24118953 0.24180807 0.24238554 0.2429183 0.24343501 0.24391715 0.24437617 0.24480231 0.24519573 0.24555639 0.24589896 0.24620101 0.24646914 0.24670559 0.24690749 0.24708434 0.24725722 0.24739424 0.24752277 0.24761418 0.24768663 0.24772936 0.2477686 0.24781116 0.2478472 0.2478677 0.24787687 0.2478901 0.24790846 0.24789827 0.24788311 0.24787124 0.24787139 0.24787663 0.24788419 0.2478669 0.24785193 0.24782108 0.24779994 0.24778995 0.24776912 0.24774762 0.2477278 0.24768783 0.2476705 0.2476565 0.24764516 0.24761899 0.2475872 0.24755156 0.2475057 0.24745415 0.2473951 0.24732857 0.24725208 0.2471561 0.24704945 0.24694282 0.24681618 0.2466877 0.2465325 0.2463755 0.2462117 0.24603589 0.24584449 0.24563819 0.2454282 0.24520299 0.2449714 0.24473764 0.244576)) (quote (1.3940982 1.3850507 1.3718209 1.3580183 1.3436947 1.3287464 1.3132622 1.297124 1.280434 1.2630814 1.2450945 1.2264919 1.2072302 1.1873163 1.1667452 1.1454995 1.1235746 1.1009833 1.0776979 1.0536933 1.0289959 1.0035873 0.9774428 0.9506183 0.923106 0.89496506 0.86623896 0.83699495 0.807333 0.7774434 0.7477466 0.7185396 0.69007874 0.6625876 0.63622535 0.6111179 0.5872613 0.56476874 0.5435973 0.5236988 0.5049908 0.48739102 0.47101834 0.45571634 0.44151792 0.4283358 0.4161761 0.4049804 0.3947152 0.38538355 0.37689555 0.36916944 0.3622105 0.3558937 0.3502307 0.3451596 0.34059116 0.33649942 0.33281988 0.32950258 0.32651728 0.32381788 0.32138604 0.31915715 0.3171714 0.31532466 0.3135746 0.31198514 0.31049052 0.3090942 0.30775243 0.30646002 0.30521154 0.30400616 0.3027886 0.3015969 0.30041736 0.29927453 0.29813448 0.2970113 0.29587764 0.2947642 0.29367062 0.2925613 0.29151648 0.29045826 0.28943688 0.28845915 0.28748277 0.28655276 0.28563312 0.28476173 0.2839545 0.28315508 0.28242317 0.28176004 0.28116766 0.2806476 0.2801844 0.2797518 0.27937642 0.27902535 0.2787221 0.27846366 0.27824783 0.27808505 0.27798268 0.27793425 0.2779287 0.2779747 0.278035 0.27816457 0.27834135 0.27857202 0.2788531 0.2791657 0.27948743 0.2798571 0.2802597 0.28065318 0.28106797 0.2815214 0.28200403 0.2824806 0.2829675 0.2834478 0.28391138 0.28442642 0.28494224 0.2854644 0.28598246 0.2865008 0.28704456 0.28757906 0.28812194 0.28869736 0.28923625 0.28977755 0.29036242 0.29094553 0.2914918 0.292033 0.2925858 0.29311937 0.29364493 0.29418722 0.2947086 0.29521588 0.2956922 0.29612914 0.2965666 0.29698977 0.2974288 0.29784215 0.2982396 0.2986253 0.29898638 0.2993448 0.29965988 0.30000022 0.30030897 0.30058676 0.30076912)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 1.3940982 1.3850507 1.3718209 1.3580183 1.3436947 1.3287464 1.3132622 1.297124 1.280434 1.2630814 1.2450945 1.2264919 1.2072302 1.1873163 1.1667452 1.1454995 1.1235746 1.1009833 1.0776979 1.0536933 1.0289959 1.0035873 0.9774428 0.9506183 0.923106 0.89496506 0.86623896 0.83699495 0.807333 0.7774434 0.7477466 0.7185396 0.69007874 0.6625876 0.63622535 0.6111179 0.5872613 0.56476874 0.5435973 0.5236988 0.5049908 0.48739102 0.47101834 0.45571634 0.44151792 0.4283358 0.4161761 0.4049804 0.3947152 0.38538355 0.37689555 0.36916944 0.3622105 0.3558937 0.3502307 0.3451596 0.34059116 0.33649942 0.33281988 0.32950258 0.32651728 0.32381788 0.32138604 0.31915715 0.3171714 0.31532466 0.3135746 0.31198514 0.31049052 0.3090942 0.30775243 0.30646002 0.30521154 0.30400616 0.3027886 0.3015969 0.30041736 0.29927453 0.29813448 0.2970113 0.29587764 0.2947642 0.29367062 0.2925613 0.29151648 0.29045826 0.28943688 0.28845915 0.28748277 0.28655276 0.28563312 0.28476173 0.2839545 0.28315508 0.28242317 0.28176004 0.28116766 0.2806476 0.2801844 0.2797518 0.27937642 0.27902535 0.2787221 0.27846366 0.27824783 0.27808505 0.27798268 0.27793425 0.2779287 0.2779747 0.278035 0.27816457 0.27834135 0.27857202 0.2788531 0.2791657 0.27948743 0.2798571 0.2802597 0.28065318 0.28106797 0.2815214 0.28200403 0.2824806 0.2829675 0.2834478 0.28391138 0.28442642 0.28494224 0.2854644 0.28598246 0.2865008 0.28704456 0.28757906 0.28812194 0.28869736 0.28923625 0.28977755 0.29036242 0.29094553 0.2914918 0.292033 0.2925858 0.29311937 0.29364493 0.29418722 0.2947086 0.29521588 0.2956922 0.29612914 0.2965666 0.29698977 0.2974288 0.29784215 0.2982396 0.2986253 0.29898638 0.2993448 0.29965988 0.30000022 0.30030897 0.30058676 0.30076912))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.021802199 0.02183424 0.021921469 0.02200623 0.022097065 0.022189782 0.022275782 0.022374545 0.022464576 0.022552614 0.022633592 0.02272119 0.022810085 0.022912879 0.023022956 0.023144477 0.02327507 0.02337115 0.023561595 0.023772205 0.024017619 0.0242588 0.024557978 0.0249003 0.025269147 0.025647374 0.026082473 0.02653757 0.027014563 0.027503204 0.027998038 0.02849869 0.029007249 0.029499306 0.029973783 0.030395668 0.030764673 0.03105082 0.031266056 0.031385824 0.03137768 0.031226485 0.030911779 0.030402458 0.029701949 0.028829636 0.027775888 0.026526887 0.025077278 0.023446339 0.02163241 0.019600854 0.017430088 0.015058198 0.012557374 0.00989529 0.0071021146 0.0041844077 0.0011242782 -0.0020742247 -0.005384479 -0.008782769 -0.012305481 -0.01591794 -0.019639675 -0.023447628 -0.02732448 -0.031318784 -0.03535054 -0.03944678 -0.043596767 -0.047790036 -0.052024696 -0.056281273 -0.06055012 -0.064861596 -0.06920976 -0.07357691 -0.07794635 -0.08231737 -0.086683735 -0.09106298 -0.09544577 -0.0998108 -0.10414287 -0.10846437 -0.11275657 -0.11700938 -0.12122675 -0.1254106 -0.12953979 -0.13362254 -0.13763193 -0.14158547 -0.14550756 -0.14933811 -0.15307462 -0.15671368 -0.16025117 -0.16369453 -0.16704922 -0.17030086 -0.17345122 -0.1765174 -0.17943092 -0.18235433 -0.1851132 -0.18783091 -0.19049698 -0.19311288 -0.19565717 -0.19814238 -0.20057862 -0.20296392 -0.20530394 -0.20759529 -0.2098463 -0.21206732 -0.21426645 -0.21644764 -0.21860995 -0.22075868 -0.22292087 -0.22509732 -0.22727674 -0.22947851 -0.23170707 -0.23397044 -0.23624876 -0.23854833 -0.24087516 -0.24321082 -0.24555205 -0.24789606 -0.2502332 -0.25256598 -0.25489756 -0.25722995 -0.25953442 -0.26186454 -0.2640587 -0.26649052 -0.2689075 -0.27134204 -0.27380574 -0.2762513 -0.2787573 -0.28131974 -0.28391004 -0.2865359 -0.28919345 -0.29189137 -0.29464108 -0.29742375 -0.3002516 -0.303121 -0.30603898 -0.3089925 -0.31200463 -0.3150561 -0.318161 -0.32129616 -0.3244839 -0.3276868 -0.33092543 -0.3341936 -0.3374896 -0.3408054 -0.34413326 -0.3474204 -0.3507294 -0.35404634 -0.35738346 -0.36070198 -0.3640158 -0.36731955 -0.3705912 -0.37383205 -0.3770374 -0.38019857 -0.3832945 -0.3863399 -0.38932958 -0.39225528 -0.39510694 -0.39789987 -0.400603 -0.40324464 -0.4058295 -0.4083549 -0.41082543 -0.41324276 -0.41561276 -0.41794848 -0.42023018 -0.42247146 -0.424657 -0.42679778 -0.428856 -0.4308622 -0.4328094 -0.43469286 -0.4365067 -0.43826216 -0.43996775 -0.44163042 -0.44324443 -0.4448089 -0.44631997 -0.44780412 -0.44925544 -0.45066783 -0.4520568 -0.45340243 -0.45471764 -0.45602754 -0.4573096 -0.45854998 -0.45975348 -0.46091488 -0.46203393 -0.46312183 -0.46416312 -0.4651515 -0.46609434 -0.46695912 -0.4677525 -0.4684392 -0.46899763 -0.46944195 -0.46973997 -0.46987653 -0.46984273 -0.46963605 -0.4692485 -0.46866754 -0.4678667 -0.46682307 -0.46555638 -0.4640428 -0.46226183 -0.4602047 -0.45783952 -0.45516217 -0.45210594 -0.44871855 -0.4449841 -0.44087368 -0.43637893 -0.4315236 -0.4263026 -0.42075875 -0.41483375 -0.40854815 -0.40189993 -0.39487588 -0.3875254 -0.37982494 -0.3717814 -0.36341298 -0.3547335 -0.3457182 -0.33639026 -0.32706517 -0.31727487 -0.30711472 -0.29660404 -0.28566054 -0.27444807 -0.26294038 -0.2511706 -0.23915172 -0.22685746 -0.21430132 -0.20140606 -0.18828678 -0.17488802 -0.16129405 -0.14749794 -0.13344506 -0.1191872 -0.10472535 -0.09006966 -0.075238385 -0.060207263 -0.045014095 -0.02970632 -0.014247986 0.0013219538 0.016999597 0.032785844 0.04871923 0.064555116 0.08053402 0.09659805 0.112747364 0.12897015 0.1452282 0.1616268 0.17799032 0.19444818 0.21087843 0.22729799 0.24375829 0.26038316 0.27691576 0.2933864 0.30957866 0.32578143 0.34167165 0.35750657 0.3734529 0.3889799 0.40466717 0.4201781 0.43542415 0.45044824 0.4652138 0.4797603 0.49455994 0.5084788 0.522119 0.53561527 0.5487603 0.5621443 0.5745004 0.5866838 0.5985243 0.6099635 0.62103445 0.6316672 0.64188856 0.65167624 0.6609896 0.6698258 0.67819787 0.6861098 0.69354964 0.70052207 0.7070417 0.71306497 0.718641 0.7237449 0.72837657 0.7325187 0.73621965 0.73953146 0.7424018 0.7447884 0.7468169 0.7484911 0.74974716 0.7506724 0.75123555 0.75150586 0.7514752 0.7511444 0.75046564 0.7495138 0.7481927 0.74657965 0.7446319 0.74233 0.739709 0.7368203 0.7335049 0.72985244 0.72578395 0.72131706 0.71641714 0.7111177 0.70540077 0.69931466 0.6927958 0.6857707 0.67828525 0.6702633 0.6617357 0.6526769 0.64305807 0.63296134 0.6223409 0.61112094 0.5992823 0.58690537 0.5740252 0.56055785 0.54654384 0.5320341 0.5169913 0.5014639 0.48540875 0.46886522 0.45190448 0.43452343 0.41662803 0.39832154 0.37967294 0.3607324 0.34147272 0.32189658 0.30200627 0.28188485 0.26153332 0.24100897 0.22050473 0.19979684 0.17918112 0.15854617 0.13778597 0.11716406 0.09667428 0.07628743 0.055981595 0.03584771 0.015938383 -0.0037389123 -0.023121249 -0.042268746 -0.061104507 -0.079568275 -0.09771743 -0.11555835 -0.13295973 -0.14987917 -0.16624604 -0.18195373 -0.19695997 -0.2112392 -0.22479545 -0.2376212 -0.24974895 -0.26119554 -0.27200788 -0.2821599 -0.29167488 -0.30052698 -0.30871663 -0.31619555 -0.3229797 -0.32903355 -0.33437252 -0.33896184 -0.3427781 -0.34581664 -0.34813538 -0.3496831 -0.3504803 -0.35051295 -0.34979835 -0.34831384 -0.3460682 -0.34307793 -0.33930767 -0.3348073 -0.32956094 -0.32359785 -0.31690705 -0.30959502 -0.30158186 -0.29289263 -0.28351337 -0.2735275 -0.26291546 -0.25173408 -0.23995812 -0.22763938 -0.21482507 -0.20143841 -0.18764536 -0.1734022 -0.15872865 -0.14373696 -0.12838 -0.112663716 -0.09668619 -0.08045808 -0.06404623 -0.047444605 -0.030732764 -0.013895462 0.0029806225 0.01982243 0.036672708 0.053534553 0.070304595 0.08694034 0.10348099 0.11987481 0.13606003 0.15207163 0.16790107 0.18345636 0.1987068 0.21368015 0.22840615 0.2426983 0.25667587 0.27029234 0.28356937 0.29641217 0.3089682 0.32106984 0.33269084 0.34381166 0.35446623 0.3646386 0.37430477 0.38354313 0.3923236 0.40061808 0.40846673 0.415814 0.42270568 0.42914063 0.435082 0.44056293 0.44562453 0.4501917 0.45429733 0.4580416 0.46127036 0.4640784 0.46642765 0.4683543 0.46983543 0.47088113 0.47150576 0.47166383 0.47140634 0.47070694 0.46960905 0.4680254 0.46608123 0.46370426 0.46097198 0.45778084 0.45427963 0.45037326 0.4460547 0.44146034 0.4365119 0.4312576 0.42568055 0.41989192 0.4137816 0.40746087 0.40089774 0.39413276 0.38714716 0.37999743 0.37270007 0.36525106 0.35761812 0.34992394 0.34218198 0.3343932 0.32634306 0.31838855 0.31051913 0.30264667 0.2948215 0.28711087 0.27941144 0.27188155 0.2645036 0.2572251 0.25013694 0.24323763 0.23655752 0.23010576 0.22381594 0.2178087 0.21203822 0.20648621 0.20127101 0.19631258 0.19161405 0.18729216 0.18323209 0.17948374 0.17604989 0.17297636 0.17019685 0.16767515 0.16552638 0.16366965 0.16208059 0.16078636 0.1597986 0.15910469 0.15867029 0.1585795 0.15876617 0.1592218 0.15995072 0.16092274 0.16218542 0.16362667 0.16619691 0.16884378 0.17155902 0.1743798 0.17739158 0.18051075 0.18380602 0.1872941 0.1909542 0.1947543 0.1967516)) (quote (0.244576 0.24449519 0.24425362 0.24400458 0.2437563 0.24350122 0.24323346 0.24298173 0.24273779 0.24249214 0.24224542 0.24202524 0.2418249 0.24166145 0.24154122 0.24147661 0.24147743 0.24150588 0.2416779 0.24194253 0.2423404 0.24286536 0.2435338 0.24437393 0.24540779 0.24661297 0.24802374 0.24962847 0.25144923 0.2534686 0.25567684 0.25807095 0.2606171 0.26335925 0.26625964 0.26930198 0.27251264 0.27586797 0.27937382 0.2830417 0.2868434 0.2907876 0.29486597 0.29908818 0.30344087 0.30789122 0.31243888 0.3171131 0.3218858 0.32676366 0.33172944 0.33683208 0.3420279 0.34735176 0.3528173 0.3584107 0.3641235 0.36994818 0.37597534 0.38202438 0.38817492 0.3944698 0.40075612 0.407157 0.41365907 0.42016882 0.42664093 0.4332203 0.43977565 0.44634315 0.45290783 0.45945343 0.46600044 0.47256508 0.47908983 0.4855731 0.4919795 0.4983091 0.50457484 0.5107333 0.5167778 0.52279795 0.5286985 0.5344764 0.5401034 0.54560996 0.5509854 0.55621297 0.56128824 0.56619275 0.5709842 0.575604 0.58004874 0.58431054 0.5883866 0.5923123 0.59608275 0.59968555 0.6031208 0.60638035 0.6094851 0.6123907 0.61513204 0.61767835 0.6201297 0.62228287 0.624341 0.6262064 0.62788105 0.6293419 0.6306455 0.63178987 0.63278175 0.6336143 0.63430495 0.63484627 0.6352287 0.63545335 0.6355152 0.63541514 0.6351481 0.6347163 0.6341066 0.6333181 0.63235844 0.63122124 0.62988067 0.62834377 0.6266096 0.62470305 0.6226055 0.62031407 0.6178282 0.61515815 0.6122966 0.60925985 0.60604305 0.60264975 0.59930194 0.5956677 0.591983 0.5878116 0.583442 0.5788919 0.57415694 0.5692809 0.5642258 0.5589754 0.5536061 0.5481033 0.54247314 0.53672 0.53083325 0.5248568 0.51877565 0.5125863 0.5062765 0.49986827 0.49336985 0.48672947 0.47996894 0.47310153 0.46611103 0.45899877 0.45178518 0.444443 0.43696183 0.4293749 0.42168668 0.41392756 0.40605575 0.39807266 0.38999137 0.3818347 0.3735907 0.3652782 0.35691503 0.34850675 0.34003672 0.33152905 0.32328472 0.3146144 0.3059522 0.29731277 0.2886567 0.27999908 0.27136904 0.2627383 0.2541251 0.24553672 0.23698353 0.22846698 0.21998395 0.21154036 0.20315814 0.1948312 0.18655212 0.17832718 0.17016083 0.16205198 0.15399976 0.14597859 0.13802907 0.13012696 0.122268714 0.114459634 0.10669522 0.098960094 0.091256075 0.0836002 0.07595697 0.068329305 0.060727258 0.0531432 0.045575265 0.037990667 0.030453332 0.022934556 0.015444582 0.007969234 5.259215E-4 -0.0069103134 -0.014342733 -0.021779078 -0.029202667 -0.036597565 -0.043977138 -0.051349484 -0.0587012 -0.06602021 -0.0733297 -0.080605954 -0.08787901 -0.095119424 -0.10233211 -0.10953666 -0.11670844 -0.12388389 -0.13102375 -0.13813944 -0.14522422 -0.15224764 -0.1592214 -0.16611047 -0.17295021 -0.17968124 -0.18628869 -0.19278547 -0.1991254 -0.20533063 -0.21135082 -0.21714723 -0.22271472 -0.22803046 -0.23300547 -0.23759885 -0.24176653 -0.24545948 -0.24865462 -0.25131843 -0.25342143 -0.25498918 -0.25599185 -0.25659654 -0.2565969 -0.25600755 -0.2548715 -0.2532032 -0.25103733 -0.24837873 -0.24524644 -0.24164367 -0.23760332 -0.2331268 -0.22837171 -0.22310183 -0.21760175 -0.21136926 -0.20474057 -0.19773011 -0.19034869 -0.1825112 -0.17431709 -0.1658046 -0.15692444 -0.14772977 -0.13828194 -0.12854363 -0.11854117 -0.108296104 -0.09785247 -0.08723449 -0.07653918 -0.0656614 -0.0546621 -0.04357734 -0.03243022 -0.021178615 -0.009809889 0.0015390804 0.0129054375 0.024251406 0.035635844 0.047014006 0.058496155 0.06989153 0.08120194 0.09235011 0.103499025 0.11450852 0.12534425 0.13595991 0.14637435 0.15658486 0.16656485 0.17629417 0.18579109 0.19499956 0.20393788 0.21208483 0.2206234 0.22877419 0.2366706 0.24418222 0.25091565 0.25798187 0.26477858 0.27123418 0.2773738 0.2832158 0.2887572 0.29402658 0.29903552 0.30376634 0.30824792 0.31244162 0.3163952 0.32006472 0.32346824 0.32664314 0.32956722 0.3322467 0.33467528 0.3368713 0.33887312 0.34080496 0.3424503 0.34390384 0.3451616 0.34627524 0.34736478 0.34823105 0.34899527 0.3497244 0.35031936 0.35086253 0.35135764 0.35168532 0.3520288 0.35218504 0.35227424 0.35233542 0.35224208 0.35210022 0.35199282 0.35181916 0.3516369 0.3514395 0.35129052 0.35101762 0.35082906 0.3506715 0.35064867 0.3507633 0.3508766 0.35108608 0.35137543 0.3516969 0.35209486 0.3524753 0.352915 0.3535115 0.3540247 0.35448658 0.35497725 0.355511 0.35592213 0.35628343 0.3566377 0.3567542 0.35699096 0.35690427 0.3566775 0.35625383 0.355738 0.3550477 0.35390112 0.35264772 0.35105228 0.34910038 0.34684104 0.344202 0.34125686 0.33807433 0.33452922 0.33055452 0.32620648 0.32149714 0.3164212 0.3109198 0.30508384 0.2988067 0.29213786 0.28508967 0.27763653 0.2697856 0.2615708 0.25299102 0.24404252 0.23476178 0.22514634 0.21523543 0.20504719 0.19465527 0.18416156 0.17365724 0.16319017 0.15282823 0.1425986 0.13249406 0.12256118 0.112795286 0.103216246 0.093795 0.08455895 0.07555525 0.0667863 0.05830116 0.05013226 0.042345304 0.034936633 0.027902235 0.021195092 0.01486872 0.008889057 0.0032380254 -0.0020590746 -0.007008567 -0.011613768 -0.015877678 -0.019836929 -0.023420047 -0.026688958 -0.029640394 -0.03227137 -0.034615014 -0.03671291 -0.03849195 -0.040060558 -0.0414385 -0.042570114 -0.043456827 -0.044158884 -0.04465864 -0.045022916 -0.04518663 -0.04522193 -0.04512201 -0.044848238 -0.044472296 -0.043970216 -0.043354195 -0.042631913 -0.041826032 -0.04092019 -0.03993686 -0.03887486 -0.037749607 -0.036554318 -0.035302908 -0.03401548 -0.032678947 -0.03135359 -0.029952465 -0.028613927 -0.027181425 -0.025848365 -0.024542215 -0.023212694 -0.021930855 -0.020616956 -0.0193727 -0.018126708 -0.01686847 -0.015683825 -0.014489082 -0.0132761095 -0.012047986 -0.010803065 -0.009506904 -0.008141761 -0.0069331066 -0.0056329668 -0.0042769793 -0.0028821873 -0.0014582148 6.28766E-5 0.0015728588 0.0031162363 0.0046448293 0.006200485 0.0077903746 0.009389921 0.011002202 0.012652677 0.014305344 0.01592796 0.017551735 0.01924622 0.020917986 0.022489664 0.024032345 0.025597984 0.027143598 0.028566136 0.030025974 0.03136013 0.03273439 0.03392869 0.03516842 0.03618395 0.03714587 0.03801787 0.038866684 0.039583676 0.040138975 0.0405323 0.04071621 0.040854495 0.040816587 0.04061502 0.040252973 0.0397028 0.038914677 0.03801234 0.03703769 0.035889164 0.03459163 0.033117775 0.031514384 0.02975092 0.027861104 0.025862268 0.023744608 0.021524355 0.01916553 0.016784158 0.014358174 0.011951561 0.009452139 0.0068492103 0.004122294 0.0014549802 -0.0012174882 -0.0038997324 -0.0065632514 -0.009299712 -0.011951429 -0.014575548 -0.017141024 -0.01968545 -0.022189536 -0.02466155 -0.026968627 -0.029220762 -0.031361964 -0.03345447 -0.035419397 -0.037268754 -0.03901208 -0.04065488 -0.042213627 -0.043643855 -0.0448597 -0.04597323 -0.046908226 -0.04767976 -0.04829205 -0.04874271 -0.049032543 -0.04914871 -0.04912604 -0.04891246 -0.048548628 -0.04802079 -0.04733 -0.046449233 -0.045433116 -0.044284676 -0.042415984 -0.04051731 -0.038588297 -0.036614757 -0.034548376 -0.032432877 -0.03017639 -0.02788805 -0.025484387 -0.022991209 -0.021721382)) (quote (0.30076912 0.3008603 0.3010939 0.3013205 0.30153012 0.3017279 0.30191314 0.3020615 0.30219853 0.3023316 0.3024713 0.30258292 0.30270508 0.30280423 0.30289742 0.3029902 0.30312008 0.30329096 0.3034348 0.30361477 0.30377877 0.30398306 0.3042786 0.30456996 0.30492395 0.30538768 0.305939 0.30659974 0.30730876 0.30810046 0.3089821 0.30996582 0.31103572 0.31214443 0.31331497 0.31460604 0.31598592 0.31741163 0.31899667 0.3206787 0.32251275 0.32453638 0.3267201 0.3290985 0.33167255 0.33450687 0.33756268 0.34083846 0.3444176 0.34822735 0.35233116 0.35666305 0.36130005 0.36612353 0.37119648 0.37645793 0.38196898 0.38769984 0.39350387 0.39959806 0.40589675 0.41231498 0.4190417 0.4258912 0.43296364 0.44024095 0.44772443 0.4553863 0.4632636 0.47127783 0.47946137 0.48780724 0.49634945 0.50502736 0.51375437 0.5226535 0.53175146 0.54096026 0.5502908 0.5597583 0.5693614 0.57914705 0.58902967 0.59900237 0.6090816 0.61920465 0.6294256 0.6396949 0.65000946 0.6603553 0.67074156 0.6811295 0.6915367 0.70196677 0.7123476 0.7227373 0.7331212 0.7434612 0.7537607 0.764009 0.7742091 0.7843273 0.79439754 0.80441547 0.81431556 0.8242675 0.83409477 0.8439043 0.85370416 0.8635327 0.87332207 0.88307786 0.8927998 0.90247477 0.9121161 0.9217209 0.93126756 0.9407569 0.9501861 0.95955587 0.9688797 0.97814024 0.98731655 0.9964256 1.0054748 1.0144724 1.023392 1.0322671 1.0410826 1.0498204 1.0584774 1.0670484 1.0755158 1.0838882 1.0921424 1.1002927 1.1083219 1.1162106 1.124065 1.1317672 1.1391219 1.1466282 1.1539961 1.1612326 1.1683371 1.1752653 1.1820798 1.1887462 1.1952602 1.2016323 1.2078521 1.2139113 1.2198161 1.2255427 1.2311136 1.2365093 1.241742 1.2468007 1.2517157 1.2564296 1.2609991 1.265389 1.2696182 1.2737084 1.2776154 1.281378 1.2849935 1.2884561 1.2917466 1.2948878 1.2978752 1.3007207 1.3033698 1.3058519 1.3081755 1.3103069 1.3122671 1.3140206 1.3155766 1.3169342 1.3180252 1.3189906 1.3197105 1.3201915 1.3204506 1.3204918 1.3202635 1.3197731 1.3190805 1.3181255 1.3169146 1.3154795 1.3138234 1.311922 1.309789 1.3074244 1.3048434 1.3020716 1.2990545 1.2957901 1.2922983 1.2885459 1.2845188 1.2801989 1.2756116 1.2707262 1.2655401 1.260061 1.2542524 1.2481382 1.2417 1.2349426 1.2278822 1.2204619 1.2127189 1.2046967 1.1963409 1.187628 1.178585 1.1691977 1.1594727 1.1494191 1.1390309 1.1283143 1.1172778 1.1058737 1.0941535 1.0820656 1.0696366 1.0568268 1.0436671 1.0301472 1.0162804 1.0020486 0.9874725 0.9725306 0.95729417 0.9417145 0.9258366 0.9096596 0.8932139 0.87651605 0.859613 0.84254265 0.8253428 0.8079944 0.7905665 0.7730446 0.7554729 0.73787684 0.7203138 0.7027574 0.68529147 0.66799045 0.6508319 0.6338949 0.61718637 0.60072017 0.58450097 0.56853617 0.55283267 0.5373745 0.52220887 0.5074845 0.4929386 0.47860843 0.46451062 0.45057333 0.43692595 0.4235629 0.41054088 0.39790457 0.38563323 0.37371376 0.3621903 0.35106477 0.340203 0.32996693 0.32020372 0.31083477 0.3019849 0.29356846 0.28564802 0.27824637 0.2713396 0.26494282 0.25906813 0.253716 0.24889729 0.24461578 0.24089395 0.23765458 0.23510003 0.23300135 0.23138982 0.23029496 0.22965619 0.22948393 0.22988145 0.23065461 0.23196879 0.2338006 0.23609081 0.2388802 0.24202475 0.24566746 0.249845 0.25452074 0.25969437 0.26537046 0.2714285 0.277719 0.2845138 0.2914608 0.2989232 0.30664125 0.3146448 0.32291523 0.33141434 0.33980238 0.34900036 0.35821494 0.3677077 0.37728402 0.38678706 0.39675927 0.40674382 0.41682884 0.42695546 0.43710244 0.44733825 0.4575247 0.4676915 0.4778093 0.4878423 0.49783215 0.50764996 0.51735026 0.5269333 0.5363568 0.5456282 0.5547368 0.5636791 0.5724234 0.5809918 0.5893647 0.5974769 0.6054126 0.61310196 0.62059957 0.6278855 0.63487256 0.64165074 0.64820004 0.6545193 0.66063047 0.66652686 0.6720811 0.67741216 0.6825177 0.68738187 0.6919378 0.6962171 0.70023007 0.70401645 0.707497 0.7106808 0.7135716 0.7161839 0.7184715 0.7204534 0.7221581 0.7235308 0.7246236 0.7254304 0.72596866 0.7262898 0.726407 0.7263308 0.72610456 0.725636 0.7250803 0.72438944 0.723608 0.72270555 0.72169 0.7206575 0.71959985 0.7184043 0.71728224 0.7160752 0.71489484 0.7137358 0.712574 0.7114507 0.71030605 0.7093296 0.7082447 0.7072444 0.7063826 0.7055412 0.7046981 0.7039156 0.7030485 0.70235014 0.7017814 0.70123107 0.7007589 0.7003454 0.6999654 0.6995089 0.699277 0.6990473 0.69871605 0.6984569 0.6982174 0.697963 0.6978615 0.6976124 0.6973854 0.69709987 0.69704134 0.69684786 0.6967714 0.69668305 0.69649464 0.6963144 0.69611294 0.69601477 0.6957419 0.69540394 0.69502014 0.69465924 0.69404847 0.6933251 0.6924853 0.69149125 0.69027067 0.6888434 0.6872597 0.6853573 0.68317497 0.68058455 0.6778382 0.6747606 0.671421 0.66773034 0.6637365 0.65945077 0.6548929 0.64990914 0.6447692 0.6393584 0.6336205 0.62764717 0.6214365 0.6149059 0.6082938 0.60145355 0.59435606 0.58711637 0.5798477 0.57236696 0.564873 0.5572211 0.5496026 0.54184705 0.5341029 0.52646 0.5188258 0.51131517 0.5039379 0.49671787 0.48968694 0.48283458 0.47623706 0.46985668 0.46374533 0.45792618 0.45237067 0.44711456 0.44217312 0.43757415 0.43322384 0.42917135 0.42542622 0.42201647 0.41886473 0.41597378 0.41331798 0.41086614 0.40869814 0.40683448 0.40519622 0.40375012 0.402551 0.40157077 0.4008176 0.4002707 0.39993572 0.3997102 0.39983082 0.40008384 0.40046674 0.40095153 0.40153348 0.4021298 0.40281832 0.40364185 0.40453103 0.40542275 0.4063725 0.40732005 0.408244 0.4091261 0.41002196 0.4108699 0.41168207 0.41241345 0.41313288 0.41388497 0.4145402 0.41513073 0.4155732 0.41598088 0.41626483 0.41656673 0.41673356 0.41687566 0.416851 0.416811 0.41670346 0.4164946 0.41614595 0.4157659 0.41528532 0.41473645 0.41421556 0.4135466 0.4128385 0.41205144 0.411238 0.41039208 0.40954477 0.40869436 0.40775442 0.40678886 0.4058269 0.40488768 0.4039468 0.4030384 0.4021432 0.40127254 0.40042332 0.3996246 0.39886802 0.3981163 0.39733186 0.39658585 0.39595836 0.39535463 0.3948747 0.3944558 0.39408186 0.3937838 0.39353907 0.39338207 0.39323428 0.39312258 0.39312375 0.39316317 0.39323848 0.39344078 0.39362365 0.39379212 0.3940047 0.39421397 0.394474 0.39473158 0.39495826 0.39518493 0.39543143 0.39564458 0.39585924 0.39604658 0.39622754 0.39644596 0.3966152 0.39678425 0.39694625 0.397117 0.39725596 0.39740035 0.39753237 0.39764047 0.39777613 0.3978953 0.39800787 0.39809233 0.39815554 0.3982331 0.39830485 0.39837107 0.39839682 0.3984105 0.39844283 0.3984722 0.39854422 0.39861393 0.39864585)) (quotequote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list 0.30076912 0.3008603 0.3010939 0.3013205 0.30153012 0.3017279 0.30191314 0.3020615 0.30219853 0.3023316 0.3024713 0.30258292 0.30270508 0.30280423 0.30289742 0.3029902 0.30312008 0.30329096 0.3034348 0.30361477 0.30377877 0.30398306 0.3042786 0.30456996 0.30492395 0.30538768 0.305939 0.30659974 0.30730876 0.30810046 0.3089821 0.30996582 0.31103572 0.31214443 0.31331497 0.31460604 0.31598592 0.31741163 0.31899667 0.3206787 0.32251275 0.32453638 0.3267201 0.3290985 0.33167255 0.33450687 0.33756268 0.34083846 0.3444176 0.34822735 0.35233116 0.35666305 0.36130005 0.36612353 0.37119648 0.37645793 0.38196898 0.38769984 0.39350387 0.39959806 0.40589675 0.41231498 0.4190417 0.4258912 0.43296364 0.44024095 0.44772443 0.4553863 0.4632636 0.47127783 0.47946137 0.48780724 0.49634945 0.50502736 0.51375437 0.5226535 0.53175146 0.54096026 0.5502908 0.5597583 0.5693614 0.57914705 0.58902967 0.59900237 0.6090816 0.61920465 0.6294256 0.6396949 0.65000946 0.6603553 0.67074156 0.6811295 0.6915367 0.70196677 0.7123476 0.7227373 0.7331212 0.7434612 0.7537607 0.764009 0.7742091 0.7843273 0.79439754 0.80441547 0.81431556 0.8242675 0.83409477 0.8439043 0.85370416 0.8635327 0.87332207 0.88307786 0.8927998 0.90247477 0.9121161 0.9217209 0.93126756 0.9407569 0.9501861 0.95955587 0.9688797 0.97814024 0.98731655 0.9964256 1.0054748 1.0144724 1.023392 1.0322671 1.0410826 1.0498204 1.0584774 1.0670484 1.0755158 1.0838882 1.0921424 1.1002927 1.1083219 1.1162106 1.124065 1.1317672 1.1391219 1.1466282 1.1539961 1.1612326 1.1683371 1.1752653 1.1820798 1.1887462 1.1952602 1.2016323 1.2078521 1.2139113 1.2198161 1.2255427 1.2311136 1.2365093 1.241742 1.2468007 1.2517157 1.2564296 1.2609991 1.265389 1.2696182 1.2737084 1.2776154 1.281378 1.2849935 1.2884561 1.2917466 1.2948878 1.2978752 1.3007207 1.3033698 1.3058519 1.3081755 1.3103069 1.3122671 1.3140206 1.3155766 1.3169342 1.3180252 1.3189906 1.3197105 1.3201915 1.3204506 1.3204918 1.3202635 1.3197731 1.3190805 1.3181255 1.3169146 1.3154795 1.3138234 1.311922 1.309789 1.3074244 1.3048434 1.3020716 1.2990545 1.2957901 1.2922983 1.2885459 1.2845188 1.2801989 1.2756116 1.2707262 1.2655401 1.260061 1.2542524 1.2481382 1.2417 1.2349426 1.2278822 1.2204619 1.2127189 1.2046967 1.1963409 1.187628 1.178585 1.1691977 1.1594727 1.1494191 1.1390309 1.1283143 1.1172778 1.1058737 1.0941535 1.0820656 1.0696366 1.0568268 1.0436671 1.0301472 1.0162804 1.0020486 0.9874725 0.9725306 0.95729417 0.9417145 0.9258366 0.9096596 0.8932139 0.87651605 0.859613 0.84254265 0.8253428 0.8079944 0.7905665 0.7730446 0.7554729 0.73787684 0.7203138 0.7027574 0.68529147 0.66799045 0.6508319 0.6338949 0.61718637 0.60072017 0.58450097 0.56853617 0.55283267 0.5373745 0.52220887 0.5074845 0.4929386 0.47860843 0.46451062 0.45057333 0.43692595 0.4235629 0.41054088 0.39790457 0.38563323 0.37371376 0.3621903 0.35106477 0.340203 0.32996693 0.32020372 0.31083477 0.3019849 0.29356846 0.28564802 0.27824637 0.2713396 0.26494282 0.25906813 0.253716 0.24889729 0.24461578 0.24089395 0.23765458 0.23510003 0.23300135 0.23138982 0.23029496 0.22965619 0.22948393 0.22988145 0.23065461 0.23196879 0.2338006 0.23609081 0.2388802 0.24202475 0.24566746 0.249845 0.25452074 0.25969437 0.26537046 0.2714285 0.277719 0.2845138 0.2914608 0.2989232 0.30664125 0.3146448 0.32291523 0.33141434 0.33980238 0.34900036 0.35821494 0.3677077 0.37728402 0.38678706 0.39675927 0.40674382 0.41682884 0.42695546 0.43710244 0.44733825 0.4575247 0.4676915 0.4778093 0.4878423 0.49783215 0.50764996 0.51735026 0.5269333 0.5363568 0.5456282 0.5547368 0.5636791 0.5724234 0.5809918 0.5893647 0.5974769 0.6054126 0.61310196 0.62059957 0.6278855 0.63487256 0.64165074 0.64820004 0.6545193 0.66063047 0.66652686 0.6720811 0.67741216 0.6825177 0.68738187 0.6919378 0.6962171 0.70023007 0.70401645 0.707497 0.7106808 0.7135716 0.7161839 0.7184715 0.7204534 0.7221581 0.7235308 0.7246236 0.7254304 0.72596866 0.7262898 0.726407 0.7263308 0.72610456 0.725636 0.7250803 0.72438944 0.723608 0.72270555 0.72169 0.7206575 0.71959985 0.7184043 0.71728224 0.7160752 0.71489484 0.7137358 0.712574 0.7114507 0.71030605 0.7093296 0.7082447 0.7072444 0.7063826 0.7055412 0.7046981 0.7039156 0.7030485 0.70235014 0.7017814 0.70123107 0.7007589 0.7003454 0.6999654 0.6995089 0.699277 0.6990473 0.69871605 0.6984569 0.6982174 0.697963 0.6978615 0.6976124 0.6973854 0.69709987 0.69704134 0.69684786 0.6967714 0.69668305 0.69649464 0.6963144 0.69611294 0.69601477 0.6957419 0.69540394 0.69502014 0.69465924 0.69404847 0.6933251 0.6924853 0.69149125 0.69027067 0.6888434 0.6872597 0.6853573 0.68317497 0.68058455 0.6778382 0.6747606 0.671421 0.66773034 0.6637365 0.65945077 0.6548929 0.64990914 0.6447692 0.6393584 0.6336205 0.62764717 0.6214365 0.6149059 0.6082938 0.60145355 0.59435606 0.58711637 0.5798477 0.57236696 0.564873 0.5572211 0.5496026 0.54184705 0.5341029 0.52646 0.5188258 0.51131517 0.5039379 0.49671787 0.48968694 0.48283458 0.47623706 0.46985668 0.46374533 0.45792618 0.45237067 0.44711456 0.44217312 0.43757415 0.43322384 0.42917135 0.42542622 0.42201647 0.41886473 0.41597378 0.41331798 0.41086614 0.40869814 0.40683448 0.40519622 0.40375012 0.402551 0.40157077 0.4008176 0.4002707 0.39993572 0.3997102 0.39983082 0.40008384 0.40046674 0.40095153 0.40153348 0.4021298 0.40281832 0.40364185 0.40453103 0.40542275 0.4063725 0.40732005 0.408244 0.4091261 0.41002196 0.4108699 0.41168207 0.41241345 0.41313288 0.41388497 0.4145402 0.41513073 0.4155732 0.41598088 0.41626483 0.41656673 0.41673356 0.41687566 0.416851 0.416811 0.41670346 0.4164946 0.41614595 0.4157659 0.41528532 0.41473645 0.41421556 0.4135466 0.4128385 0.41205144 0.411238 0.41039208 0.40954477 0.40869436 0.40775442 0.40678886 0.4058269 0.40488768 0.4039468 0.4030384 0.4021432 0.40127254 0.40042332 0.3996246 0.39886802 0.3981163 0.39733186 0.39658585 0.39595836 0.39535463 0.3948747 0.3944558 0.39408186 0.3937838 0.39353907 0.39338207 0.39323428 0.39312258 0.39312375 0.39316317 0.39323848 0.39344078 0.39362365 0.39379212 0.3940047 0.39421397 0.394474 0.39473158 0.39495826 0.39518493 0.39543143 0.39564458 0.39585924 0.39604658 0.39622754 0.39644596 0.3966152 0.39678425 0.39694625 0.397117 0.39725596 0.39740035 0.39753237 0.39764047 0.39777613 0.3978953 0.39800787 0.39809233 0.39815554 0.3982331 0.39830485 0.39837107 0.39839682 0.3984105 0.39844283 0.3984722 0.39854422 0.39861393 0.39864585))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.1967516 0.19874951 0.20287548 0.20713124 0.21152693 0.2160683 0.22072146 0.22548235 0.23023123 0.23508477 0.23998045 0.24492552 0.24989528 0.2548593 0.25984186 0.26476693 0.2695868 0.2743979 0.2791065 0.28385764 0.28834665 0.2928479 0.29705414 0.30134285 0.30526742 0.30921036 0.31294128 0.31633094 0.31969586 0.32281443 0.32570577 0.32839784 0.3308552 0.3330648 0.33504078 0.33678225 0.33830947 0.33959404 0.34067145 0.34147957 0.3420195 0.34231725 0.34238994 0.34223595 0.34194303 0.34131274 0.34043965 0.33932337 0.33804405 0.33652326 0.33477923 0.33277386 0.33061197 0.32822028 0.32564276 0.32280293 0.3198143 0.31664482 0.3133087 0.30982706 0.30618244 0.30244887 0.29855916 0.29450867 0.29036158 0.28598586 0.28175128 0.2772091 0.27271903 0.2682713 0.26365814 0.25898206 0.25430802 0.24959535 0.24489588 0.24015637 0.23538585 0.23063307 0.22594798 0.2212834 0.21663524 0.21202617 0.20742788 0.20295565 0.19856538 0.194227 0.1899507 0.18581678 0.18178429 0.17786151 0.17402476 0.17031297 0.16675423 0.16329755 0.15998803 0.1568036 0.15371886 0.15078299 0.14798162 0.14527884 0.14271885 0.14029472 0.13797103 0.13579765 0.1337365 0.1318165 0.13000509 0.12822855 0.12660702 0.12509424 0.12365277 0.122283966 0.120893106 0.11965078 0.11841632 0.117266536 0.116118685 0.11504372 0.113996916 0.112975575 0.11197091 0.11097638 0.10998688 0.10902148 0.10803181 0.10704115 0.10604775 0.10503937 0.10405909 0.10300117 0.10194736 0.100883596 0.099827886 0.09874097 0.09758753 0.09647507 0.09531312 0.094153576 0.09294278 0.091707356 0.0904531 0.08920812 0.08793979 0.08669053 0.085396685 0.08401185 0.08268368 0.08132201 0.079931036 0.078509934 0.0770263 0.07555771 0.07402291 0.072569706 0.07108175 0.0695433 0.0679802 0.06641082 0.06481654 0.0632251 0.061587986 0.059926674 0.058168434 0.056436997 0.054675617 0.052894615 0.051100605 0.049239856 0.047404867 0.04555315 0.04365713 0.041754306 0.03978761 0.0378516 0.035899863 0.033931408 0.03195039 0.02995202 0.027945627 0.025934034 0.023951276 0.02195186 0.019981508 0.017972064 0.015977759 0.01396776 0.011989799 0.010024593 0.008078005 0.006143907 0.004226336 0.0023237628 4.331317E-4 -0.0014441764 -0.003319239 -0.0051837308 -0.007064724 -0.008917582 -0.010752824 -0.012591652 -0.014420332 -0.01622475 -0.018039337 -0.01984448 -0.021637215 -0.023446838 -0.02525458 -0.027102532 -0.028953853 -0.030830551 -0.03272816 -0.034642633 -0.036577087 -0.038527467 -0.040486917 -0.04245052 -0.044417777 -0.046388474 -0.04834898 -0.050311353 -0.052259956 -0.054225665 -0.056177665 -0.058122516 -0.060063206 -0.062000245 -0.063930996 -0.06583014 -0.06771488 -0.06959265 -0.071450666 -0.07328338 -0.07510089 -0.076909445 -0.0786952 -0.08047369 -0.08224046 -0.08399648 -0.08574899 -0.08748807 -0.08922484 -0.090956636 -0.092691 -0.09442615 -0.096162155 -0.09789398 -0.09961728 -0.10133931 -0.103065275 -0.10478138 -0.10648092 -0.1081818 -0.10985947 -0.11151501 -0.11315196 -0.11476727 -0.116372675 -0.117966116 -0.119535245 -0.121102706 -0.12264483 -0.12417042 -0.12569228 -0.12720868 -0.1287032 -0.13020404 -0.13167848 -0.13314735 -0.13373296)) (quote (-0.021721382 -0.02045115 -0.017839715 -0.015213015 -0.012484399 -0.00973965 -0.0069474415 -0.004112306 -0.0012744052 0.0015686804 0.0044344296 0.00729554 0.010190407 0.012990615 0.01585597 0.018699207 0.021417829 0.024214687 0.026916003 0.029432126 0.032087718 0.034466293 0.036969278 0.039365825 0.04184783 0.044098955 0.046297092 0.048555065 0.050555937 0.052466177 0.054273647 0.05610407 0.057806298 0.059501063 0.06110417 0.06261308 0.064026244 0.06534956 0.06659505 0.067776226 0.06882766 0.06978434 0.0706873 0.07149866 0.07205227 0.072770484 0.07331257 0.07380257 0.07419369 0.07444118 0.07466845 0.074782744 0.074821614 0.07471176 0.07457587 0.07426956 0.07393297 0.07351061 0.07300477 0.07242535 0.07177567 0.071047634 0.07023331 0.06925135 0.068207786 0.067303136 0.066175886 0.06501477 0.063860245 0.06246048 0.061187867 0.059781544 0.058389735 0.056877897 0.05538498 0.053870075 0.052246455 0.050708894 0.049130544 0.047630083 0.046087943 0.04465163 0.043236733 0.041875955 0.040552974 0.039318536 0.038114626 0.03701429 0.03598239 0.035036434 0.034145996 0.03335361 0.03269172 0.032084763 0.03160266 0.031198446 0.030876775 0.030685485 0.03056845 0.03051809 0.030592196 0.030758413 0.03100795 0.031348318 0.03174262 0.032230657 0.032803495 0.033441183 0.03418533 0.03497921 0.035834674 0.036758896 0.037768957 0.038787775 0.039888833 0.041012247 0.04220541 0.043403216 0.04465485 0.04593893 0.047214363 0.048526336 0.049846337 0.05118218 0.05249368 0.053837516 0.055166655 0.05648629 0.05781209 0.05908299 0.060372584 0.06163149 0.062900745 0.064142175 0.06534561 0.06654697 0.06771338 0.068857156 0.06999466 0.07109336 0.0722013 0.07326859 0.07430702 0.07531621 0.07630954 0.07727901 0.07821851 0.079137534 0.08002474 0.08089928 0.08173096 0.08252946 0.083304316 0.084055215 0.084775456 0.08546094 0.0861165 0.08678822 0.08740626 0.08797705 0.08850573 0.088999845 0.0894592 0.08989428 0.09028521 0.09063687 0.090971895 0.091288686 0.09157561 0.09182536 0.092049346 0.09224104 0.09239972 0.092539385 0.09264842 0.09273842 0.092799574 0.092831046 0.09284612 0.09282378 0.09279464 0.09273087 0.09266338 0.09255647 0.09243689 0.09231018 0.09215897 0.091979824 0.09179296 0.0915885 0.09135712 0.09110347 0.09083807 0.09055218 0.09026509 0.08994395 0.089593835 0.08922498 0.08884364 0.08843119 0.0879885 0.087537356 0.087059885 0.08654817 0.08600934 0.08540949 0.08475566 0.0840499 0.08330826 0.08250705 0.08164597 0.080749504 0.079809316 0.07881021 0.077774845 0.07667885 0.075556286 0.07439956 0.07322259 0.072013654 0.070770785 0.06951353 0.06822494 0.066917405 0.06559532 0.06426247 0.06292961 0.06159163 0.060251758 0.058904108 0.057551925 0.05617746 0.054805935 0.05343012 0.052047667 0.050652933 0.04924316 0.047817238 0.04637354 0.044913438 0.043431666 0.04195558 0.040484015 0.039008864 0.037526716 0.036057897 0.03460128 0.03316267 0.031749353 0.030349713 0.028985683 0.027653853 0.026342582 0.025052058 0.023808683 0.02259664 0.02138756 0.020224549 0.019111058 0.018028364 0.016988429 0.015988557 0.015030899 0.014109184 0.013224038 0.012380203 0.011568256 0.010783182 0.010488485)) (quote (0.39864585 0.39867774 0.39873448 0.3987694 0.39883193 0.3989125 0.39898932 0.3990704 0.3991487 0.39927298 0.39943078 0.39957777 0.3997797 0.40003565 0.4003031 0.4005804 0.4008813 0.40121725 0.40152004 0.40203956 0.40238655 0.4029545 0.4033558 0.40391862 0.40430433 0.40491834 0.40550524 0.4059017 0.40653074 0.40711945 0.40774056 0.4083246 0.4089107 0.4094508 0.40998635 0.41054922 0.41109303 0.41162804 0.41214657 0.41263342 0.4130831 0.41351706 0.41392553 0.41429403 0.41461292 0.41494644 0.4152804 0.4155418 0.41578767 0.41602975 0.41619608 0.41635156 0.41646495 0.4165887 0.41667074 0.4167184 0.4167237 0.41671973 0.41670933 0.4166513 0.41661662 0.41659695 0.41653487 0.41646203 0.4164294 0.41615728 0.41611668 0.4159568 0.4157795 0.4158034 0.41568372 0.41563553 0.4156003 0.41565543 0.41567323 0.41577515 0.4159804 0.41614455 0.41644013 0.41668797 0.41708285 0.41747558 0.41790864 0.41847998 0.4190635 0.41968155 0.42035887 0.42111522 0.4219231 0.42277092 0.42365107 0.4246009 0.42563608 0.42669544 0.42782345 0.42898563 0.4302083 0.43149114 0.43282336 0.43418705 0.43564713 0.43709987 0.4386235 0.4401876 0.44177112 0.44342703 0.4451248 0.44684595 0.4486463 0.4504721 0.45230955 0.45422536 0.45614043 0.45818844 0.46022913 0.46238145 0.46453884 0.46674934 0.46902278 0.47133195 0.473675 0.4760848 0.47851014 0.48097643 0.4834825 0.48602572 0.48857814 0.49116236 0.49380592 0.49638948 0.49899852 0.5016206 0.5042801 0.506941 0.5095656 0.5122173 0.51487345 0.5174694 0.52011335 0.5227138 0.52532185 0.52793867 0.53050817 0.5332141 0.5358569 0.5383766 0.5410047 0.54360676 0.54618615 0.5487492 0.5512151 0.5536811 0.5561881 0.55879087 0.56137544 0.56395895 0.56650436 0.5689891 0.5715006 0.5741427 0.5767396 0.5793472 0.58183647 0.5844519 0.58710236 0.5897407 0.5923912 0.5949159 0.59760374 0.60029394 0.60299546 0.6056888 0.6083148 0.61108715 0.61388404 0.616651 0.6194688 0.6222944 0.62509704 0.62793625 0.63076795 0.6336338 0.63643533 0.63931215 0.6421754 0.64508844 0.6479661 0.65080256 0.65363455 0.6564268 0.65920854 0.66198397 0.6647342 0.6674754 0.6701802 0.67287076 0.675507 0.67816246 0.68078286 0.68337185 0.68595106 0.68849427 0.6910075 0.69351876 0.6960425 0.6985476 0.70106817 0.70357287 0.7060914 0.7085917 0.71108437 0.71357865 0.71604604 0.71849484 0.7209281 0.7233544 0.7257444 0.72811985 0.73043764 0.7327284 0.7350142 0.73722065 0.7394115 0.741551 0.7436566 0.74569375 0.7476619 0.74961865 0.75150866 0.75333876 0.7550948 0.75682676 0.75849957 0.76012117 0.76164407 0.7631431 0.76458276 0.7659725 0.76732046 0.76861895 0.7698828 0.77112425 0.77233977 0.7735415 0.7747352 0.7759451 0.77715254 0.77839554 0.779673 0.78098244 0.7823266 0.78371817 0.7851641 0.7866611 0.7881956 0.7897914 0.79141605 0.79309887 0.7948757 0.7967119 0.79859835 0.800583 0.8026228 0.8047574 0.8069905 0.80924517 0.81159175 0.8140386 0.81505)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list 0.39864585 0.39867774 0.39873448 0.3987694 0.39883193 0.3989125 0.39898932 0.3990704 0.3991487 0.39927298 0.39943078 0.39957777 0.3997797 0.40003565 0.4003031 0.4005804 0.4008813 0.40121725 0.40152004 0.40203956 0.40238655 0.4029545 0.4033558 0.40391862 0.40430433 0.40491834 0.40550524 0.4059017 0.40653074 0.40711945 0.40774056 0.4083246 0.4089107 0.4094508 0.40998635 0.41054922 0.41109303 0.41162804 0.41214657 0.41263342 0.4130831 0.41351706 0.41392553 0.41429403 0.41461292 0.41494644 0.4152804 0.4155418 0.41578767 0.41602975 0.41619608 0.41635156 0.41646495 0.4165887 0.41667074 0.4167184 0.4167237 0.41671973 0.41670933 0.4166513 0.41661662 0.41659695 0.41653487 0.41646203 0.4164294 0.41615728 0.41611668 0.4159568 0.4157795 0.4158034 0.41568372 0.41563553 0.4156003 0.41565543 0.41567323 0.41577515 0.4159804 0.41614455 0.41644013 0.41668797 0.41708285 0.41747558 0.41790864 0.41847998 0.4190635 0.41968155 0.42035887 0.42111522 0.4219231 0.42277092 0.42365107 0.4246009 0.42563608 0.42669544 0.42782345 0.42898563 0.4302083 0.43149114 0.43282336 0.43418705 0.43564713 0.43709987 0.4386235 0.4401876 0.44177112 0.44342703 0.4451248 0.44684595 0.4486463 0.4504721 0.45230955 0.45422536 0.45614043 0.45818844 0.46022913 0.46238145 0.46453884 0.46674934 0.46902278 0.47133195 0.473675 0.4760848 0.47851014 0.48097643 0.4834825 0.48602572 0.48857814 0.49116236 0.49380592 0.49638948 0.49899852 0.5016206 0.5042801 0.506941 0.5095656 0.5122173 0.51487345 0.5174694 0.52011335 0.5227138 0.52532185 0.52793867 0.53050817 0.5332141 0.5358569 0.5383766 0.5410047 0.54360676 0.54618615 0.5487492 0.5512151 0.5536811 0.5561881 0.55879087 0.56137544 0.56395895 0.56650436 0.5689891 0.5715006 0.5741427 0.5767396 0.5793472 0.58183647 0.5844519 0.58710236 0.5897407 0.5923912 0.5949159 0.59760374 0.60029394 0.60299546 0.6056888 0.6083148 0.61108715 0.61388404 0.616651 0.6194688 0.6222944 0.62509704 0.62793625 0.63076795 0.6336338 0.63643533 0.63931215 0.6421754 0.64508844 0.6479661 0.65080256 0.65363455 0.6564268 0.65920854 0.66198397 0.6647342 0.6674754 0.6701802 0.67287076 0.675507 0.67816246 0.68078286 0.68337185 0.68595106 0.68849427 0.6910075 0.69351876 0.6960425 0.6985476 0.70106817 0.70357287 0.7060914 0.7085917 0.71108437 0.71357865 0.71604604 0.71849484 0.7209281 0.7233544 0.7257444 0.72811985 0.73043764 0.7327284 0.7350142 0.73722065 0.7394115 0.741551 0.7436566 0.74569375 0.7476619 0.74961865 0.75150866 0.75333876 0.7550948 0.75682676 0.75849957 0.76012117 0.76164407 0.7631431 0.76458276 0.7659725 0.76732046 0.76861895 0.7698828 0.77112425 0.77233977 0.7735415 0.7747352 0.7759451 0.77715254 0.77839554 0.779673 0.78098244 0.7823266 0.78371817 0.7851641 0.7866611 0.7881956 0.7897914 0.79141605 0.79309887 0.7948757 0.7967119 0.79859835 0.800583 0.8026228 0.8047574 0.8069905 0.80924517 0.81159175 0.8140386 0.81505))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (2.050877E-4 2.179146E-4 2.385974E-4 2.388358E-4 2.600551E-4 2.968311E-4 4.099011E-4 2.948046E-4 3.607273E-4 4.060268E-4 4.526377E-4 5.099177E-4 5.571246E-4 6.124973E-4 6.763935E-4 7.221103E-4 7.808208E-4 9.206534E-4 9.427668E-4 9.844304E-4 9.026528E-4 0.0010724664 0.0011143684 0.0011206867 0.0011575818 0.001184404 0.0011764766 0.001274109 0.0013025404 0.0012646318 0.0013725162 0.0014106633 0.0013719798 0.0014291406 0.0015041232 0.00151968 0.0014810562 0.0015730858 0.0016359092 0.0016381742 0.0016598702 0.0017219782 0.0017037392 0.0017527938 0.001770258 0.0017975568 0.0018036366 0.0018324256 0.0018094778 0.0018987656 0.0019286276 0.001951158 0.0019731522 0.0020346044 0.0020772817 0.0020821097 0.0021114943 0.0021586418 0.002170205 0.0021776557 0.002220571 0.0022830367 0.0022886992 0.0023023486 0.0023441913 0.0023936627 0.00237602 0.0024567247 0.002506137 0.002522409 0.0024953485 0.002579093 0.002594471 0.002634585 0.002652109 0.0026564598 0.00258106 0.0026003123 0.0026313665 0.0025378466 0.0025947094 0.002542019 0.0024939776 0.0024674537 0.002411008 0.0023482442 0.0022960303 0.002226293 0.0022283197 0.0020837188 0.002003014 0.0019837618 0.0018578172 0.0018713474 0.0016748906 0.0015345812 0.0014047624 0.0012940765 0.0011686088 9.676814E-4 8.657576E-4 6.507635E-4 5.403757E-4 3.375411E-4 1.420975E-4 -8.15392E-5 -2.326965E-4 -4.295707E-4 -6.304384E-4 -8.317828E-4 -0.0010625124 -0.001282692 -0.001518786 -0.001785338 -0.0020118952 -0.0022761822 -0.0025151968 -0.002766192 -0.003024876 -0.0032780767 -0.0035378337 -0.0038971305 -0.004018903 -0.004366398 -0.0045714975 -0.004720986 -0.005089104 -0.005324781 -0.005517125 -0.0057427883 -0.005992413 -0.006246805 -0.006457567 -0.0067092776 -0.0069417954 -0.007187188 -0.0073751807 -0.0076017375 -0.0078623295 -0.008060157 -0.0082806945 -0.008518755 -0.008747697 -0.008982241 -0.009181559 -0.009388059 -0.009584457 -0.009785742 -0.00999257 -0.01018551 -0.010366231 -0.010572374 -0.010729879 -0.010905385 -0.011089593 -0.011212915 -0.0113654435 -0.0115070045 -0.011653453 -0.011804491 -0.011903971 -0.012011588 -0.012188673 -0.012262255 -0.012379855 -0.012456894 -0.012555361 -0.012665302 -0.012740195 -0.012756258 -0.012807667 -0.012784913 -0.012782723 -0.012707874 -0.012641802 -0.0125076175 -0.012384146 -0.012208387 -0.012043856 -0.011811227 -0.011680491 -0.011513703 -0.011457037 -0.011043996 -0.010836884 -0.0107900705 -0.010410947 -0.010176765 -0.010011023 -0.0098507255 -0.009486107 -0.009329924 -0.009039875 -0.008663692 -0.008328959 -0.008116748 -0.007718906 -0.0073812753 -0.007014252 -0.006628081 -0.0062289313 -0.005853139 -0.0057105795 -0.0050764606 -0.0049527288 -0.0042790175 -0.0042843074 -0.0037537068 -0.00342758 -0.0030741545 -0.0026811955 -0.002324 -0.002058938 -0.00142774 -0.001283601 -0.0010185392 -7.511824E-4 -5.218238E-4 -2.497286E-4 -5.45382E-5 1.928508E-4 3.865361E-4 5.861372E-4 8.037686E-4 9.197444E-4 0.0011242628 0.0013309866 0.0015037806 0.0016514064 0.0017738192 0.0018962026 0.0020179453 0.0021350086 0.0022209138 0.0023102612 0.0023928434 0.0024407208 0.0025046617 0.0025665313 0.0026232973 0.0026766213 0.0026917756 0.002736725 0.002836086 0.0027249903 0.0028104782 0.0027886033 0.0027643517 0.00273107 0.0027090386 0.0026147738 0.0025475023 0.0024630057 0.0023991093 0.0023144484 0.0022476167 0.0021670312 0.002178833 0.0020935014 0.0020333156 0.001986295 0.0019690693 0.0018913372 0.0018355324 0.0018401296 0.0018417575 0.001814995 0.001820784 0.001833979 0.0018613637 0.0019206292 0.0020332262 0.002082739 0.002235938 0.0023538992 0.0025256873 0.0026287176 0.0028215275 0.0029632598 0.0030876696 0.0032356102 0.0033663344 0.0036037583 0.0037295057 0.0038483469 0.003997393 0.004165766 0.004259532 0.0044116466 0.0045554624 0.004695745 0.0048373817 0.0049766954 0.0052347407 0.0053596124 0.005480062 0.0056214333 0.0057407953 0.0058832574 0.006005753 0.0061517283 0.006336458 0.0064286664 0.006583847 0.0066615078)) (quote (-7.754803E-4 -7.889271E-4 -8.205771E-4 -8.312464E-4 -8.48055E-4 -8.69155E-4 -8.613468E-4 -9.050966E-4 -9.070636E-4 -9.092094E-4 -9.089112E-4 -9.02176E-4 -8.99613E-4 -8.909702E-4 -8.840562E-4 -8.744598E-4 -8.597374E-4 -8.231401E-4 -8.235574E-4 -8.046627E-4 -8.129478E-4 -7.7343E-4 -7.620454E-4 -7.438661E-4 -7.293224E-4 -7.191896E-4 -4.428029E-4 -7.713437E-4 -7.168651E-4 -3.885627E-4 -4.985332E-4 -5.187392E-4 -4.270077E-4 -4.269481E-4 -4.438758E-4 -3.985763E-4 -2.497435E-4 -2.852678E-4 -2.907515E-4 -1.916885E-4 -1.366138E-4 -1.335144E-4 -3.86834E-5 -1.58548E-5 7.98106E-5 1.282692E-4 2.280474E-4 3.070235E-4 4.550815E-4 4.900694E-4 5.623102E-4 6.984473E-4 8.180737E-4 8.648038E-4 9.557606E-4 0.0010849238 0.0012007356 0.0013332368 0.0014609099 0.0016080142 0.0017527342 0.0018211008 0.0020146966 0.0021319983 0.0022948385 0.0024317503 0.0026661754 0.0027485192 0.0029273033 0.003157109 0.0033712387 0.0035392344 0.0037214456 0.003906548 0.0040753484 0.0043542087 0.004610151 0.0048356354 0.0049821735 0.005249858 0.0053109825 0.005693555 0.0059554577 0.006133288 0.006221324 0.00662902 0.006851852 0.007088393 0.007222056 0.0074937935 0.00772202 0.0077799265 0.008026779 0.00806272 0.008342177 0.008592844 0.00881651 0.009004861 0.009183437 0.009344518 0.009488612 0.009627849 0.009737104 0.009847283 0.009945631 0.01003924 0.010111496 0.010185227 0.010253191 0.010294497 0.010342643 0.010360092 0.010372937 0.0103664845 0.010347351 0.010307774 0.010240212 0.010168888 0.010068066 0.009940721 0.009799629 0.00966908 0.009470366 0.00930414 0.009097874 0.00886168 0.008658849 0.008424137 0.00816405 0.00789059 0.0076133134 0.0073520458 0.0070458073 0.006750835 0.0064437706 0.0061477088 0.0057999343 0.005477842 0.0051582717 0.0048153103 0.0044632703 0.0041078516 0.003765244 0.003387496 0.003028892 0.0026482863 0.0022792444 0.0019045024 0.0015280248 0.0011471808 7.662326E-4 3.876537E-4 1.96323E-5 -3.608391E-4 -7.10465E-4 -0.0010816158 -0.0014338866 -0.0017723814 -0.0021211356 -0.0024427325 -0.0027671755 -0.0030757189 -0.0033721777 -0.003686268 -0.0039530397 -0.0042287596 -0.0044924244 -0.0047328435 -0.004976511 -0.0052006506 -0.00541866 -0.005617045 -0.005813664 -0.0060144784 -0.006211268 -0.0063849976 -0.006577939 -0.00672028 -0.0069041066 -0.007101445 -0.007275963 -0.007464584 -0.00738883 -0.007901832 -0.0080362 -0.007891841 -0.008446544 -0.00857462 -0.008729674 -0.008561462 -0.009119406 -0.008919403 -0.009215325 -0.00940153 -0.009525314 -0.009814084 -0.009975284 -0.010109052 -0.010237679 -0.01040031 -0.010443673 -0.010703117 -0.010574162 -0.0109730065 -0.0107907355 -0.011176944 -0.010863662 -0.011038721 -0.011144489 -0.0111581385 -0.011208355 -0.011249304 -0.011183262 -0.011525035 -0.011369854 -0.011277586 -0.011191249 -0.011100262 -0.011124849 -0.010994911 -0.010879278 -0.010712057 -0.010606766 -0.010461956 -0.010313809 -0.010148525 -0.010023147 -0.009840667 -0.009668708 -0.009466946 -0.009261727 -0.009017706 -0.008877397 -0.008634508 -0.008419812 -0.0081983805 -0.007983744 -0.007754028 -0.0075170994 -0.0072878 -0.0070771575 -0.0068517327 -0.006619394 -0.006290436 -0.006190479 -0.0058692694 -0.005664706 -0.005475104 -0.0052793026 -0.0051187873 -0.00486964 -0.0044581294 -0.004526496 -0.0042253137 -0.004093528 -0.003984511 -0.0038563013 -0.0038283468 -0.003652036 -0.0036781433 -0.0034859777 -0.003229916 -0.0031022427 -0.002941668 -0.002945125 -0.0027870536 -0.0026358962 -0.0025016663 -0.002349496 -0.002172887 -0.0020342467 -0.0017461776 -0.001763165 -0.0014369488 -0.001296878 -0.0011752248 -0.0010038018 -8.445382E-4 -7.112026E-4 -5.793571E-4 -4.532337E-4 -3.145337E-4 -1.812577E-4 -6.30617E-5 5.85914E-5 1.798272E-4 2.794862E-4 4.222393E-4 5.353689E-4 6.449819E-4 7.850528E-4 8.955598E-4 0.0010285974 0.0011615754 0.0012857914 0.0014459492 0.001548946 0.0016941428 0.001866758 0.0019824505 0.0021270514 0.0023267863 0.00245744 0.0026043055 0.002700015)) (quote (-4.124403E-4 -4.421473E-4 -4.898906E-4 -5.465746E-4 -6.085634E-4 -6.641746E-4 -7.371306E-4 -7.981062E-4 -8.868576E-4 -9.810329E-4 -0.0010692478 -0.0011737348 -0.0012619498 -0.0013914108 -0.0014839172 -0.001578927 -0.0016942024 -0.0018067956 -0.0019061564 -0.0019754172 -0.0020540953 -0.002169788 -0.0022315383 -0.0022782684 -0.0023471117 -0.0023927689 -0.0022770167 -0.0025254488 -0.0025262833 -0.0023428202 -0.002452135 -0.0024900437 -0.0024266243 -0.0024244783 -0.0024553535 -0.002423048 -0.0023201704 -0.0023431778 -0.002332449 -0.0022296906 -0.0021511317 -0.0021135807 -0.001982927 -0.0018955468 -0.0017807484 -0.0016551018 -0.0015233756 -0.001400471 -0.0012053253 -0.0011149646 -9.772778E-4 -8.125305E-4 -6.262064E-4 -5.069971E-4 -3.585815E-4 -1.64032E-4 3.89814E-5 1.922846E-4 4.07815E-4 6.364584E-4 8.245707E-4 0.0010397434 0.0012646914 0.0015245676 0.001743436 0.0019767285 0.002296567 0.0024791956 0.002734542 0.003015995 0.0033234358 0.0035437344 0.0038212536 0.004040122 0.004259944 0.0044894214 0.0047667027 0.0049821735 0.0051296354 0.005396664 0.005506575 0.0057783723 0.006024897 0.0061730743 0.00631094 0.0065852404 0.006733715 0.006927371 0.0070108175 0.0072234273 0.007391035 0.0073925858 0.007555008 0.007486224 0.0076879263 0.007834017 0.00792408 0.007967949 0.008064926 0.008176029 0.008173764 0.008291066 0.00829196 0.008363903 0.008426428 0.008514345 0.008544326 0.00861305 0.008650959 0.008702517 0.008738875 0.008781731 0.0088121295 0.008841693 0.00884068 0.008865893 0.008852184 0.008853018 0.008847773 0.008851171 0.008843303 0.008938193 0.008805692 0.008898556 0.008872688 0.008785963 0.008880258 0.008877099 0.008853018 0.008835852 0.008871198 0.008897364 0.008873463 0.0088889 0.00887686 0.008911431 0.008880198 0.008891702 0.008940637 0.008940339 0.008961618 0.008984685 0.008999348 0.009020239 0.008990318 0.009022921 0.009006709 0.008979887 0.008957982 0.008892477 0.008854747 0.008821279 0.008736998 0.008646756 0.008594036 0.008476198 0.008339614 0.008245438 0.008105278 0.007995158 0.007846326 0.0076934993 0.007557988 0.0073697274 0.007202267 0.007017523 0.0068213344 0.00659436 0.0064144135 0.006197989 0.005924344 0.00568524 0.0054459125 0.0051506907 0.0048161 0.0045478195 0.004200667 0.0038323105 0.003519222 0.0031137467 0.0028367788 0.0025378764 0.002261892 0.0018569678 0.0015739502 0.0013234466 8.920432E-4 5.870014E-4 3.113896E-4 5.72205E-5 -3.636479E-4 -6.081909E-4 -9.32157E-4 -0.0012907536 -0.001608789 -0.0019162892 -0.002318278 -0.0026934147 -0.003078565 -0.0034604073 -0.0037759096 -0.004257545 -0.0044277758 -0.005020872 -0.005238384 -0.005665228 -0.005821079 -0.006368071 -0.006703198 -0.0070944126 -0.0074572265 -0.007787705 -0.008118331 -0.0086628795 -0.008880645 -0.009139389 -0.009477347 -0.009702146 -0.010017157 -0.010300815 -0.010525912 -0.010794371 -0.011040896 -0.011266768 -0.01155436 -0.011755675 -0.012002677 -0.012174815 -0.012339115 -0.012514859 -0.012660503 -0.012786895 -0.012892276 -0.01304245 -0.013113141 -0.013174415 -0.013258755 -0.013314545 -0.013344049 -0.013377011 -0.013400853 -0.013408184 -0.013427853 -0.013494314 -0.013383567 -0.013397515 -0.013317287 -0.013244331 -0.013171494 -0.013138354 -0.0129134655 -0.012843311 -0.012621701 -0.012503386 -0.012336731 -0.012152016 -0.011960626 -0.011729658 -0.01155138 -0.011460662 -0.011297345 -0.011052489 -0.010867953 -0.010671318 -0.010546863 -0.010357618 -0.010165811 -0.009980381 -0.009804308 -0.009655893 -0.009465456 -0.009207249 -0.009118617 -0.008861959 -0.00870496 -0.008503675 -0.008331895 -0.008129835 -0.007942915 -0.0077724457 -0.0076071024 -0.0074204207 -0.007305265 -0.0070890193 -0.0069035297 -0.0066964626 -0.0065022707 -0.0063112974 -0.006089449 -0.0059086085 -0.0056966543 -0.0054986477 -0.0053174496 -0.0051931143 -0.0049704313 -0.004797697 -0.0046166186 -0.0044319634 -0.0042330027 -0.00406301 -0.0038769245 -0.0036509037 -0.0035065413 -0.0033251047 -0.003194661)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list -4.124403E-4 -4.421473E-4 -4.898906E-4 -5.465746E-4 -6.085634E-4 -6.641746E-4 -7.371306E-4 -7.981062E-4 -8.868576E-4 -9.810329E-4 -0.0010692478 -0.0011737348 -0.0012619498 -0.0013914108 -0.0014839172 -0.001578927 -0.0016942024 -0.0018067956 -0.0019061564 -0.0019754172 -0.0020540953 -0.002169788 -0.0022315383 -0.0022782684 -0.0023471117 -0.0023927689 -0.0022770167 -0.0025254488 -0.0025262833 -0.0023428202 -0.002452135 -0.0024900437 -0.0024266243 -0.0024244783 -0.0024553535 -0.002423048 -0.0023201704 -0.0023431778 -0.002332449 -0.0022296906 -0.0021511317 -0.0021135807 -0.001982927 -0.0018955468 -0.0017807484 -0.0016551018 -0.0015233756 -0.001400471 -0.0012053253 -0.0011149646 -9.772778E-4 -8.125305E-4 -6.262064E-4 -5.069971E-4 -3.585815E-4 -1.64032E-4 3.89814E-5 1.922846E-4 4.07815E-4 6.364584E-4 8.245707E-4 0.0010397434 0.0012646914 0.0015245676 0.001743436 0.0019767285 0.002296567 0.0024791956 0.002734542 0.003015995 0.0033234358 0.0035437344 0.0038212536 0.004040122 0.004259944 0.0044894214 0.0047667027 0.0049821735 0.0051296354 0.005396664 0.005506575 0.0057783723 0.006024897 0.0061730743 0.00631094 0.0065852404 0.006733715 0.006927371 0.0070108175 0.0072234273 0.007391035 0.0073925858 0.007555008 0.007486224 0.0076879263 0.007834017 0.00792408 0.007967949 0.008064926 0.008176029 0.008173764 0.008291066 0.00829196 0.008363903 0.008426428 0.008514345 0.008544326 0.00861305 0.008650959 0.008702517 0.008738875 0.008781731 0.0088121295 0.008841693 0.00884068 0.008865893 0.008852184 0.008853018 0.008847773 0.008851171 0.008843303 0.008938193 0.008805692 0.008898556 0.008872688 0.008785963 0.008880258 0.008877099 0.008853018 0.008835852 0.008871198 0.008897364 0.008873463 0.0088889 0.00887686 0.008911431 0.008880198 0.008891702 0.008940637 0.008940339 0.008961618 0.008984685 0.008999348 0.009020239 0.008990318 0.009022921 0.009006709 0.008979887 0.008957982 0.008892477 0.008854747 0.008821279 0.008736998 0.008646756 0.008594036 0.008476198 0.008339614 0.008245438 0.008105278 0.007995158 0.007846326 0.0076934993 0.007557988 0.0073697274 0.007202267 0.007017523 0.0068213344 0.00659436 0.0064144135 0.006197989 0.005924344 0.00568524 0.0054459125 0.0051506907 0.0048161 0.0045478195 0.004200667 0.0038323105 0.003519222 0.0031137467 0.0028367788 0.0025378764 0.002261892 0.0018569678 0.0015739502 0.0013234466 8.920432E-4 5.870014E-4 3.113896E-4 5.72205E-5 -3.636479E-4 -6.081909E-4 -9.32157E-4 -0.0012907536 -0.001608789 -0.0019162892 -0.002318278 -0.0026934147 -0.003078565 -0.0034604073 -0.0037759096 -0.004257545 -0.0044277758 -0.005020872 -0.005238384 -0.005665228 -0.005821079 -0.006368071 -0.006703198 -0.0070944126 -0.0074572265 -0.007787705 -0.008118331 -0.0086628795 -0.008880645 -0.009139389 -0.009477347 -0.009702146 -0.010017157 -0.010300815 -0.010525912 -0.010794371 -0.011040896 -0.011266768 -0.01155436 -0.011755675 -0.012002677 -0.012174815 -0.012339115 -0.012514859 -0.012660503 -0.012786895 -0.012892276 -0.01304245 -0.013113141 -0.013174415 -0.013258755 -0.013314545 -0.013344049 -0.013377011 -0.013400853 -0.013408184 -0.013427853 -0.013494314 -0.013383567 -0.013397515 -0.013317287 -0.013244331 -0.013171494 -0.013138354 -0.0129134655 -0.012843311 -0.012621701 -0.012503386 -0.012336731 -0.012152016 -0.011960626 -0.011729658 -0.01155138 -0.011460662 -0.011297345 -0.011052489 -0.010867953 -0.010671318 -0.010546863 -0.010357618 -0.010165811 -0.009980381 -0.009804308 -0.009655893 -0.009465456 -0.009207249 -0.009118617 -0.008861959 -0.00870496 -0.008503675 -0.008331895 -0.008129835 -0.007942915 -0.0077724457 -0.0076071024 -0.0074204207 -0.007305265 -0.0070890193 -0.0069035297 -0.0066964626 -0.0065022707 -0.0063112974 -0.006089449 -0.0059086085 -0.0056966543 -0.0054986477 -0.0053174496 -0.0051931143 -0.0049704313 -0.004797697 -0.0046166186 -0.0044319634 -0.0042330027 -0.00406301 -0.0038769245 -0.0036509037 -0.0035065413 -0.0033251047 -0.003194661))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0066615078 0.0066873953 0.006782793 0.006943628 0.0069993665 0.0070583294 0.0071204007 0.0071987654 0.007250607 0.0073224306 0.0074262177 0.007465825 0.0076476336 0.007653147 0.007656887 0.0077243447 0.0077921306 0.007840306 0.007941902 0.007945225 0.007990867 0.00804168 0.008086726 0.0081276 0.008156836 0.008168668 0.008195758 0.008204192 0.0081962645 0.008206129 0.008202046 0.008207172 0.008181274 0.008188635 0.008153677 0.008143455 0.008101404 0.008061111 0.007993907 0.007948339 0.0078650415 0.0078069866 0.0077124834 0.00764814 0.0075553656 0.00744173 0.00731656 0.0071879327 0.0070276256 0.006866514 0.006724983 0.0065672696 0.006365627 0.006171286 0.0058078766 0.0056138933 0.0053925514 0.0051449537 0.0048758984 0.004584074 0.004242778 0.0039526224 0.0035791397 0.0032077432 0.0029005409 0.0023425815 0.0020086167 0.0015156866 0.0010648966 6.58989E-4 6.95586E-5 -4.359484E-4 -0.001060307 -0.0016285778 -0.0023561716 -0.0029885173 -0.0036942365 -0.0043681264 -0.005054474 -0.00580889 -0.0065106754 -0.00727129 -0.007949144 -0.008718163 -0.009562731 -0.010283232 -0.011042535 -0.011756033 -0.0124589205 -0.013164848 -0.013768733 -0.014405847 -0.01497823 -0.015494496 -0.015954018 -0.01641184 -0.016875655 -0.017204136 -0.017565489 -0.017766446 -0.018032536 -0.01831016 -0.018491939 -0.01856558 -0.018677533 -0.018733159 -0.018720553 -0.018861264 -0.018495359 -0.018492118 -0.018418163 -0.018333514 -0.018083746 -0.017816466 -0.017580059 -0.017319784 -0.016997656 -0.016725976 -0.01641491 -0.016096138 -0.015724414 -0.01536169 -0.014975905 -0.014637142 -0.014219746 -0.013865694 -0.013383046 -0.012958512 -0.012497887 -0.012043074 -0.011636019 -0.011185467 -0.010763407 -0.010336876 -0.009939194 -0.009590656 -0.009199411 -0.008836001 -0.008505672 -0.008178145 -0.0078519285 -0.0075318217 -0.0072698887 -0.0069619417 -0.006718099 -0.006453812 -0.0062266886 -0.0059728325 -0.005747378 -0.005531043 -0.005270064 -0.005103469 -0.004911393 -0.0047098994 -0.004569143 -0.0043966174 -0.0042388737 -0.0040830374 -0.0039013625 -0.0037472248 -0.0036008656 -0.0035072267 -0.0033156872 -0.0031600297 -0.00303635 -0.0029099584 -0.0027220247 -0.002610922 -0.002458632 -0.0023257435 -0.002206862 -0.0020870865 -0.001984328 -0.0018210708 -0.0017430186 -0.0016158224 -0.0015218854 -0.001428336 -0.0013380052 -0.0012403132 -0.0011598468 -0.0010803044 -0.0010089278 -9.503962E-4 -8.907616E-4 -8.354783E-4 -7.793903E-4 -7.408261E-4 -7.110238E-4 -6.951095E-4 -6.558895E-4 -6.445647E-4 -6.352663E-4 -6.207824E-4 -6.127357E-4 -6.059408E-4 -5.829335E-4 -5.697608E-4 -5.548E-4 -5.31733E-4 -5.049706E-4 -4.678965E-4 -4.487634E-4 -4.239082E-4 -3.900528E-4 -3.628135E-4 -3.410578E-4 -3.212094E-4 -2.881885E-4 -2.610683E-4 -2.444386E-4 -2.209544E-4 -2.020597E-4 -1.787543E-4 -1.567602E-4 -1.295805E-4 -8.33273E-5 -7.03335E-5 -4.08292E-5 -7.3314E-6 4.22001E-5 7.45654E-5 1.189709E-4 1.538396E-4 1.990199E-4 2.538562E-4 3.019571E-4 3.51429E-4 3.939867E-4 4.544258E-4 4.990101E-4 5.784035E-4 6.171465E-4 6.715655E-4 7.062554E-4 7.527471E-4 7.93934E-4 8.4126E-4 8.753538E-4 9.109378E-4 9.356142E-4 9.725094E-4 0.0010012388 0.0010263324)) (quote (0.002700015 0.0027319193 0.002876222 0.0030593276 0.003178835 0.0033227203 0.0034544468 0.003602922 0.00371027 0.0038455129 0.0040397644 0.0041838885 0.00437653 0.004479289 0.0046135783 0.004755497 0.0048861504 0.005043626 0.005208552 0.0053579807 0.005511582 0.0056684017 0.005809486 0.005987525 0.006154597 0.0063058734 0.0064778924 0.0066346526 0.0067816978 0.0069546704 0.0071265106 0.0073049665 0.0074716206 0.007648528 0.007828653 0.008006096 0.008169889 0.008368731 0.008557618 0.008775532 0.008938909 0.009155542 0.009327382 0.009559393 0.009755164 0.0099469125 0.010151297 0.010344118 0.010537058 0.01074481 0.0109552145 0.011171192 0.011370391 0.011561006 0.011616558 0.011821479 0.01201719 0.01216653 0.012316018 0.0124284625 0.012452513 0.012550563 0.012571573 0.012598723 0.012565613 0.012472928 0.012435883 0.012348592 0.012211487 0.012040347 0.011808515 0.011415556 0.011039749 0.010602444 0.010052443 0.009538777 0.009040549 0.008376032 0.0077805 0.0072938353 0.006535314 0.006077461 0.00530228 0.004737597 0.004308101 0.0038221069 0.0030728095 0.0027313046 0.002164416 0.0014967024 9.90551E-4 5.287901E-4 6.49951E-5 -4.09577E-4 -9.490588E-4 -0.0014184119 -0.0018900596 -0.002326839 -0.0027643927 -0.0031926819 -0.0036279112 -0.004057415 -0.00443051 -0.004829623 -0.005208038 -0.00560084 -0.0059883073 -0.006115079 -0.0067563658 -0.007031806 -0.007358477 -0.007639893 -0.007832788 -0.007897221 -0.008206233 -0.008214921 -0.008343756 -0.008462235 -0.008677259 -0.008720398 -0.008762211 -0.008803725 -0.008838862 -0.0088861585 -0.008910418 -0.00879629 -0.008864507 -0.008924067 -0.008921802 -0.008978754 -0.009026736 -0.009045601 -0.009091079 -0.009100705 -0.009102941 -0.009213656 -0.009151608 -0.00914675 -0.009092361 -0.009072483 -0.008997947 -0.008954257 -0.0088332 -0.008797407 -0.008693337 -0.008599192 -0.008472443 -0.008358479 -0.008221626 -0.008051246 -0.007888734 -0.0077340305 -0.007545024 -0.0073642433 -0.0071474314 -0.006968469 -0.0067520738 -0.0066130758 -0.0064200163 -0.0061972737 -0.0060012937 -0.0057986975 -0.005659282 -0.0054567456 -0.0052698255 -0.00507766 -0.0049499273 -0.004753828 -0.0045446754 -0.0043601394 -0.0041686297 -0.0039926768 -0.0038158296 -0.0036296249 -0.0034688712 -0.0032762885 -0.0031336546 -0.0029744506 -0.002803862 -0.002670884 -0.0025215745 -0.0023516417 -0.0022090075 -0.002067864 -0.0019345284 -0.00180763 -0.0016674402 -0.0015519264 -0.0014325976 -0.0013306142 -0.0012304784 -0.001131475 -0.0010271072 -9.192228E-4 -8.185506E-4 -7.245541E-4 -6.41346E-4 -5.427599E-4 -4.447103E-4 -3.587008E-4 -2.922416E-4 -2.026558E-4 -1.229048E-4 -4.34518E-5 3.74317E-5 1.35839E-4 2.067089E-4 2.866983E-4 3.505349E-4 4.21226E-4 4.933476E-4 5.605817E-4 6.405115E-4 6.77228E-4 7.490517E-4 8.218884E-4 8.77142E-4 9.44376E-4 0.0010169149 0.0010751486 0.0011290908 0.0011909008 0.001248181 0.001325965 0.0013850333 0.0014362932 0.0014896394 0.001554668 0.0016371608 0.0016958714 0.0017423034 0.0018194318 0.0018944144 0.0019387008 0.001999557 0.002089262 0.0021409989 0.00219357 0.0022627116 0.002327323 0.0023834107 0.0024400947 0.0024850965 0.002536893)) (quote (-0.003194661 -0.0031511784 -0.0029717684 -0.0028357506 -0.0026425124 -0.002441764 -0.0022822619 -0.002056241 -0.0018788576 -0.0016758442 -0.0014896394 -0.001230836 -8.898974E-4 -6.877184E-4 -4.758835E-4 -2.406836E-4 -2.14577E-5 2.639294E-4 5.288124E-4 7.994175E-4 0.0010399819 0.0012762548 0.0015593768 0.0018314124 0.002120018 0.002395511 0.0026891232 0.0029110909 0.0031836033 0.0034555197 0.0037139657 0.00399661 0.0042431355 0.0045006275 0.004753828 0.0050165653 0.0052657128 0.0055063963 0.005765915 0.0059634447 0.006190777 0.0064492226 0.00668931 0.0069274903 0.0071742535 0.0073833466 0.0075855255 0.0077972417 0.007978439 0.0081858635 0.008386135 0.00859344 0.008783579 0.008956194 0.008981347 0.009223223 0.009412527 0.009607196 0.009748757 0.009934962 0.010145962 0.010388374 0.010525167 0.0107265115 0.010985851 0.010962546 0.011291444 0.01138711 0.011620522 0.011917651 0.012053192 0.012431145 0.01263082 0.013016224 0.013289869 0.0138088465 0.014168083 0.014473318 0.014808536 0.015242517 0.015512227 0.015971542 0.016178906 0.016476453 0.01689893 0.017200172 0.017207265 0.017402232 0.017401636 0.017253399 0.017230928 0.017043949 0.016887665 0.016646892 0.016314805 0.015954823 0.015566736 0.015098483 0.01459688 0.014057994 0.013535053 0.012963116 0.012359321 0.011773825 0.011105865 0.010455519 0.009772062 0.0093199015 0.008336663 0.00779903 0.007116884 0.0065431297 0.005883038 0.005128175 0.0045240224 0.0038073063 0.0032033623 0.0026076287 0.0020567626 0.00143002 9.001792E-4 3.265291E-4 -1.858324E-4 -7.005334E-4 -0.001213655 -0.0018545836 -0.0022805184 -0.0027863384 -0.003251344 -0.0037230552 -0.0042039156 -0.004612088 -0.0050767064 -0.0055231154 -0.0059089363 -0.0063753426 -0.006726444 -0.007058114 -0.00747332 -0.0077053313 -0.008031338 -0.008327603 -0.008612037 -0.008827746 -0.009071022 -0.009294301 -0.009476453 -0.00964725 -0.009784073 -0.009999186 -0.010024518 -0.01018396 -0.010261953 -0.010277271 -0.010339379 -0.010359317 -0.010355294 -0.010398984 -0.010344982 -0.010320246 -0.0103055835 -0.0102669 -0.010189295 -0.010153174 -0.010090768 -0.010063827 -0.0098820925 -0.0098260045 -0.009749591 -0.009696543 -0.00956732 -0.009449482 -0.009284914 -0.009217918 -0.0090482235 -0.00894326 -0.00877893 -0.008639336 -0.008523822 -0.008404553 -0.008233845 -0.008100927 -0.007957816 -0.007827282 -0.007679224 -0.007533312 -0.007399976 -0.007249117 -0.0071319346 -0.007008672 -0.0068775416 -0.006739139 -0.006604135 -0.0064353347 -0.006327331 -0.0061767698 -0.0060688853 -0.0059116483 -0.005785167 -0.005680859 -0.0055522323 -0.005415201 -0.00528425 -0.005153954 -0.0050341487 -0.0049012304 -0.004760504 -0.0046411753 -0.0045043826 -0.0043826103 -0.0042431355 -0.004124701 -0.0040070415 -0.003904462 -0.00377357 -0.0036621096 -0.003552258 -0.0034184456 -0.0032926202 -0.0031713248 -0.0030727387 -0.0029594303 -0.0028403995 -0.0026985407 -0.0025894642 -0.0024830103 -0.0023550392 -0.0022221208 -0.0020715595 -0.0019518732 -0.00184232 -0.001684606 -0.0015030505 -0.0014019013 -0.0012566449 -0.0010939838 -9.42111E-4 -8.289218E-4 -6.827712E-4 -5.289912E-4 -3.994703E-4 -2.685785E-4 -1.61171E-4 -3.50475E-5)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list -0.003194661 -0.0031511784 -0.0029717684 -0.0028357506 -0.0026425124 -0.002441764 -0.0022822619 -0.002056241 -0.0018788576 -0.0016758442 -0.0014896394 -0.001230836 -8.898974E-4 -6.877184E-4 -4.758835E-4 -2.406836E-4 -2.14577E-5 2.639294E-4 5.288124E-4 7.994175E-4 0.0010399819 0.0012762548 0.0015593768 0.0018314124 0.002120018 0.002395511 0.0026891232 0.0029110909 0.0031836033 0.0034555197 0.0037139657 0.00399661 0.0042431355 0.0045006275 0.004753828 0.0050165653 0.0052657128 0.0055063963 0.005765915 0.0059634447 0.006190777 0.0064492226 0.00668931 0.0069274903 0.0071742535 0.0073833466 0.0075855255 0.0077972417 0.007978439 0.0081858635 0.008386135 0.00859344 0.008783579 0.008956194 0.008981347 0.009223223 0.009412527 0.009607196 0.009748757 0.009934962 0.010145962 0.010388374 0.010525167 0.0107265115 0.010985851 0.010962546 0.011291444 0.01138711 0.011620522 0.011917651 0.012053192 0.012431145 0.01263082 0.013016224 0.013289869 0.0138088465 0.014168083 0.014473318 0.014808536 0.015242517 0.015512227 0.015971542 0.016178906 0.016476453 0.01689893 0.017200172 0.017207265 0.017402232 0.017401636 0.017253399 0.017230928 0.017043949 0.016887665 0.016646892 0.016314805 0.015954823 0.015566736 0.015098483 0.01459688 0.014057994 0.013535053 0.012963116 0.012359321 0.011773825 0.011105865 0.010455519 0.009772062 0.0093199015 0.008336663 0.00779903 0.007116884 0.0065431297 0.005883038 0.005128175 0.0045240224 0.0038073063 0.0032033623 0.0026076287 0.0020567626 0.00143002 9.001792E-4 3.265291E-4 -1.858324E-4 -7.005334E-4 -0.001213655 -0.0018545836 -0.0022805184 -0.0027863384 -0.003251344 -0.0037230552 -0.0042039156 -0.004612088 -0.0050767064 -0.0055231154 -0.0059089363 -0.0063753426 -0.006726444 -0.007058114 -0.00747332 -0.0077053313 -0.008031338 -0.008327603 -0.008612037 -0.008827746 -0.009071022 -0.009294301 -0.009476453 -0.00964725 -0.009784073 -0.009999186 -0.010024518 -0.01018396 -0.010261953 -0.010277271 -0.010339379 -0.010359317 -0.010355294 -0.010398984 -0.010344982 -0.010320246 -0.0103055835 -0.0102669 -0.010189295 -0.010153174 -0.010090768 -0.010063827 -0.0098820925 -0.0098260045 -0.009749591 -0.009696543 -0.00956732 -0.009449482 -0.009284914 -0.009217918 -0.0090482235 -0.00894326 -0.00877893 -0.008639336 -0.008523822 -0.008404553 -0.008233845 -0.008100927 -0.007957816 -0.007827282 -0.007679224 -0.007533312 -0.007399976 -0.007249117 -0.0071319346 -0.007008672 -0.0068775416 -0.006739139 -0.006604135 -0.0064353347 -0.006327331 -0.0061767698 -0.0060688853 -0.0059116483 -0.005785167 -0.005680859 -0.0055522323 -0.005415201 -0.00528425 -0.005153954 -0.0050341487 -0.0049012304 -0.004760504 -0.0046411753 -0.0045043826 -0.0043826103 -0.0042431355 -0.004124701 -0.0040070415 -0.003904462 -0.00377357 -0.0036621096 -0.003552258 -0.0034184456 -0.0032926202 -0.0031713248 -0.0030727387 -0.0029594303 -0.0028403995 -0.0026985407 -0.0025894642 -0.0024830103 -0.0023550392 -0.0022221208 -0.0020715595 -0.0019518732 -0.00184232 -0.001684606 -0.0015030505 -0.0014019013 -0.0012566449 -0.0010939838 -9.42111E-4 -8.289218E-4 -6.827712E-4 -5.289912E-4 -3.994703E-4 -2.685785E-4 -1.61171E-4 -3.50475E-5))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0010263324 0.0010420978 0.0010642113 0.0010819734 0.0010979176 0.0011092424 0.001109481 0.0011228324 0.0011283757 0.0011258127 0.0011215806 0.001136184 0.0011416376 0.0011482836 0.001155913 0.0011693837 0.0011912286 0.0012128652 0.0012515189 0.0012899638 0.0013346076 0.0013746918 0.001421243 0.0014737249 0.0015217662 0.0015596452 0.0016134383 0.0016728044 0.0017240048 0.0017772912 0.0018512012 0.0019030572 0.001977682 0.002064139 0.0021373034 0.0022428334 0.0023488403 0.0024425388 0.0025504527 0.0026554168 0.0027657152 0.0028913915 0.0030311048 0.0031701327 0.003309816 0.0034561456 0.0035926104 0.0037385524 0.0038971603 0.0040360987 0.004183203 0.0043118 0.0044106543 0.0045202673 0.0046016276 0.0047039986 0.004791826 0.004891008 0.004981101 0.005077511 0.005162984 0.005278796 0.0054037273 0.005521983 0.005622387 0.0057569146 0.005887419 0.006026447 0.0061405897 0.006253779 0.0063990057 0.0065169037 0.006627023 0.006752044 0.006873876 0.0070232153 0.0071138735 0.007229552 0.0073838527 0.007509068 0.0076219286 0.0077536847 0.007879853 0.008015797 0.008141607 0.008244872 0.008402243 0.008520365 0.0086492 0.008745521 0.008871257 0.008986369 0.009099044 0.009192705 0.00930056 0.009436123 0.009594537 0.009701572 0.009783164 0.009928741 0.010066744 0.010083541 0.010274479 0.010392655 0.010590976 0.01072085 0.010844864 0.011014055 0.011151774 0.01130037 0.011440471 0.01155496 0.01170174 0.011797875 0.011827476 0.011924848 0.011974409 0.012012437 0.012049854 0.012083977 0.012058318 0.011988774 0.012056917 0.012005299 0.011816055 0.011756167 0.011708438 0.011586577 0.011782855 0.0115944445 0.011353701 0.011150688 0.010591179 0.011007756 0.010747522 0.010020196 0.0099540055 0.009829044 0.0096851885 0.009543389 0.009323835 0.009129167 0.008907706 0.008690059 0.008499652 0.008282185 0.008058101 0.007812381 0.007602364 0.0073452 0.007154107 0.0069034696 0.0067171753 0.006440282 0.0062366724 0.0059974194 0.00579232 0.005602002 0.005340934 0.0050989986 0.004920244 0.0046865344 0.0044869185 0.004185617 0.004037142 0.0039303303 0.0036407113 0.0034721496 0.0032981038 0.0031222105 0.0029519797 0.0027655363 0.002571404 0.0023940206 0.0022166968 0.0019758344 0.0018332005 0.0016727448 0.0015186668 0.0013464094 0.0011547208 9.402634E-4 6.678104E-4 5.230904E-4 2.64287E-4 6.43134E-5 -1.032352E-4 -3.26097E-4 -5.384684E-4 -6.555319E-4 -8.204579E-4 -0.001016736 -0.0011236668 -0.0012643935 -0.0013668538 -0.0015369058 -0.001585424 -0.0017347336 -0.0017977356 -0.001929462 -0.0020089746 -0.0020827055 -0.0021229387 -0.0022612214 -0.0022987128 -0.0023795367 -0.0024391413 -0.0025091768 -0.0025720597 -0.002616763 -0.0026685596 -0.0027077198)) (quote (0.002536893 0.002629697 0.00266248 0.0027031899 0.0027372837 0.0028082729 0.0028727057 0.0029182434 0.002931416 0.0029789803 0.0030279756 0.00305897 0.0030832293 0.0031190517 0.003163874 0.0031847358 0.0032215715 0.0032576325 0.0032977462 0.0033325553 0.003362894 0.003410041 0.0034444929 0.003488004 0.0035222173 0.003595054 0.003639728 0.0036835673 0.0037608745 0.0038032232 0.0038297177 0.0039037464 0.00393644 0.0039780736 0.004028499 0.0040946305 0.004095793 0.0041510463 0.004177332 0.004229188 0.004267454 0.004315108 0.0043589473 0.0043762326 0.0044219494 0.004467249 0.0045138 0.0045683384 0.0046054125 0.004630387 0.004655242 0.0046841204 0.004729986 0.004771918 0.004825741 0.004868239 0.004915297 0.0049803853 0.005041927 0.0051731467 0.0052506626 0.0053063333 0.0054196716 0.005510092 0.0056546326 0.0057350397 0.0058526695 0.005981356 0.006125957 0.006278217 0.0064170063 0.0065768957 0.006749481 0.0069438215 0.0071204906 0.0073190634 0.007561251 0.0077954834 0.008004889 0.008244365 0.0085071325 0.00875549 0.009029642 0.009302452 0.009617597 0.009951606 0.010218397 0.010538444 0.010867208 0.0111976415 0.011497967 0.0118088275 0.012033321 0.012344994 0.012571938 0.012776282 0.0129082985 0.013019271 0.013061482 0.013072172 0.01300143 0.012911773 0.012736864 0.012531906 0.012245387 0.011920653 0.011544414 0.011074252 0.010581061 0.010066122 0.009501502 0.0089452565 0.008470371 0.0078042 0.007220223 0.0065086335 0.0058437884 0.005217463 0.0045812726 0.003980726 0.00342229 0.0030047745 0.0023829043 0.0019561649 0.0016809702 0.0013101102 9.682328E-4 6.979108E-4 1.669079E-4 3.31551E-5 -3.77744E-5 -1.21817E-4 -2.055317E-4 -2.919734E-4 -2.866685E-4 -1.856238E-4 -1.606643E-4 -3.471822E-4 -2.334267E-4 -1.022816E-4 2.30819E-5 1.391619E-4 2.474338E-4 3.59267E-4 4.611462E-4 5.787462E-4 6.78733E-4 7.979423E-4 9.04724E-4 0.0010024458 0.0011036546 0.0012073368 0.0012523532 0.0013468862 0.001410827 0.001485303 0.0015479178 0.0015401244 0.0016280562 0.0016928612 0.0017194748 0.001771003 0.0018064528 0.001782 0.001764521 0.0018030108 0.0017748176 0.0017465502 0.00172019 0.0016619862 0.0015940816 0.001536563 0.0014218838 0.0013114512 0.0012048484 0.0010373294 8.732378E-4 7.177442E-4 5.192757E-4 3.669262E-4 2.046973E-4 5.09173E-5 -1.373887E-4 -2.176315E-4 -3.847182E-4 -5.280823E-4 -6.418526E-4 -8.540004E-4 -0.0010118784 -0.0012031496 -0.0013146997 -0.0015314668 -0.0016999394 -0.0018471629 -0.0020024777 -0.0021127016 -0.002285853 -0.0023778528 -0.0025259704 -0.0026261655 -0.002717808 -0.0028315189 -0.0029433072 -0.0029961169 -0.0030379296 -0.0031305405 -0.0031661392 -0.0032291115 -0.0032806993 -0.0033170432 -0.00337252 -0.0034293833)) (quote (-3.50475E-5 1.147389E-4 2.10762E-4 3.204942E-4 4.310608E-4 5.51641E-4 6.605983E-4 7.614493E-4 8.388758E-4 9.57787E-4 0.0010519624 0.0011154414 0.001183331 0.0012706518 0.0013599992 0.0014271736 0.0015184285 0.0015767814 0.0016322136 0.0017021298 0.0017659664 0.0018334388 0.0018934608 0.0019664765 0.002036512 0.0021502972 0.0021978617 0.0022894144 0.0023742915 0.0024584532 0.0025494697 0.0026468637 0.0027127266 0.0027999878 0.0028713346 0.003004372 0.0030841232 0.0031828285 0.0032673478 0.0033816696 0.003499091 0.0036216376 0.003727913 0.003843844 0.00398165 0.004119456 0.0042657256 0.0044061546 0.0045681 0.004701853 0.0048968196 0.0051088333 0.005338609 0.00556314 0.0058253408 0.0060756207 0.0063643456 0.0066487193 0.0069481135 0.0072374945 0.007562101 0.00784421 0.008119464 0.0084145665 0.008703172 0.009003878 0.0092609525 0.009573996 0.009874105 0.010174334 0.010466993 0.010748386 0.011044502 0.011340439 0.011606991 0.011877179 0.012116551 0.012351453 0.01257813 0.012768447 0.012888372 0.013107002 0.013244927 0.013348579 0.013497352 0.013578117 0.013526619 0.013510615 0.013463913 0.013315737 0.013117015 0.012838304 0.012495637 0.01212427 0.011660874 0.011155993 0.010553271 0.009959608 0.009251267 0.008525461 0.0077468455 0.006943733 0.0061178208 0.005209446 0.004406452 0.0034534037 0.0026161373 0.001750052 9.261072E-4 1.421571E-4 -6.98954E-4 -0.0014683902 -0.002217561 -0.002990067 -0.0037360788 -0.004463494 -0.005271375 -0.005971372 -0.0066393316 -0.007346988 -0.008074015 -0.008607328 -0.009363651 -0.009953022 -0.010379851 -0.010995209 -0.0115045905 -0.012020469 -0.012862295 -0.013180494 -0.013468444 -0.013760656 -0.013836145 -0.014559656 -0.014748395 -0.014481485 -0.014802813 -0.015138984 -0.015279949 -0.015460611 -0.015518904 -0.015608846 -0.015675962 -0.015675903 -0.01574707 -0.015767873 -0.015779138 -0.015773416 -0.01579988 -0.015751303 -0.015790225 -0.01573366 -0.015755475 -0.015680016 -0.015659869 -0.0155828 -0.015508889 -0.0155156255 -0.01537472 -0.0152410865 -0.015156805 -0.015013874 -0.01487112 -0.014717459 -0.014659285 -0.014448344 -0.014236926 -0.014047743 -0.013842226 -0.013630867 -0.013434648 -0.013212442 -0.012955666 -0.012685895 -0.012422204 -0.012156367 -0.011799097 -0.011496067 -0.011117578 -0.010759473 -0.01036489 -0.009973764 -0.009582996 -0.009237528 -0.008799195 -0.008414984 -0.008108377 -0.0076553826 -0.0072941776 -0.006854058 -0.006577015 -0.006097436 -0.0056773424 -0.0052661896 -0.0049192906 -0.004607916 -0.004226804 -0.0038858652 -0.0035072565 -0.0032461882 -0.0028514862 -0.002543211 -0.002147913 -0.0018244982 -0.0015558004 -0.0011661054 -8.630754E-4 -5.334617E-4 -2.036095E-4 1.072884E-4 3.987551E-4 7.680655E-4)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list -3.50475E-5 1.147389E-4 2.10762E-4 3.204942E-4 4.310608E-4 5.51641E-4 6.605983E-4 7.614493E-4 8.388758E-4 9.57787E-4 0.0010519624 0.0011154414 0.001183331 0.0012706518 0.0013599992 0.0014271736 0.0015184285 0.0015767814 0.0016322136 0.0017021298 0.0017659664 0.0018334388 0.0018934608 0.0019664765 0.002036512 0.0021502972 0.0021978617 0.0022894144 0.0023742915 0.0024584532 0.0025494697 0.0026468637 0.0027127266 0.0027999878 0.0028713346 0.003004372 0.0030841232 0.0031828285 0.0032673478 0.0033816696 0.003499091 0.0036216376 0.003727913 0.003843844 0.00398165 0.004119456 0.0042657256 0.0044061546 0.0045681 0.004701853 0.0048968196 0.0051088333 0.005338609 0.00556314 0.0058253408 0.0060756207 0.0063643456 0.0066487193 0.0069481135 0.0072374945 0.007562101 0.00784421 0.008119464 0.0084145665 0.008703172 0.009003878 0.0092609525 0.009573996 0.009874105 0.010174334 0.010466993 0.010748386 0.011044502 0.011340439 0.011606991 0.011877179 0.012116551 0.012351453 0.01257813 0.012768447 0.012888372 0.013107002 0.013244927 0.013348579 0.013497352 0.013578117 0.013526619 0.013510615 0.013463913 0.013315737 0.013117015 0.012838304 0.012495637 0.01212427 0.011660874 0.011155993 0.010553271 0.009959608 0.009251267 0.008525461 0.0077468455 0.006943733 0.0061178208 0.005209446 0.004406452 0.0034534037 0.0026161373 0.001750052 9.261072E-4 1.421571E-4 -6.98954E-4 -0.0014683902 -0.002217561 -0.002990067 -0.0037360788 -0.004463494 -0.005271375 -0.005971372 -0.0066393316 -0.007346988 -0.008074015 -0.008607328 -0.009363651 -0.009953022 -0.010379851 -0.010995209 -0.0115045905 -0.012020469 -0.012862295 -0.013180494 -0.013468444 -0.013760656 -0.013836145 -0.014559656 -0.014748395 -0.014481485 -0.014802813 -0.015138984 -0.015279949 -0.015460611 -0.015518904 -0.015608846 -0.015675962 -0.015675903 -0.01574707 -0.015767873 -0.015779138 -0.015773416 -0.01579988 -0.015751303 -0.015790225 -0.01573366 -0.015755475 -0.015680016 -0.015659869 -0.0155828 -0.015508889 -0.0155156255 -0.01537472 -0.0152410865 -0.015156805 -0.015013874 -0.01487112 -0.014717459 -0.014659285 -0.014448344 -0.014236926 -0.014047743 -0.013842226 -0.013630867 -0.013434648 -0.013212442 -0.012955666 -0.012685895 -0.012422204 -0.012156367 -0.011799097 -0.011496067 -0.011117578 -0.010759473 -0.01036489 -0.009973764 -0.009582996 -0.009237528 -0.008799195 -0.008414984 -0.008108377 -0.0076553826 -0.0072941776 -0.006854058 -0.006577015 -0.006097436 -0.0056773424 -0.0052661896 -0.0049192906 -0.004607916 -0.004226804 -0.0038858652 -0.0035072565 -0.0032461882 -0.0028514862 -0.002543211 -0.002147913 -0.0018244982 -0.0015558004 -0.0011661054 -8.630754E-4 -5.334617E-4 -2.036095E-4 1.072884E-4 3.987551E-4 7.680655E-4))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.0027077198 -0.0027599933 -0.0028035045 -0.0028451085 -0.0029167533 -0.0029348135 -0.0029647947 -0.0030177236 -0.003066957 -0.0031440854 -0.003163695 -0.0032342673 -0.0033129454 -0.0033835173 -0.0034331084 -0.0035178063 -0.0035871268 -0.0036313536 -0.0036986173 -0.0037352145 -0.003783226 -0.0038191676 -0.003824264 -0.0038399992 -0.0038856864 -0.0038943293 -0.0039235354 -0.0039353073 -0.0039853156 -0.004033953 -0.0040880144 -0.0041868687 -0.004314214 -0.0044618547 -0.004622042 -0.004825264 -0.0050239563 -0.0052728057 -0.005557984 -0.0058929026 -0.0062734485 -0.006721407 -0.007207185 -0.007758796 -0.00838986 -0.009034425 -0.0096952915 -0.01039052 -0.011075705 -0.011747301 -0.012401342 -0.013055086 -0.013621181 -0.014092744 -0.014390707 -0.014477149 -0.0146562755 -0.014815584 -0.014841543 -0.014723987 -0.01454991 -0.014308065 -0.013949662 -0.013617425 -0.01314529 -0.012739599 -0.012250252 -0.011823267 -0.011340182 -0.010868937 -0.010418162 -0.009973247 -0.009598853 -0.009209324 -0.008858735 -0.008422367 -0.008063726 -0.007679517 -0.0072579514 -0.0068676137 -0.006444417 -0.005934339 -0.0056748353 -0.005088065 -0.004752949 -0.0042894557 -0.0038323924 -0.0033134148 -0.0027782023 -0.0023140088 -0.0018270686 -0.0014762358 -6.886572E-4 -4.654601E-4 3.11248E-4 7.683337E-4 0.00127735 0.0015062168 0.0021237207 0.0025854409 0.0029766485 0.003566943 0.0039160997 0.004388757 0.004801862 0.005221337 0.005548846 0.0059296787 0.0062665194 0.006565472 0.0067986273 0.007014364 0.0071630664 0.007262225 0.0073347697 0.007374678 0.007341561 0.007288446 0.0071823504 0.007046651 0.0068865274 0.0066860877 0.006472297 0.006225117 0.005901769 0.005634621 0.005327828 0.005022049 0.004694201 0.0043603033 0.0040204376 0.003729388 0.0033235997 0.00301525 0.0026296305 0.0023392067 0.0020486787 0.0017650798 0.0014781728 0.0012264402 9.920448E-4 7.42197E-4 5.20125E-4 2.96101E-4 8.93772E-5 -1.11863E-4 -3.165603E-4 -4.900545E-4 -6.623864E-4 -8.340627E-4 -9.8525E-4 -0.0011148378 -0.0012402014 -0.0013944954 -0.0014828594 -0.001566872 -0.0016671942 -0.0017613769 -0.001836866 -0.0019030422 -0.001955226 -0.001990944 -0.0020108447 -0.002004914 -0.001999706 -0.0019871295 -0.0019670353 -0.0019333364 -0.0018798933 -0.0018110277 -0.001746714 -0.0016576202 -0.0015148744 -0.0014441758 -0.001331985 -0.0012179018 -0.0011060238 -9.78455E-4 -8.242354E-4 -6.382242E-4 -4.798248E-4 -2.914295E-4 -9.75803E-5 1.058504E-4 3.042445E-4 5.271733E-4 7.237345E-4 9.609164E-4 0.0011675508 0.0013712198 0.0015752688 0.001772456 0.0019475372 0.0021350459 0.0023043976 0.002464302 0.0026228428 0.0027733669 0.0029083714 0.003049441 0.0031622574 0.0032820627 0.0033966529 0.0034906417 0.003554456 0.0035889373 0.0036136397)) (quote (-0.0034293833 -0.0034597367 -0.0034991652 -0.0035320968 -0.0035940409 -0.0035565195 -0.003568068 -0.0035772024 -0.0035670549 -0.0035880504 -0.0035306812 -0.0035110417 -0.0034943072 -0.00348185 -0.0034809709 -0.0034731033 -0.0034628809 -0.0034792873 -0.0034846813 -0.00353083 -0.00354442 -0.0036006125 -0.0036267713 -0.0036783067 -0.0037434849 -0.0037991256 -0.0038658604 -0.003908001 -0.00395371 -0.00399635 -0.003963463 -0.0039457455 -0.0039164797 -0.003874801 -0.0038615393 -0.003812004 -0.003768228 -0.0037598017 -0.0037188905 -0.003706101 -0.0036767053 -0.0036105253 -0.0035209284 -0.0033902713 -0.0032694824 -0.0031044446 -0.002944043 -0.0028880462 -0.002821314 -0.0027045794 -0.0026021488 -0.0024496494 -0.0023043023 -0.0021464164 -0.0019207344 -0.0016828284 -0.0015542934 -0.0014515543 -0.0013355358 -0.0012329756 -0.0011353904 -0.0011285032 -0.0010787838 -0.0011341889 -0.0011358662 -0.00122312 -0.0013095616 -0.0014391114 -0.0015292429 -0.0016393066 -0.0017439444 -0.001826726 -0.0020033997 -0.0021412035 -0.0022788272 -0.0023883228 -0.0025381744 -0.0026503392 -0.0027622655 -0.0028530807 -0.0030185618 -0.0030757822 -0.003254607 -0.00331166 -0.0034511388 -0.0035041573 -0.0035963056 -0.0036610216 -0.0036995337 -0.0037751792 -0.0038288755 -0.0039864704 -0.0039324165 -0.004038319 -0.0038862825 -0.0039734245 -0.0040373057 -0.004276797 -0.0042047873 -0.0042669997 -0.0043671355 -0.0043861196 -0.00444369 -0.0045131296 -0.0045648366 -0.004606992 -0.0046672523 -0.004676894 -0.0046774894 -0.004660189 -0.0046370924 -0.0045578927 -0.0044835806 -0.004383177 -0.004269466 -0.004113704 -0.003945425 -0.003757268 -0.0035423336 -0.003331259 -0.003132522 -0.002874583 -0.0026446283 -0.002376631 -0.002191231 -0.001911342 -0.0016395748 -0.0013435186 -0.001049906 -7.771403E-4 -4.808754E-4 -7.43121E-5 1.052916E-4 4.661977E-4 6.44505E-4 9.451808E-4 0.001220733 0.001509145 0.0017234832 0.0019796493 0.0022452176 0.00241974 0.0025787505 0.0027358383 0.0028992147 0.0030358285 0.0031348616 0.0032654852 0.003379539 0.0034796896 0.0035615564 0.003650457 0.0037191513 0.00377658 0.003819242 0.0038779376 0.003910944 0.003944516 0.003956944 0.0039829016 0.0040168166 0.004008591 0.0040397793 0.0040695965 0.004107684 0.0041398555 0.004161574 0.004185982 0.00420627 0.0041501075 0.004165262 0.0042094886 0.0041076318 0.004103057 0.004121423 0.004084252 0.004042916 0.003903836 0.0038418845 0.0037348273 0.0035989955 0.0034478864 0.0032575243 0.0030292198 0.0028088093 0.0025691949 0.0023212955 0.0019977652 0.0017841236 0.0015684144 0.0013308415 0.0010759644 8.505918E-4 6.053746E-4 4.004426E-4 1.846254E-4 -1.394E-5 -2.016239E-4 -3.91718E-4 -5.827174E-4 -7.59013E-4 -9.073728E-4 -0.0010871516 -0.0012497344 -0.0014885962 -0.001603339 -0.0016403094)) (quote (7.680655E-4 0.001060009 0.0014246702 0.0017653704 0.002166152 0.0024369955 0.002822876 0.003191233 0.003579378 0.004004121 0.00436604 0.004769087 0.005204797 0.005628228 0.0060613156 0.006495118 0.006941676 0.0073977714 0.0078651905 0.008326054 0.008878589 0.009441853 0.010021329 0.010630488 0.011268973 0.0119690895 0.012666106 0.013409972 0.014187574 0.015007496 0.015797735 0.016673685 0.017537952 0.018440843 0.01933062 0.020264388 0.021182478 0.02211994 0.023101688 0.02403742 0.024966062 0.025858581 0.026694358 0.027436614 0.028096199 0.028576553 0.028830769 0.028933943 0.028978227 0.02887553 0.02868867 0.028281393 0.027728916 0.02704352 0.026195229 0.025067747 0.024035663 0.0229007 0.021696657 0.020370245 0.019194752 0.017700851 0.0164918 0.015017539 0.013890983 0.012648463 0.011495531 0.010234505 0.0092484355 0.008333087 0.007479399 0.006777585 0.0059103817 0.005297497 0.0047254265 0.0041407496 0.003640473 0.003181487 0.0026253462 0.0023200512 0.001687929 0.0013114512 7.946641E-4 4.64499E-4 -1.745671E-4 -6.15582E-4 -0.0010281802 -0.0014993996 -0.001991555 -0.0024606288 -0.0028967709 -0.003393784 -0.0038162172 -0.004362285 -0.00489378 -0.005427122 -0.0059606284 -0.0065577626 -0.0070459545 -0.0077108746 -0.00849542 -0.009097755 -0.009936601 -0.0106417835 -0.0114427805 -0.012232035 -0.013069183 -0.013916075 -0.014747291 -0.015662015 -0.016445905 -0.017299712 -0.018115044 -0.018858135 -0.019565314 -0.020236314 -0.02091366 -0.02149731 -0.02205187 -0.02253884 -0.022963524 -0.023372889 -0.02371478 -0.024041057 -0.024177432 -0.024379015 -0.024531723 -0.024660886 -0.024685204 -0.02468884 -0.024624408 -0.02455616 -0.024370194 -0.024205506 -0.02396667 -0.023705602 -0.02343452 -0.023119212 -0.022802592 -0.022437692 -0.0220263 -0.021608115 -0.021154404 -0.020690799 -0.020261288 -0.019783855 -0.019295693 -0.01881218 -0.018339634 -0.017850995 -0.017361403 -0.016825557 -0.016240597 -0.015781165 -0.0152060995 -0.014674664 -0.014114022 -0.013576031 -0.013011694 -0.012483716 -0.0119303465 -0.011340976 -0.010780573 -0.010236621 -0.009679079 -0.009107232 -0.008543253 -0.007988811 -0.0074366327 -0.006830334 -0.006283641 -0.005709529 -0.0051181317 -0.004565954 -0.0039943457 -0.0034459827 -0.0029064417 -0.0023440125 -0.0018084048 -0.0012460948 -7.225275E-4 -1.941919E-4 3.432035E-4 8.763076E-4 0.0014021398 0.0019261836 0.0024522543 0.0030025244 0.0035226345 0.0040358305 0.0045366287 0.0050525665 0.0055482388 0.00607419 0.0065785647 0.007089496 0.0075758696 0.008088112 0.008584499 0.009101391 0.009611607 0.010098934 0.010604739 0.011112571 0.011624098 0.01209867 0.012260818)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 7.680655E-4 0.001060009 0.0014246702 0.0017653704 0.002166152 0.0024369955 0.002822876 0.003191233 0.003579378 0.004004121 0.00436604 0.004769087 0.005204797 0.005628228 0.0060613156 0.006495118 0.006941676 0.0073977714 0.0078651905 0.008326054 0.008878589 0.009441853 0.010021329 0.010630488 0.011268973 0.0119690895 0.012666106 0.013409972 0.014187574 0.015007496 0.015797735 0.016673685 0.017537952 0.018440843 0.01933062 0.020264388 0.021182478 0.02211994 0.023101688 0.02403742 0.024966062 0.025858581 0.026694358 0.027436614 0.028096199 0.028576553 0.028830769 0.028933943 0.028978227 0.02887553 0.02868867 0.028281393 0.027728916 0.02704352 0.026195229 0.025067747 0.024035663 0.0229007 0.021696657 0.020370245 0.019194752 0.017700851 0.0164918 0.015017539 0.013890983 0.012648463 0.011495531 0.010234505 0.0092484355 0.008333087 0.007479399 0.006777585 0.0059103817 0.005297497 0.0047254265 0.0041407496 0.003640473 0.003181487 0.0026253462 0.0023200512 0.001687929 0.0013114512 7.946641E-4 4.64499E-4 -1.745671E-4 -6.15582E-4 -0.0010281802 -0.0014993996 -0.001991555 -0.0024606288 -0.0028967709 -0.003393784 -0.0038162172 -0.004362285 -0.00489378 -0.005427122 -0.0059606284 -0.0065577626 -0.0070459545 -0.0077108746 -0.00849542 -0.009097755 -0.009936601 -0.0106417835 -0.0114427805 -0.012232035 -0.013069183 -0.013916075 -0.014747291 -0.015662015 -0.016445905 -0.017299712 -0.018115044 -0.018858135 -0.019565314 -0.020236314 -0.02091366 -0.02149731 -0.02205187 -0.02253884 -0.022963524 -0.023372889 -0.02371478 -0.024041057 -0.024177432 -0.024379015 -0.024531723 -0.024660886 -0.024685204 -0.02468884 -0.024624408 -0.02455616 -0.024370194 -0.024205506 -0.02396667 -0.023705602 -0.02343452 -0.023119212 -0.022802592 -0.022437692 -0.0220263 -0.021608115 -0.021154404 -0.020690799 -0.020261288 -0.019783855 -0.019295693 -0.01881218 -0.018339634 -0.017850995 -0.017361403 -0.016825557 -0.016240597 -0.015781165 -0.0152060995 -0.014674664 -0.014114022 -0.013576031 -0.013011694 -0.012483716 -0.0119303465 -0.011340976 -0.010780573 -0.010236621 -0.009679079 -0.009107232 -0.008543253 -0.007988811 -0.0074366327 -0.006830334 -0.006283641 -0.005709529 -0.0051181317 -0.004565954 -0.0039943457 -0.0034459827 -0.0029064417 -0.0023440125 -0.0018084048 -0.0012460948 -7.225275E-4 -1.941919E-4 3.432035E-4 8.763076E-4 0.0014021398 0.0019261836 0.0024522543 0.0030025244 0.0035226345 0.0040358305 0.0045366287 0.0050525665 0.0055482388 0.00607419 0.0065785647 0.007089496 0.0075758696 0.008088112 0.008584499 0.009101391 0.009611607 0.010098934 0.010604739 0.011112571 0.011624098 0.01209867 0.012260818))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0036136397 0.0036754012 0.0037524847 0.0037990956 0.0038273633 0.0038741976 0.0039459765 0.003947824 0.003963142 0.003970936 0.003960088 0.003939301 0.003907606 0.00384748 0.0037821827 0.0036695453 0.0035371185 0.0033872577 0.003192991 0.0029722154 0.002728626 0.0024430305 0.0020728559 0.0017129928 0.0012889952 8.005947E-4 2.743751E-4 -3.36498E-4 -0.0010069312 -0.0017605572 -0.0025285483 -0.0032645464 -0.003978029 -0.004625559 -0.0051891506 -0.0055898726 -0.0058861077 -0.0060896576 -0.006272301 -0.006417945 -0.006558761 -0.006609112 -0.0066153854 -0.006556779 -0.0064399094 -0.006292574 -0.006085187 -0.005796388 -0.0056329146 -0.005367242 -0.0050853267 -0.0047931 -0.0045363307 -0.0042522848 -0.00401517 -0.0037704632 -0.0035657212 -0.0033716597 -0.0031839982 -0.0030256135 -0.0028802008 -0.0027540848 -0.0026422853 -0.002536282 -0.0024377928 -0.002342917 -0.0022540652 -0.0021875352 -0.0021187738 -0.0020324644 -0.0019634422 -0.0018968452 -0.0018418544 -0.0017724782 -0.00173999 -0.0016308316 -0.0015918166 -0.0015226714 -0.0014797312 -0.001445396 -0.001394515 -0.0013322812 -0.0012751102 -0.0012479676 -0.0011862964 -0.0011696806 -0.0011409788 -0.0011066054 -0.0010739134 -0.001042076 -0.0010247644 -9.85153E-4 -9.449192E-4 -9.307138E-4 -8.870846E-4 -8.510348E-4 -8.117626E-4 -7.97003E-4 -7.520337E-4 -7.133223E-4 -6.729695E-4 -6.466433E-4 -6.211251E-4 -5.872929E-4 -5.526152E-4 -5.088923E-4 -4.827678E-4 -4.500663E-4 -4.305048E-4 -4.064096E-4 -3.931914E-4 -3.550118E-4 -3.382536E-4 -3.32091E-4 -3.038114E-4 -2.950532E-4 -2.769837E-4 -2.735183E-4 -2.608858E-4 -2.665306E-4 -2.649985E-4 -2.637422E-4 -2.485272E-4 -2.578497E-4 -2.578758E-4 -2.487265E-4 -2.262648E-4 -2.183802E-4 -2.232436E-4 -2.103522E-4 -2.054982E-4 -2.107024E-4 -1.969635E-4 -1.84292E-4 -1.695864E-4 -1.675915E-4 -1.659542E-4 -1.711939E-4 -1.59163E-4 -1.462847E-4 -1.225099E-4 -1.344997E-4 -1.325328E-4 -1.369156E-4 -1.256131E-4 -1.060963E-4 -1.109708E-4 -1.160428E-4 -1.209136E-4 -1.239758E-4 -1.265835E-4 -1.164079E-4 -1.079645E-4 -9.03998E-5 -1.05761E-4 -8.70172E-5 -9.5021E-5 -1.005679E-4 -9.395E-5 -9.94075E-5 -9.05413E-5 -8.94442E-5 -9.39011E-5)) (quote (-0.0016403094 -0.0017327444 -0.001862798 -0.0019643866 -0.002047062 -0.002156917 -0.0021554828 -0.0022898242 -0.0022675395 -0.0023690686 -0.0024470836 -0.0025097055 -0.0025675297 -0.0026181266 -0.002657123 -0.0027186722 -0.0027737769 -0.002807118 -0.002867021 -0.0029206795 -0.0029252544 -0.0029920414 -0.0030229688 -0.003043339 -0.003076084 -0.003080152 -0.0030845628 -0.003075458 -0.0030942634 -0.0031450615 -0.0031847209 -0.003155738 -0.0031024218 -0.003048465 -0.0030199588 -0.003031671 -0.0030493439 -0.0030807557 -0.0031499565 -0.0031737537 -0.0031656176 -0.0030799508 -0.002925545 -0.0027739557 -0.0026059449 -0.0024566055 -0.0023272785 -0.0021876993 -0.0021177975 -0.0020122677 -0.0019301772 -0.0018684268 -0.001797393 -0.0017468332 -0.0016922356 -0.0016652198 -0.0016471596 -0.0016321988 -0.001635477 -0.001643911 -0.0016662479 -0.0016918333 -0.0017138124 -0.0017322004 -0.0017481446 -0.0017803313 -0.0017943232 -0.0017807782 -0.0017827452 -0.001774162 -0.001752317 -0.0017317532 -0.0016884804 -0.0016727598 -0.0016359688 -0.00152722 -0.0015235843 -0.00144431 -0.0014102162 -0.001336664 -0.0012919606 -0.0012019874 -0.0011397302 -0.0010646732 -9.974688E-4 -9.338856E-4 -8.86485E-4 -8.29488E-4 -7.91371E-4 -7.526726E-4 -7.143468E-4 -6.809831E-4 -6.474853E-4 -6.185472E-4 -5.774647E-4 -5.327612E-4 -5.166978E-4 -4.821718E-4 -4.590005E-4 -4.261434E-4 -3.934205E-4 -3.606528E-4 -3.425777E-4 -3.020465E-4 -2.681464E-4 -2.364367E-4 -2.019107E-4 -1.76847E-4 -1.728684E-4 -1.370013E-4 -1.285374E-4 -9.14186E-5 -7.24643E-5 -4.27067E-5 -3.92646E-5 -4.25428E-5 -3.60459E-5 -2.04891E-5 -9.1642E-6 -1.32471E-5 -1.83582E-5 1.01924E-5 1.51545E-5 1.18762E-5 -1.49E-7 -5.2601E-6 -7.54E-6 1.72853E-5 1.49757E-5 3.08305E-5 2.11447E-5 9.9838E-6 2.08616E-5 2.15024E-5 1.98036E-5 3.995E-5 1.7345E-5 1.40071E-5 1.13249E-5 2.61813E-5 3.17991E-5 3.56138E-5 4.58807E-5 5.15282E-5 5.90682E-5 6.65337E-5 7.64877E-5 9.59933E-5 1.066327E-4 1.066327E-4 1.26645E-4 1.284927E-4 1.551807E-4 1.569986E-4 1.638085E-4 1.75789E-4 1.914352E-4 2.062768E-4 2.100021E-4 2.251863E-4 2.316087E-4 2.337545E-4 2.395563E-4)) (quote (0.012260818 0.012666225 0.013229728 0.013802648 0.014323592 0.01494825 0.015484215 0.016138196 0.016690016 0.017352581 0.017986894 0.01860261 0.019261718 0.019913912 0.020571113 0.021245718 0.021924854 0.022591353 0.023285389 0.024004579 0.024697423 0.025408626 0.026144386 0.026824594 0.027512253 0.028140964 0.028726042 0.029244064 0.029661952 0.029889584 0.029696823 0.029206992 0.02846086 0.027491153 0.02636224 0.025107444 0.02385658 0.022492588 0.02117145 0.019898475 0.01870799 0.017599792 0.01637268 0.015302003 0.014198392 0.013182163 0.012159675 0.011195719 0.010265201 0.009331644 0.008487999 0.007726103 0.006958932 0.006316811 0.0056630075 0.0050711036 0.004568428 0.0040917397 0.0036795435 0.0033172965 0.0029852987 0.002699405 0.0024318397 0.002228886 0.0019857583 0.0018467308 0.001750052 0.0015894772 0.0014946164 0.0013963282 0.0013417602 0.0012924076 0.001248479 0.0012053849 0.001217574 0.0011916758 0.0011795462 0.0011428298 0.001140058 0.00112319 0.0011336508 0.0011134446 0.0010935664 0.0011093319 0.0010448098 0.001058221 0.0010213852 9.777248E-4 9.763838E-4 9.300114E-4 9.196402E-4 8.713902E-4 8.072257E-4 7.994175E-4 7.319152E-4 6.631315E-4 5.923808E-4 5.200506E-4 4.632175E-4 4.325807E-4 3.753901E-4 3.510714E-4 3.032386E-4 2.584457E-4 2.158284E-4 1.627803E-4 1.02371E-4 4.84288E-5 5.5432E-6 -4.5985E-5 -6.03199E-5 -1.295507E-4 -1.767874E-4 -2.3067E-4 -2.810657E-4 -3.125966E-4 -3.217459E-4 -3.69668E-4 -4.025996E-4 -3.934801E-4 -4.147887E-4 -4.534423E-4 -4.826188E-4 -4.765689E-4 -4.869103E-4 -4.802942E-4 -4.635751E-4 -5.150437E-4 -5.158186E-4 -5.221665E-4 -5.180539E-4 -5.183518E-4 -5.437434E-4 -5.345047E-4 -5.428791E-4 -5.754232E-4 -5.388856E-4 -5.412996E-4 -5.848706E-4 -5.831122E-4 -5.462767E-4 -5.411804E-4 -5.528033E-4 -5.335808E-4 -5.25564E-4 -5.422831E-4 -5.213916E-4 -5.072653E-4 -4.763305E-4 -4.369318E-4 -4.374683E-4 -4.231632E-4 -4.39018E-4 -4.133582E-4 -3.974438E-4 -3.857017E-4 -3.610849E-4 -3.584325E-4 -3.150702E-4 -3.403425E-4 -3.087521E-4 -2.777874E-4 -2.749462E-4)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 0.012260818 0.012666225 0.013229728 0.013802648 0.014323592 0.01494825 0.015484215 0.016138196 0.016690016 0.017352581 0.017986894 0.01860261 0.019261718 0.019913912 0.020571113 0.021245718 0.021924854 0.022591353 0.023285389 0.024004579 0.024697423 0.025408626 0.026144386 0.026824594 0.027512253 0.028140964 0.028726042 0.029244064 0.029661952 0.029889584 0.029696823 0.029206992 0.02846086 0.027491153 0.02636224 0.025107444 0.02385658 0.022492588 0.02117145 0.019898475 0.01870799 0.017599792 0.01637268 0.015302003 0.014198392 0.013182163 0.012159675 0.011195719 0.010265201 0.009331644 0.008487999 0.007726103 0.006958932 0.006316811 0.0056630075 0.0050711036 0.004568428 0.0040917397 0.0036795435 0.0033172965 0.0029852987 0.002699405 0.0024318397 0.002228886 0.0019857583 0.0018467308 0.001750052 0.0015894772 0.0014946164 0.0013963282 0.0013417602 0.0012924076 0.001248479 0.0012053849 0.001217574 0.0011916758 0.0011795462 0.0011428298 0.001140058 0.00112319 0.0011336508 0.0011134446 0.0010935664 0.0011093319 0.0010448098 0.001058221 0.0010213852 9.777248E-4 9.763838E-4 9.300114E-4 9.196402E-4 8.713902E-4 8.072257E-4 7.994175E-4 7.319152E-4 6.631315E-4 5.923808E-4 5.200506E-4 4.632175E-4 4.325807E-4 3.753901E-4 3.510714E-4 3.032386E-4 2.584457E-4 2.158284E-4 1.627803E-4 1.02371E-4 4.84288E-5 5.5432E-6 -4.5985E-5 -6.03199E-5 -1.295507E-4 -1.767874E-4 -2.3067E-4 -2.810657E-4 -3.125966E-4 -3.217459E-4 -3.69668E-4 -4.025996E-4 -3.934801E-4 -4.147887E-4 -4.534423E-4 -4.826188E-4 -4.765689E-4 -4.869103E-4 -4.802942E-4 -4.635751E-4 -5.150437E-4 -5.158186E-4 -5.221665E-4 -5.180539E-4 -5.183518E-4 -5.437434E-4 -5.345047E-4 -5.428791E-4 -5.754232E-4 -5.388856E-4 -5.412996E-4 -5.848706E-4 -5.831122E-4 -5.462767E-4 -5.411804E-4 -5.528033E-4 -5.335808E-4 -5.25564E-4 -5.422831E-4 -5.213916E-4 -5.072653E-4 -4.763305E-4 -4.369318E-4 -4.374683E-4 -4.231632E-4 -4.39018E-4 -4.133582E-4 -3.974438E-4 -3.857017E-4 -3.610849E-4 -3.584325E-4 -3.150702E-4 -3.403425E-4 -3.087521E-4 -2.777874E-4 -2.749462E-4))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-9.39011E-5 -9.61293E-5 -8.72295E-5 -8.47615E-5 -9.08338E-5 -9.27169E-5 -8.60002E-5 -9.8763E-5 -9.0031E-5 -8.80379E-5 -8.09785E-5 -8.75983E-5 -8.88947E-5 -1.027938E-4 -1.100767E-4 -1.215208E-4 -1.305938E-4 -9.60808E-5 -1.904443E-4 -2.106093E-4 -2.454147E-4 -2.411809E-4 -2.991781E-4 -3.423225E-4 -3.688466E-4 -3.782269E-4 -4.35099E-4 -4.550964E-4 -4.769936E-4 -4.886389E-4 -4.948378E-4 -5.006529E-4 -5.085561E-4 -4.920568E-4 -4.744772E-4 -4.218854E-4 -3.69003E-4 -2.86147E-4 -2.15238E-4 -1.197681E-4 8.1435E-6 1.511984E-4 3.147032E-4 5.093199E-4 7.00511E-4 8.72314E-4 0.0010537468 0.0012490004 0.0014496092 0.0016309396 0.0018139276 0.0020315573 0.0021707658 0.0023718896 0.0025008237 0.002662084 0.0027931757 0.002917707 0.0030601297 0.0031985026 0.0033102543 0.0033982897 0.0035227128 0.0036124587 0.0037217345 0.0038079529 0.003876852 0.0039943047 0.004031755 0.00409624 0.0041499883 0.0041932687 0.0042346604 0.00425658 0.00426884 0.0043114796 0.0043481663 0.0043671504 0.0043694377 0.004371017 0.004366368 0.0043792427 0.004382789 0.0043650344 0.0043320656 0.004321508 0.0042921975 0.0042528138 0.0042173714 0.0041838437 0.0041291863 0.0040827543 0.004009381 0.0039535463 0.00392209 0.003830552 0.0037365109 0.0036390573 0.0035374912 0.0034433604 0.0033546836 0.003251642 0.0031503588 0.003066182 0.0029135195 0.002923414 0.0027588755 0.0027177036 0.0026660713 0.0026158989 0.002544284 0.0024852157 0.0024362356 0.0023853034 0.0023400188 0.0022913516 0.002251014 0.002221018 0.0021991285 0.0021812022 0.0021622926 0.0021487323 0.0021621883 0.0021764636 0.002179414 0.0022017658 0.0022285432 0.002263382 0.002278313 0.002299592 0.0023268313 0.0023356676 0.0023412109 0.0023440272 0.002337128 0.0023327768 0.0023315847 0.0023323894 0.0023044646 0.0023301244 0.0021941662 0.00243181 0.0024169684 0.0024345517 0.0024636984 0.0024455488 0.0025060177 0.0025624337 0.002590299 0.0026258529 0.0026575625 0.0026979149 0.0027497113 0.0027826727 0.002827853 0.0028693974 0.0029179752 0.0029535294 0.0030121208 0.0030514598 0.0031049252 0.0031351447 0.0031877458 0.0032028854 0.0032386482 0.0032681525 0.0032960177 0.0033158064 0.0033278463 0.0032871366 0.0033090117 0.0033169389 0.003337115 0.0033185184 0.0033138097 0.0033037665 0.003271639 0.0032408536 0.003205359 0.003161162 0.0030959249 0.00304541 0.0029896796 0.002925694 0.002851665 0.0027929247 0.0027031303 0.002641648 0.0025848449 0.002525419 0.0024705232 0.002417326 0.00237 0.0023357272 0.0022816956 0.0022412837 0.0021855235 0.0021407903 0.002058208 0.0020061732 0.001947254 0.0018834472 0.0018137992 0.0017555058 0.0017055868 0.0016626716 0.0016140342 0.0015644432 0.001511097 0.001484126 0.0014512838 0.0014124216 0.0013889372 0.0013456346 0.0013152362 0.0013099314 0.0012820066 0.0012404026 0.0012034774 0.0011614562 0.0011189878 0.0010879338 0.0010412932 9.883642E-4 9.428562E-4 8.64774E-4 7.933676E-4 6.867051E-4 5.584359E-4 4.443228E-4 2.98053E-4 1.365244E-4 -3.3766E-5 -2.067089E-4 -3.875196E-4 -5.809665E-4 -8.009076E-4 -0.001043588 -0.001266718 -0.0015135408 -0.0017809868 -0.002057135 -0.0023652017 -0.0026773215 -0.003056258 -0.0033873916 -0.0037344096 -0.0041104555 -0.0044947267 -0.0048553348 -0.0052209795 -0.005543858 -0.0059249997 -0.006285608 -0.0066482127 -0.0070240498 -0.0073504746 -0.0077004726 -0.008043528 -0.0083684325 -0.008679479 -0.009015292 -0.009327948 -0.009325087 -0.009790301 -0.010160148 -0.010510683 -0.010943502 -0.011212468 -0.01150769 -0.011769772 -0.012018889 -0.012294278 -0.012556121 -0.012895256 -0.01311928 -0.0133987665 -0.013593971 -0.013796106 -0.014052883 -0.014257856 -0.014461845 -0.014655694 -0.014831275 -0.015031118 -0.015193171 -0.015307775 -0.015458334 -0.015569939 -0.015677643 -0.015786248 -0.015933387 -0.015835885 -0.015978903 -0.016064033 -0.01614932 -0.016222775 -0.016258061 -0.016398594 -0.016363517 -0.016457856 -0.016430259 -0.01641956 -0.016460285 -0.016624883 -0.0165326 -0.01647064 -0.016192258 -0.016202778 -0.01589021 -0.015834928 -0.015946329 -0.01552701 -0.015687257 -0.015510917 -0.015246092 -0.015024066 -0.014765531 -0.014546483 -0.014799713 -0.013918847 -0.013640164 -0.01349628 -0.01314503 -0.013383985 -0.0123561025 -0.012183428 -0.011840463 -0.011439204 -0.011070967 -0.010632753 -0.010221362 -0.009787679 -0.009313345 -0.00883621 -0.008372068 -0.007911921 -0.007439852 -0.006972432 -0.0065196157 -0.006023288 -0.0055760145 -0.0051039457 -0.0046316385 -0.0041421056 -0.0037009716 -0.0033118129 -0.0028703213 -0.0023866296 -0.0020284653 -0.001674235 -0.0012560488 -9.25243E-4 -5.631447E-4 -2.703071E-4 3.06368E-5 3.308058E-4 6.787777E-4 9.518266E-4 0.0013210774 0.0016130806 0.0019477606 0.0023018718 0.002620995 0.002888739 0.0033153892 0.0036524537 0.0040684934 0.0044668913 0.004899919 0.005299449 0.00571692 0.006086111 0.006518841 0.007025122 0.00748545 0.008021951 0.008527577 0.009058833 0.009618819 0.010096729 0.010620415 0.011219978 0.011838615 0.012376964 0.0128801465 0.013467371 0.014014007 0.0145097375 0.015042783 0.015527427 0.016055137 0.016543508 0.0169608 0.017381013 0.0178954 0.018306494 0.018648595 0.018940539 0.019259692 0.019576133 0.019890309 0.020121426 0.02035153 0.020524353 0.020504237 0.02070789 0.020615727 0.02063495 0.020760194 0.02062191 0.020489783 0.020386845 0.020305839 0.020133887 0.019909326 0.019677295 0.019382338 0.019147497 0.018835757 0.018463772 0.018149153 0.017840922 0.017401375 0.016919449 0.01636687 0.015707687 0.015006245 0.014279232 0.013556242 0.012825757 0.012127742 0.011446595 0.010812342 0.010152012 0.0095149875 0.008852094 0.008189648 0.0074789226 0.0067841406 0.006053865 0.005338967 0.004589319 0.0038162473 0.0030385554 0.00231874 0.001547724 7.971823E-4 3.26633E-5 -7.146001E-4 -0.0014845134 -0.0022456348 -0.0029902757 -0.003770262 -0.0045003593 -0.005246371 -0.005963087 -0.0066908 -0.0073120296 -0.008013159 -0.008689225 -0.009379268 -0.009985864 -0.010612041 -0.011181384 -0.01177597 -0.012318745 -0.012814298 -0.013386652 -0.013793051 -0.014243155 -0.014673562 -0.014991687 -0.015356959 -0.015716277 -0.015977532 -0.01622811 -0.016411856 -0.016601623 -0.01671184 -0.0168373 -0.016876087 -0.016841807 -0.016850278 -0.016861845 -0.016770043 -0.016635746 -0.016540647 -0.016393833 -0.01618521 -0.016011596 -0.015829444 -0.015555292 -0.015250444 -0.014973342 -0.014725998 -0.014292136 -0.013977587 -0.013616472 -0.013277024 -0.012842804 -0.012556016 -0.01210165 -0.011620998 -0.011120826 -0.010654569 -0.010172367 -0.009666175 -0.009238362 -0.008780479 -0.008294463 -0.00784865 -0.0073472858 -0.006891668 -0.0064349473 -0.005941361 -0.005480945 -0.005061567 -0.0045672357 -0.0041055978 -0.0037442744 -0.0032287538 -0.0028080345 -0.0023492277 -0.0019266905 -0.0014811158 -0.0010456742 -6.246567E-4 -1.580715E-4 2.575219E-4 6.993413E-4 0.0010979176 0.0015836656 0.0019441544 0.0023769439 0.0027323068 0.0031911433 0.0035012064 0.0039063394 0.004318565 0.0045944154 0.0049484074 0.0052543283 0.005577028 0.0057886243 0.0061103106 0.0063207448 0.006563127 0.006764978 0.0069856048 0.0071497266 0.0072973673 0.0074490006 0.007632941 0.007694185 0.0077419575 0.007788778 0.008050144 0.007954508 0.007869422 0.007872462 0.007825166 0.007710636 0.0076994305 0.0075298846 0.007377952 0.0072785025 0.0070881546 0.0068992977 0.0066801314 0.0064517707 0.00628981 0.006007254 0.00577046 0.0055520088 0.005215198 0.004958436 0.0046985294 0.004321888 0.0040600747 0.0037483424 0.0034338537 0.0030735284 0.0027795136 0.0025216937 0.0021487773 0.0018567294 0.0015890598 0.0012942256 9.877534E-4 6.939173E-4 4.343987E-4 9.07928E-5 -1.866668E-4 -4.556328E-4 -7.289201E-4 -9.720176E-4 -0.0012626798 -0.0014412552 -0.0025702417 -0.0026468637 -0.002715245 -0.002820775 -0.003011778 -0.003119171 -0.0032952726 -0.0034880787 -0.0036600975 -0.0038001088 -0.003897644)) (quote (2.395563E-4 2.424568E-4 2.415627E-4 2.490282E-4 2.48298E-4 2.55093E-4 2.677441E-4 2.517253E-4 2.43932E-4 2.456605E-4 2.467036E-4 2.201945E-4 2.003461E-4 1.634508E-4 1.202226E-4 6.46263E-5 -8.345E-7 -2.84314E-5 -1.720488E-4 -2.646148E-4 -3.978759E-4 -5.249679E-4 -6.684363E-4 -8.401276E-4 -0.0010338724 -0.0012051612 -0.0014107674 -0.001604721 -0.0018207728 -0.0020193756 -0.0022082329 -0.00239411 -0.0025461614 -0.0027421415 -0.0029003919 -0.0030423405 -0.0032106638 -0.0033553245 -0.003505856 -0.0036678613 -0.0038017037 -0.0039442186 -0.0040783584 -0.004222214 -0.004352689 -0.004450351 -0.0045476556 -0.004674226 -0.004772693 -0.0048778653 -0.0049657826 -0.0051026344 -0.0051958263 -0.005323857 -0.0054655373 -0.0055933893 -0.005712807 -0.005824685 -0.006027162 -0.006049037 -0.0061505437 -0.0062948764 -0.006286323 -0.006400883 -0.006502062 -0.006509751 -0.0064721108 -0.0065793693 -0.0065553487 -0.006567538 -0.0065646474 -0.006545633 -0.006546974 -0.0065646768 -0.006524682 -0.0064833164 -0.0064064264 -0.006329596 -0.0062657 -0.006158471 -0.006044507 -0.0060201287 -0.005900562 -0.0057778955 -0.0056269765 -0.005506575 -0.005375445 -0.0052275658 -0.005075276 -0.0049045086 -0.0047914386 -0.004619837 -0.0044447184 -0.0042617917 -0.0040760637 -0.003925681 -0.0037704704 -0.0036028028 -0.003435254 -0.0032595396 -0.0031047464 -0.0029056073 -0.0027413369 -0.0025463105 -0.0024513603 -0.0021531582 -0.0020581484 -0.001865387 -0.0016746522 -0.0014608502 -0.0013036132 -0.0011443496 -9.91881E-4 -8.325577E-4 -6.90639E-4 -5.413294E-4 -3.824234E-4 -2.246499E-4 -6.18696E-5 1.000762E-4 2.670288E-4 4.318357E-4 6.096959E-4 7.884502E-4 9.596944E-4 0.001137197 0.0013405682 0.0015369058 0.0017341377 0.0019065738 0.0020975473 0.002291441 0.0024858713 0.0026700497 0.0028615594 0.0030367375 0.0032168033 0.0033932925 0.003347814 0.0036342144 0.0036846996 0.004171431 0.0043696165 0.0045500994 0.0047349334 0.0048760176 0.0050551295 0.0052503944 0.0053693056 0.00550282 0.0056301356 0.0057531595 0.0058867335 0.0059764385 0.006081164 0.0061893463 0.0063098073 0.0064082444 0.0064983964 0.0066403747 0.0067605674 0.0068674088 0.0069904626 0.0071122647 0.007213593 0.0073421896 0.007481128 0.007586956 0.007688224 0.007759124 0.007871807 0.0079830885 0.008081287 0.008156687 0.008243978 0.008312494 0.008363187 0.008408278 0.008470029 0.008507669 0.008244336 0.00867033 0.008662194 0.008639425 0.008656055 0.008657634 0.008630037 0.008630753 0.008613199 0.008588374 0.008553177 0.008516565 0.008483022 0.008443594 0.008382216 0.008326933 0.008279085 0.008224949 0.008166343 0.008108854 0.008052215 0.008021176 0.007949516 0.007902116 0.007858239 0.00780908 0.0077644144 0.0077351257 0.007704019 0.0076558734 0.0076432303 0.0076276655 0.007602047 0.0075840578 0.007567934 0.0075845975 0.007537335 0.007518776 0.0074899737 0.007475348 0.007443313 0.007436235 0.0074324194 0.007436344 0.007423587 0.007394901 0.007379573 0.007372346 0.007351715 0.0073190145 0.007309489 0.007276252 0.007273056 0.0072404146 0.007212683 0.0072045624 0.007171773 0.0071754456 0.0071398616 0.007115692 0.007084772 0.007023424 0.0069737584 0.006889075 0.0068397378 0.006731034 0.006607443 0.006496787 0.0063399226 0.0062052314 0.0060201883 0.0057964176 0.005567506 0.005315736 0.004974991 0.0045933724 0.004167691 0.0036929548 0.0031951368 0.002663806 0.0021030009 0.0015677512 0.0010026696 6.046891E-4 3.576E-7 -5.89341E-4 -0.0011360647 -0.0016682744 -0.0021658838 -0.002658591 -0.0031322986 -0.0036027728 -0.0040403456 -0.0044765026 -0.004755094 -0.0052699 -0.005500078 -0.006232485 -0.006628692 -0.00701046 -0.007381424 -0.007837489 -0.008194104 -0.008512497 -0.008880153 -0.009194672 -0.009447828 -0.009738311 -0.010002464 -0.010245062 -0.010443635 -0.010617979 -0.010695308 -0.010877781 -0.010999303 -0.011084758 -0.011147119 -0.011251606 -0.011368725 -0.011348969 -0.011366357 -0.011345968 -0.011384439 -0.011378162 -0.011482146 -0.011395376 -0.0113104135 -0.01114817 -0.011148915 -0.011009499 -0.010835722 -0.010615662 -0.010414436 -0.010210514 -0.009979993 -0.009729311 -0.009496927 -0.009208471 -0.0089383125 -0.008146957 -0.008538589 -0.008150786 -0.007896394 -0.007511616 -0.006733432 -0.00706622 -0.0067967177 -0.0064556003 -0.0061396063 -0.005842 -0.005541414 -0.0052693784 -0.005008936 -0.0047308207 -0.004481584 -0.0041936934 -0.003953576 -0.0036695304 -0.0034035144 -0.003174901 -0.002924085 -0.0026794672 -0.0024285913 -0.002196014 -0.002001822 -0.001931846 -0.0016453266 -0.0014535488 -0.0012577474 -0.0011136532 -0.0010895432 -8.662642E-4 -7.64221E-4 -7.291436E-4 -5.949438E-4 -5.431772E-4 -4.95106E-4 -3.276765E-4 -3.434718E-4 -1.562536E-4 -8.91984E-5 -6.11842E-5 9.33409E-5 1.418591E-4 1.074076E-4 1.736581E-4 1.82271E-4 1.973808E-4 1.489818E-4 2.728999E-4 1.885593E-4 1.575649E-4 2.28286E-5 -1.146197E-4 -1.133084E-4 -2.094805E-4 -2.893507E-4 -3.214777E-4 -3.979504E-4 -3.804266E-4 -4.397035E-4 -5.965233E-4 -5.13196E-4 -4.618764E-4 -4.906654E-4 -5.337596E-4 -4.11123E-4 -3.612936E-4 -3.542602E-4 -1.165271E-4 -2.367496E-4 8.6695E-5 2.267659E-4 4.236698E-4 5.158186E-4 6.903112E-4 0.0011465848 0.0012533964 0.0015954377 0.0019519032 0.002259344 0.0026390255 0.002945155 0.0031825304 0.0035451057 0.003974706 0.0043480396 0.004709333 0.0050759316 0.0055014193 0.0058359504 0.006277144 0.006668836 0.0070481897 0.007453144 0.007850915 0.008214802 0.008579791 0.00894849 0.009280741 0.009615451 0.009910896 0.010188252 0.010391921 0.010493711 0.01050432 0.010467067 0.01036194 0.010229632 0.010104537 0.009932883 0.009765893 0.00957904 0.009421244 0.009236053 0.009003699 0.008768953 0.008485138 0.0081688985 0.007786956 0.007408671 0.0070343986 0.006707143 0.006326371 0.0059796637 0.0056510316 0.0052971 0.0049494924 0.0046052006 0.0042639096 0.0039592516 0.0035831184 0.0032689106 0.0029514355 0.002630977 0.0023436437 0.0020978973 0.0017790384 0.001568608 0.001377944 0.0011316128 8.867122E-4 7.02057E-4 4.997551E-4 3.642775E-4 1.637153E-4 3.52971E-5 -9.99197E-5 -2.737716E-4 -3.759414E-4 -5.020798E-4 -6.160215E-4 -7.222816E-4 -8.058809E-4 -9.058416E-4 -9.833314E-4 -0.0010619984 -0.001125254 -0.0011952892 -0.0012514108 -0.0012874268 -0.0013365336 -0.0013253578 -0.0014011264 -0.0013385378 -0.0014325008 -0.0013330598 -0.0013061502 -0.0013295208 -0.001281839 -0.0013138988 -0.0012442564 -0.0012459924 -0.0012582374 -0.001184646 -0.0011947426 -0.0012129722 -0.001228124 -0.0012449204 -0.0012961618 -0.001365143 -0.0012086544 -0.0013001398 -0.0013559876 -0.001394792 -0.0014239724 -0.0015210915 -0.001509982 -0.0015433777 -0.001528593 -0.0015556556 -0.0015898896 -0.0015995466 -0.0016122806 -0.001650475 -0.0016526682 -0.0016226146 -0.0016237758 -0.0016944856 -0.001671765 -0.0015716776 -0.0015426818 -0.001565639 -0.0015456136 -0.0014225376 -0.0014598388 -0.0013341568 -0.0013742596 -0.0011942984 -0.001239732 -0.001015529 -9.619222E-4 -8.719974E-4 -8.488148E-4 -7.169917E-4 -5.552992E-4 -3.933236E-4 -1.839101E-4 -1.382865E-4 3.79086E-5 2.01568E-4 3.620461E-4 5.501732E-4 7.881224E-4 9.023362E-4 9.746514E-4 0.0011485256 0.0012975336 0.0014738552 0.001603391 0.001763463 0.0018898174 0.0019988362 0.00211766 0.0022202523 0.002358824 0.0023813732 0.0024259836 0.002406613 0.002499422 0.0026029284 0.0027269167 0.002667314 0.0026724683 0.0026822442 0.002663519 0.0027364609 0.0026517166 0.0026241178 0.002565477 0.0025444255 0.002504086 0.002472015 0.002307078 0.0022521336 0.002141202 0.0020925068 0.0019649268 0.001849357 0.001743324 0.001642801 0.0015587472 0.0014302284 0.0012158454 0.0011135303 9.349958E-4 7.715337E-4 6.122887E-4 4.506633E-4 2.898313E-4 1.161657E-4 -2.26684E-5 -2.135783E-4 -3.638342E-4 -5.278364E-4 -6.907918E-4 -8.807668E-4 -0.0010161176 -0.00114844 -0.0018686912 -0.0018986724 -0.0019290148 -0.0019735396 -0.0020663813 -0.0021154993 -0.0022564866 -0.0022883378 -0.002403665 -0.0024931785 -0.0025166145)) (quote (-2.749462E-4 -2.735257E-4 -2.336204E-4 -2.265871E-4 -2.096295E-4 -1.977682E-4 -1.852512E-4 -1.48356E-4 -1.370311E-4 -1.330674E-4 -1.397133E-4 -1.116097E-4 -1.221597E-4 -9.91523E-5 -9.31919E-5 -9.27746E-5 -1.298785E-4 -1.708865E-4 -1.43826E-4 -1.799762E-4 -1.640022E-4 -2.042949E-4 -2.955496E-4 -2.913475E-4 -3.53992E-4 -4.637241E-4 -5.513132E-4 -6.607473E-4 -7.090271E-4 -7.916987E-4 -8.816422E-4 -9.837152E-4 -0.0010699034 -0.001108706 -0.0011705458 -0.0012910664 -0.0013798775 -0.0014257134 -0.0015850366 -0.0016820432 -0.0018340348 -0.0020236373 -0.0021837056 -0.002378404 -0.0025740564 -0.00283432 -0.0030558107 -0.003275782 -0.0035791397 -0.00380975 -0.0041038096 -0.004331887 -0.004637003 -0.004823476 -0.0050729513 -0.005261451 -0.0055110455 -0.0057308674 -0.005804032 -0.0060941875 -0.006298691 -0.006418228 -0.006726712 -0.0068494976 -0.0070724194 -0.00727734 -0.007483512 -0.0076618497 -0.00787726 -0.008014262 -0.008183539 -0.008345872 -0.00854218 -0.00867793 -0.008727014 -0.008899152 -0.009097934 -0.009208798 -0.009330571 -0.009467483 -0.009603083 -0.009785652 -0.009882629 -0.009972692 -0.010079265 -0.010123014 -0.010220945 -0.010269344 -0.010314524 -0.010345876 -0.010386229 -0.010387957 -0.010407209 -0.010430038 -0.010380864 -0.010389686 -0.010383904 -0.010339975 -0.010299504 -0.010248303 -0.010200083 -0.010118246 -0.010070205 -0.010017931 -0.009900093 -0.009951949 -0.009827256 -0.009809554 -0.009799838 -0.009828627 -0.009789288 -0.009755731 -0.009721994 -0.009674966 -0.009641409 -0.009604812 -0.009546578 -0.0094893575 -0.009429157 -0.00936985 -0.009323835 -0.009260535 -0.009176254 -0.00910908 -0.009049177 -0.00899756 -0.008919597 -0.008875132 -0.008815527 -0.0087378025 -0.008656979 -0.008571029 -0.008467317 -0.008372426 -0.00825417 -0.008150339 -0.0080292225 -0.007888675 -0.007854462 -0.007702112 -0.007354736 -0.0075062514 -0.007367969 -0.0072364807 -0.007104516 -0.0069282055 -0.00681448 -0.006666422 -0.006513953 -0.0063720946 -0.006219864 -0.00605917 -0.0059047938 -0.005726576 -0.0055708885 -0.00539577 -0.005232692 -0.005058646 -0.004914999 -0.004713893 -0.0045695305 -0.004389882 -0.004229188 -0.00409019 -0.0039070845 -0.0037626028 -0.0036154983 -0.0034625528 -0.003290534 -0.0031411648 -0.0029873848 -0.0028455255 -0.0026490689 -0.0024821759 -0.0023235085 -0.002131462 -0.0019601584 -0.0017535687 -0.0015559197 -0.0013576746 -0.0010910034 -9.653568E-4 -7.199049E-4 -4.810095E-4 -2.590418E-4 -4.12464E-5 2.282858E-4 4.90427E-4 6.92606E-4 9.549856E-4 0.001210928 0.0014350414 0.0016561748 0.0019013882 0.0021330119 0.0023645165 0.0025810004 0.0027718544 0.003017068 0.0032644272 0.0034917593 0.00375247 0.004027009 0.0043199063 0.0045872927 0.004885435 0.005186081 0.005479098 0.005808592 0.0061142445 0.006438136 0.006757498 0.0070604086 0.0074203015 0.007743001 0.008022189 0.008355737 0.008712888 0.009042978 0.009387374 0.009724975 0.010053635 0.010388136 0.010716677 0.011036515 0.0114040375 0.0117201805 0.012087941 0.012428999 0.012809753 0.013159752 0.013519883 0.013866782 0.014231802 0.0145760765 0.01494199 0.015236378 0.015579581 0.015878022 0.016176939 0.016445697 0.016697884 0.016903043 0.017070353 0.017199874 0.01734835 0.017427922 0.017521918 0.017571688 0.017596066 0.017563045 0.01755637 0.017465949 0.017301023 0.017158568 0.016936958 0.016708553 0.0164662 0.016219199 0.015964807 0.0157035 0.015458167 0.015165627 0.014724375 0.014545888 0.014330149 0.01409784 0.013937325 0.013647347 0.0133630335 0.013022035 0.012636304 0.012271345 0.011919469 0.011523455 0.011125535 0.010861784 0.010236055 0.009763211 0.009368956 0.008849859 0.008416444 0.007920444 0.0074016447 0.0069067776 0.0063967705 0.0058746934 0.0053521395 0.0048187226 0.004281476 0.0037218333 0.0032393784 0.0025545508 0.0020986796 0.0016115308 0.0010948628 6.387681E-4 1.722574E-4 -3.975183E-4 -7.731766E-4 -0.0013141782 -0.0018317849 -0.0022902042 -0.002789408 -0.003144547 -0.003642708 -0.0041775257 -0.004675761 -0.0051736236 -0.0056760907 -0.0060580373 -0.0062904954 -0.0067948103 -0.006947011 -0.0074623823 -0.007718056 -0.008003563 -0.008270413 -0.008499116 -0.008388042 -0.00919798 -0.00921458 -0.009492755 -0.009576321 -0.009503037 -0.009972215 -0.009984553 -0.0100850165 -0.0101266205 -0.0101469755 -0.010235816 -0.010186434 -0.010166854 -0.010117739 -0.010033011 -0.009989858 -0.009817809 -0.009700298 -0.009583056 -0.009423494 -0.009271383 -0.009108603 -0.008942306 -0.008744299 -0.008568406 -0.008372903 -0.008112192 -0.007935703 -0.007689357 -0.0074976087 -0.0072859526 -0.0069870353 -0.0067781806 -0.0065492988 -0.0063192845 -0.006111145 -0.0058963895 -0.005554259 -0.0053310394 -0.005105555 -0.004864156 -0.0045559406 -0.0042793155 -0.0040129423 -0.0037863853 -0.0034805537 -0.003183782 -0.0028908253 -0.0026122928 -0.0022876265 -0.0019818545 -0.0017046928 -0.0013727546 -0.0010927916 -8.068085E-4 -5.382299E-4 -3.211498E-4 -1.171827E-4 7.61747E-5 2.262592E-4 4.685521E-4 5.556941E-4 6.908774E-4 7.814169E-4 9.02474E-4 0.0010155442 0.0010324718 0.0010576844 0.00119555 0.0011220574 0.0012070538 0.0011803508 0.0011590124 0.001161814 0.0011233094 0.0011446476 9.764434E-4 0.0010849238 0.0010002852 8.618236E-4 8.413792E-4 8.431078E-4 7.824898E-4 8.670688E-4 6.983876E-4 5.687475E-4 5.503297E-4 4.72188E-4 4.134774E-4 3.799796E-4 4.56512E-4 2.319217E-4 2.296567E-4 3.312826E-4 2.59161E-4 2.394915E-4 2.543926E-4 1.015067E-4 2.490878E-4 2.270341E-4 2.855062E-4 5.85318E-5 1.934767E-4 7.64728E-5 8.83341E-5 1.884103E-4 1.802444E-4 2.014637E-4 9.81688E-5 2.728701E-4 3.379583E-4 3.837943E-4 3.609061E-4 6.107688E-4 7.233621E-4 8.398294E-4 9.940268E-4 0.001220584 0.0014272332 0.001583755 0.0019024015 0.0021823049 0.002590418 0.0027463436 0.0030776263 0.0033395887 0.00369066 0.003993809 0.004285753 0.004557848 0.004983783 0.005139947 0.0054107905 0.0057379008 0.005973339 0.006210685 0.006530583 0.006612122 0.0068402286 0.007097482 0.0072396994 0.007268667 0.007480741 0.007493973 0.0076518655 0.0076184874 0.0077555776 0.0077441335 0.007642925 0.0076341634 0.0075106626 0.0073772674 0.00722003 0.0070309346 0.0068523586 0.006597519 0.006380409 0.006111294 0.0058191717 0.0055555105 0.0052561164 0.0049414337 0.004598975 0.0043503046 0.00405249 0.0037451384 0.0034097433 0.0031517446 0.0028909445 0.0026558042 0.0024518373 0.0021679995 0.0018636584 0.0016382636 0.0014460982 0.0011991263 9.802282E-4 7.531643E-4 5.469024E-4 3.349781E-4 2.255142E-4 -1.2061E-4 -2.530217E-4 -3.829002E-4 -4.847944E-4 -5.819499E-4 -5.963148E-4 -6.885231E-4 -8.235276E-4 -8.891822E-4 -8.917154E-4 -9.497404E-4 -9.475648E-4 -9.239614E-4 -8.820892E-4 -8.958578E-4 -8.479358E-4 -8.121729E-4 -7.313788E-4 -7.194281E-4 -7.520914E-4 -6.552339E-4 -5.90533E-4 -4.424751E-4 -4.07666E-4 -2.839565E-4 -3.018975E-4 -1.668334E-4 -1.420975E-4 2.46465E-5 4.00245E-5 1.075268E-4 2.088547E-4 3.486574E-4 3.800392E-4 4.805923E-4 5.488694E-4 5.20885E-4 6.689727E-4 7.081032E-4 7.870495E-4 8.134246E-4 8.45939E-4 8.473098E-4 8.504094E-4 9.399354E-4 9.655654E-4 9.619594E-4 9.392202E-4 9.408892E-4 9.083748E-4 8.952022E-4 8.706748E-4 8.492172E-4 7.98732E-4 7.565618E-4 7.517338E-4 7.84427E-4 7.460117E-4 6.274879E-4 6.037354E-4 4.799366E-4 4.189014E-4 3.739297E-4 2.98053E-4 2.447367E-4 1.569986E-4 1.477897E-4 1.116991E-4 -1.1623E-6 -3.94285E-5 -7.53105E-5 -2.022982E-4 -1.828671E-4 -1.684725E-4 -2.1258E-4 -2.092719E-4 -2.600253E-4 -2.575815E-4 -2.266765E-4 -2.266765E-4 -2.46495E-4 -2.131462E-4 -2.146661E-4 -1.873374E-4 -1.809597E-4 -2.184212E-4 -1.692474E-4 -1.690388E-4 -1.620054E-4 -1.707375E-4 -1.389682E-4 -1.443923E-4 -1.320243E-4 -1.08093E-4 -1.356602E-4 -1.191795E-4 -1.125634E-4 -8.44598E-5 -6.32107E-5 -7.75456E-5 -7.1764E-5 -6.62208E-5 -2.57492E-5 -1.36793E-5 -3.23355E-5 -2.93553E-5 -7.20322E-5 -6.97076E-5 -6.67577E-5)) (quotequote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list -2.749462E-4 -2.735257E-4 -2.336204E-4 -2.265871E-4 -2.096295E-4 -1.977682E-4 -1.852512E-4 -1.48356E-4 -1.370311E-4 -1.330674E-4 -1.397133E-4 -1.116097E-4 -1.221597E-4 -9.91523E-5 -9.31919E-5 -9.27746E-5 -1.298785E-4 -1.708865E-4 -1.43826E-4 -1.799762E-4 -1.640022E-4 -2.042949E-4 -2.955496E-4 -2.913475E-4 -3.53992E-4 -4.637241E-4 -5.513132E-4 -6.607473E-4 -7.090271E-4 -7.916987E-4 -8.816422E-4 -9.837152E-4 -0.0010699034 -0.001108706 -0.0011705458 -0.0012910664 -0.0013798775 -0.0014257134 -0.0015850366 -0.0016820432 -0.0018340348 -0.0020236373 -0.0021837056 -0.002378404 -0.0025740564 -0.00283432 -0.0030558107 -0.003275782 -0.0035791397 -0.00380975 -0.0041038096 -0.004331887 -0.004637003 -0.004823476 -0.0050729513 -0.005261451 -0.0055110455 -0.0057308674 -0.005804032 -0.0060941875 -0.006298691 -0.006418228 -0.006726712 -0.0068494976 -0.0070724194 -0.00727734 -0.007483512 -0.0076618497 -0.00787726 -0.008014262 -0.008183539 -0.008345872 -0.00854218 -0.00867793 -0.008727014 -0.008899152 -0.009097934 -0.009208798 -0.009330571 -0.009467483 -0.009603083 -0.009785652 -0.009882629 -0.009972692 -0.010079265 -0.010123014 -0.010220945 -0.010269344 -0.010314524 -0.010345876 -0.010386229 -0.010387957 -0.010407209 -0.010430038 -0.010380864 -0.010389686 -0.010383904 -0.010339975 -0.010299504 -0.010248303 -0.010200083 -0.010118246 -0.010070205 -0.010017931 -0.009900093 -0.009951949 -0.009827256 -0.009809554 -0.009799838 -0.009828627 -0.009789288 -0.009755731 -0.009721994 -0.009674966 -0.009641409 -0.009604812 -0.009546578 -0.0094893575 -0.009429157 -0.00936985 -0.009323835 -0.009260535 -0.009176254 -0.00910908 -0.009049177 -0.00899756 -0.008919597 -0.008875132 -0.008815527 -0.0087378025 -0.008656979 -0.008571029 -0.008467317 -0.008372426 -0.00825417 -0.008150339 -0.0080292225 -0.007888675 -0.007854462 -0.007702112 -0.007354736 -0.0075062514 -0.007367969 -0.0072364807 -0.007104516 -0.0069282055 -0.00681448 -0.006666422 -0.006513953 -0.0063720946 -0.006219864 -0.00605917 -0.0059047938 -0.005726576 -0.0055708885 -0.00539577 -0.005232692 -0.005058646 -0.004914999 -0.004713893 -0.0045695305 -0.004389882 -0.004229188 -0.00409019 -0.0039070845 -0.0037626028 -0.0036154983 -0.0034625528 -0.003290534 -0.0031411648 -0.0029873848 -0.0028455255 -0.0026490689 -0.0024821759 -0.0023235085 -0.002131462 -0.0019601584 -0.0017535687 -0.0015559197 -0.0013576746 -0.0010910034 -9.653568E-4 -7.199049E-4 -4.810095E-4 -2.590418E-4 -4.12464E-5 2.282858E-4 4.90427E-4 6.92606E-4 9.549856E-4 0.001210928 0.0014350414 0.0016561748 0.0019013882 0.0021330119 0.0023645165 0.0025810004 0.0027718544 0.003017068 0.0032644272 0.0034917593 0.00375247 0.004027009 0.0043199063 0.0045872927 0.004885435 0.005186081 0.005479098 0.005808592 0.0061142445 0.006438136 0.006757498 0.0070604086 0.0074203015 0.007743001 0.008022189 0.008355737 0.008712888 0.009042978 0.009387374 0.009724975 0.010053635 0.010388136 0.010716677 0.011036515 0.0114040375 0.0117201805 0.012087941 0.012428999 0.012809753 0.013159752 0.013519883 0.013866782 0.014231802 0.0145760765 0.01494199 0.015236378 0.015579581 0.015878022 0.016176939 0.016445697 0.016697884 0.016903043 0.017070353 0.017199874 0.01734835 0.017427922 0.017521918 0.017571688 0.017596066 0.017563045 0.01755637 0.017465949 0.017301023 0.017158568 0.016936958 0.016708553 0.0164662 0.016219199 0.015964807 0.0157035 0.015458167 0.015165627 0.014724375 0.014545888 0.014330149 0.01409784 0.013937325 0.013647347 0.0133630335 0.013022035 0.012636304 0.012271345 0.011919469 0.011523455 0.011125535 0.010861784 0.010236055 0.009763211 0.009368956 0.008849859 0.008416444 0.007920444 0.0074016447 0.0069067776 0.0063967705 0.0058746934 0.0053521395 0.0048187226 0.004281476 0.0037218333 0.0032393784 0.0025545508 0.0020986796 0.0016115308 0.0010948628 6.387681E-4 1.722574E-4 -3.975183E-4 -7.731766E-4 -0.0013141782 -0.0018317849 -0.0022902042 -0.002789408 -0.003144547 -0.003642708 -0.0041775257 -0.004675761 -0.0051736236 -0.0056760907 -0.0060580373 -0.0062904954 -0.0067948103 -0.006947011 -0.0074623823 -0.007718056 -0.008003563 -0.008270413 -0.008499116 -0.008388042 -0.00919798 -0.00921458 -0.009492755 -0.009576321 -0.009503037 -0.009972215 -0.009984553 -0.0100850165 -0.0101266205 -0.0101469755 -0.010235816 -0.010186434 -0.010166854 -0.010117739 -0.010033011 -0.009989858 -0.009817809 -0.009700298 -0.009583056 -0.009423494 -0.009271383 -0.009108603 -0.008942306 -0.008744299 -0.008568406 -0.008372903 -0.008112192 -0.007935703 -0.007689357 -0.0074976087 -0.0072859526 -0.0069870353 -0.0067781806 -0.0065492988 -0.0063192845 -0.006111145 -0.0058963895 -0.005554259 -0.0053310394 -0.005105555 -0.004864156 -0.0045559406 -0.0042793155 -0.0040129423 -0.0037863853 -0.0034805537 -0.003183782 -0.0028908253 -0.0026122928 -0.0022876265 -0.0019818545 -0.0017046928 -0.0013727546 -0.0010927916 -8.068085E-4 -5.382299E-4 -3.211498E-4 -1.171827E-4 7.61747E-5 2.262592E-4 4.685521E-4 5.556941E-4 6.908774E-4 7.814169E-4 9.02474E-4 0.0010155442 0.0010324718 0.0010576844 0.00119555 0.0011220574 0.0012070538 0.0011803508 0.0011590124 0.001161814 0.0011233094 0.0011446476 9.764434E-4 0.0010849238 0.0010002852 8.618236E-4 8.413792E-4 8.431078E-4 7.824898E-4 8.670688E-4 6.983876E-4 5.687475E-4 5.503297E-4 4.72188E-4 4.134774E-4 3.799796E-4 4.56512E-4 2.319217E-4 2.296567E-4 3.312826E-4 2.59161E-4 2.394915E-4 2.543926E-4 1.015067E-4 2.490878E-4 2.270341E-4 2.855062E-4 5.85318E-5 1.934767E-4 7.64728E-5 8.83341E-5 1.884103E-4 1.802444E-4 2.014637E-4 9.81688E-5 2.728701E-4 3.379583E-4 3.837943E-4 3.609061E-4 6.107688E-4 7.233621E-4 8.398294E-4 9.940268E-4 0.001220584 0.0014272332 0.001583755 0.0019024015 0.0021823049 0.002590418 0.0027463436 0.0030776263 0.0033395887 0.00369066 0.003993809 0.004285753 0.004557848 0.004983783 0.005139947 0.0054107905 0.0057379008 0.005973339 0.006210685 0.006530583 0.006612122 0.0068402286 0.007097482 0.0072396994 0.007268667 0.007480741 0.007493973 0.0076518655 0.0076184874 0.0077555776 0.0077441335 0.007642925 0.0076341634 0.0075106626 0.0073772674 0.00722003 0.0070309346 0.0068523586 0.006597519 0.006380409 0.006111294 0.0058191717 0.0055555105 0.0052561164 0.0049414337 0.004598975 0.0043503046 0.00405249 0.0037451384 0.0034097433 0.0031517446 0.0028909445 0.0026558042 0.0024518373 0.0021679995 0.0018636584 0.0016382636 0.0014460982 0.0011991263 9.802282E-4 7.531643E-4 5.469024E-4 3.349781E-4 2.255142E-4 -1.2061E-4 -2.530217E-4 -3.829002E-4 -4.847944E-4 -5.819499E-4 -5.963148E-4 -6.885231E-4 -8.235276E-4 -8.891822E-4 -8.917154E-4 -9.497404E-4 -9.475648E-4 -9.239614E-4 -8.820892E-4 -8.958578E-4 -8.479358E-4 -8.121729E-4 -7.313788E-4 -7.194281E-4 -7.520914E-4 -6.552339E-4 -5.90533E-4 -4.424751E-4 -4.07666E-4 -2.839565E-4 -3.018975E-4 -1.668334E-4 -1.420975E-4 2.46465E-5 4.00245E-5 1.075268E-4 2.088547E-4 3.486574E-4 3.800392E-4 4.805923E-4 5.488694E-4 5.20885E-4 6.689727E-4 7.081032E-4 7.870495E-4 8.134246E-4 8.45939E-4 8.473098E-4 8.504094E-4 9.399354E-4 9.655654E-4 9.619594E-4 9.392202E-4 9.408892E-4 9.083748E-4 8.952022E-4 8.706748E-4 8.492172E-4 7.98732E-4 7.565618E-4 7.517338E-4 7.84427E-4 7.460117E-4 6.274879E-4 6.037354E-4 4.799366E-4 4.189014E-4 3.739297E-4 2.98053E-4 2.447367E-4 1.569986E-4 1.477897E-4 1.116991E-4 -1.1623E-6 -3.94285E-5 -7.53105E-5 -2.022982E-4 -1.828671E-4 -1.684725E-4 -2.1258E-4 -2.092719E-4 -2.600253E-4 -2.575815E-4 -2.266765E-4 -2.266765E-4 -2.46495E-4 -2.131462E-4 -2.146661E-4 -1.873374E-4 -1.809597E-4 -2.184212E-4 -1.692474E-4 -1.690388E-4 -1.620054E-4 -1.707375E-4 -1.389682E-4 -1.443923E-4 -1.320243E-4 -1.08093E-4 -1.356602E-4 -1.191795E-4 -1.125634E-4 -8.44598E-5 -6.32107E-5 -7.75456E-5 -7.1764E-5 -6.62208E-5 -2.57492E-5 -1.36793E-5 -3.23355E-5 -2.93553E-5 -7.20322E-5 -6.97076E-5 -6.67577E-5))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-0.003897644 -0.00399521 -0.0041259676 -0.0042557568 -0.0043956936 -0.004541382 -0.004653156 -0.0047608763 -0.004748866 -0.0048535615 -0.0048956573 -0.0049450845 -0.004969761 -0.004964024 -0.004982561 -0.004925072 -0.00481987 -0.004811108 -0.004708588 -0.0047511454 -0.0044890046 -0.004501254 -0.00420624 -0.004288703 -0.0039245784 -0.0039429367 -0.0037309227 -0.0033896563 -0.0033649209 -0.0031185747 -0.002891332 -0.0026920736 -0.0024573505 -0.0022096038 -0.0019759834 -0.0017414688 -0.00152722 -0.0012845696 -0.0010774136 -8.081198E-4 -5.399287E-4 -2.97755E-4 -7.26879E-5 1.539886E-4 2.92927E-4 6.302893E-4 8.730888E-4 0.0011162758 0.0012793244 0.0015207828 0.001744032 0.0020053685 0.0021618905 0.002391696 0.0025775137 0.0028398335 0.0029886365 0.003169477 0.0033361316 0.0034816265 0.0036446152 0.003733575 0.0038897097 0.0040504933 0.0041470826 0.004375726 0.004234582 0.004542172 0.0044900775 0.0044477284 0.004613161 0.004676074 0.004674047 0.004712671 0.0046994835 0.004739493 0.0047705025 0.0047528 0.004685074 0.004664585 0.004648164 0.004609078 0.0045982897 0.004472226 0.0043902695 0.0043383837 0.0042762906 0.004133925 0.0040324927 0.0039227754 0.0038367513 0.0037117896 0.00355874 0.003456682 0.003309518 0.0031844378 0.003084734 0.0029358717 0.0028013736 0.0027027727 0.0025599897 0.0024241358 0.0023236873 0.0021733793 0.0020611436 0.0019199996 0.001811415 0.0017765462 0.0016215296 0.0015127808 0.0014414638 0.0013688058 0.0013908596 0.0012423322 0.001234457 0.001149781 0.0011478514 0.0010749624 0.0010468066 0.0010213406 0.0010046738 9.945184E-4 9.895042E-4 9.654016E-4 9.896682E-4 9.90659E-4 9.934008E-4 0.0010083766 9.802806E-4 0.0010579228 0.0010538102 0.0010637642 0.00105571 0.001086913 0.0011534394 0.0011124612 0.0011619554 0.0011595414 0.001210794 0.0012354256 0.0012542532 0.0012449846 0.0012683272 0.0012492612 0.0012938456 0.001384832 0.0013281704 0.0013616756 0.0013909713 0.0014211014 0.0014836342 0.0014685914 0.0015347974 0.001453206 0.0014879556 0.001538448 0.001563102 0.0015693829 0.0015942752 0.001591444 0.0016371086 0.0016613156 0.0017582402 0.001731433 0.0017613844 0.0017810016 0.0017940104 0.001860749 0.0018349886 0.0018517152 0.00189602 0.001902826 0.0019666963 0.0019360072 0.0019517392 0.0019684546 0.0019810163 0.0019983724 0.0020063927 0.0020115935 0.0019827579 0.0019994157 0.0019703526 0.002009444 0.0019943044 0.002009999 0.0019779606 0.001965206 0.001946588 0.001934098 0.0019175712 0.001902573 0.001890631 0.001877308 0.0018750626 0.0018644916 0.0018809933 0.0018528584 0.001835242 0.0018388276 0.0018286808 0.001804417 0.001814587 0.0018051434 0.0017927344 0.0018096232 0.0018077418 0.0018479509 0.001851324 0.0018766968 0.0018976108 0.0019144714 0.0019344539 0.0019503796 0.0019594503 0.0019636043 0.001967255 0.0019706972 0.0019605048 0.001962375 0.0019486024 0.001965709 0.001952 0.0019448513 0.00194069 0.0019370356 0.0019307546 0.0018991456 0.001884736 0.0018777698 0.0018580185 0.0018327162 0.0018175097 0.001808554 0.0017857552 0.0017784908 0.0017667712 0.00175602 0.0017525108 0.0017390772 0.0017367676 0.001731798 0.0017343612 0.0017351508 0.0017360076 0.001731828 0.0017232968 0.0017220305 0.0017259643 0.0017161073 0.001699537 0.001700878 0.0016776696 0.0016555414 0.0016369522 0.0016153082 0.001605399 0.0015934558 0.0015691222 0.0015674606 0.0015421212 0.0015255886 0.001521863 0.0015164018 0.001494527 0.0015008302 0.0014744402 0.0014688672 0.0014669898)) (quote (-0.0025166145 -0.0025400576 -0.002611436 -0.0026267013 -0.002728615 -0.0027447485 -0.0027922085 -0.002835136 -0.002837901 -0.0028430857 -0.0028657492 -0.0028611105 -0.0028948668 -0.0028002083 -0.0028653543 -0.0028432366 -0.002718622 -0.0027968583 -0.002701316 -0.0025161223 -0.0026555918 -0.0023785755 -0.0025029853 -0.0023965463 -0.0024820045 -0.002251126 -0.002198137 -0.002257973 -0.002000872 -0.0019102396 -0.001807466 -0.0018304252 -0.0017022268 -0.0016947648 -0.0016031154 -0.0015089028 -0.0014131666 -0.0013233126 -0.0012454912 -0.0011811778 -0.0010514334 -9.566844E-4 -9.029582E-4 -8.113608E-4 -5.536079E-4 -7.182136E-4 -5.420893E-4 -4.899949E-4 -3.911257E-4 -2.474859E-4 -2.272725E-4 -1.142919E-4 -3.88697E-5 1.098514E-4 1.358911E-4 3.063083E-4 3.365949E-4 4.223585E-4 5.058424E-4 5.794168E-4 6.496832E-4 7.280335E-4 8.143261E-4 9.819568E-4 0.0010435656 9.046496E-4 0.0011272506 0.0011611134 0.0011545272 0.001399763 0.0012726188 0.0014063232 0.0013918058 0.0015118384 0.0014929178 0.001514908 0.0016236156 0.0015375614 0.0015783496 0.0015004614 0.0015421398 0.0014363118 0.0014148988 0.0013607778 0.001322981 0.0012344384 0.0012039096 0.0011003354 0.0010319018 9.459556E-4 8.904376E-4 7.923841E-4 6.61891E-4 6.069578E-4 4.821047E-4 4.042126E-4 3.216714E-4 1.912881E-4 1.170356E-4 5.03622E-5 -7.41072E-5 -1.662187E-4 -2.49533E-4 -3.403705E-4 -3.943034E-4 -4.880354E-4 -5.728379E-4 -6.376877E-4 -7.441491E-4 -7.93878E-4 -8.554646E-4 -9.242222E-4 -0.0010100604 -0.0010188186 -0.001101058 -0.0011234135 -0.0011931622 -0.0011978076 -0.0012516342 -0.0012840816 -0.0012754314 -0.001311973 -0.001320001 -0.0013358444 -0.0013114996 -0.0013438352 -0.001329139 -0.0013196358 -0.0013257974 -0.0012709014 -0.0012895912 -0.001258906 -0.0012692586 -0.0012414306 -0.0012034328 -0.0012013614 -0.0011664108 -0.001143776 -0.0011375026 -0.0010987 -0.0011079386 -0.0010672958 -0.0010384248 -0.001009196 -9.933264E-4 -9.694696E-4 -9.395034E-4 -9.190218E-4 -8.872078E-4 -8.745418E-4 -8.316785E-4 -7.985011E-4 -7.748529E-4 -7.508993E-4 -7.202402E-4 -6.854832E-4 -6.555617E-4 -6.71722E-4 -6.180406E-4 -5.70789E-4 -5.286783E-4 -4.941151E-4 -4.593581E-4 -4.350767E-4 -3.90932E-4 -3.5166E-4 -3.350228E-4 -3.167912E-4 -2.869219E-4 -2.497509E-4 -2.239868E-4 -1.91696E-4 -1.58675E-4 -1.396686E-4 -1.090318E-4 -9.0003E-5 -6.11544E-5 -3.14713E-5 -1.50725E-5 2.23368E-5 2.91392E-5 6.37695E-5 6.74948E-5 1.069084E-4 1.195818E-4 1.267046E-4 1.512095E-4 1.791492E-4 1.868606E-4 2.044663E-4 2.313778E-4 2.536476E-4 2.654046E-4 2.858862E-4 2.870932E-4 3.211349E-4 3.501177E-4 3.688559E-4 3.813356E-4 4.124567E-4 4.426837E-4 4.511476E-4 4.774705E-4 5.117134E-4 5.388334E-4 5.998462E-4 6.538332E-4 7.057562E-4 7.416457E-4 8.012056E-4 8.610786E-4 8.964688E-4 9.401888E-4 9.99108E-4 0.0010353626 0.0010959954 0.0011225642 0.001156725 0.0011769682 0.0012089388 0.0012428686 0.0012572558 0.0012885928 0.0013075322 0.0013220832 0.0013328494 0.0013328642 0.001337979 0.0013398714 0.0013476462 0.001352191 0.0013744608 0.0013715252 0.001375813 0.0013824552 0.0013947338 0.0014097728 0.001425922 0.001443699 0.0014601016 0.0014817716 0.0014760868 0.0014715642 0.0014751516 0.0014821478 0.0014688186 0.0014566184 0.0014386104 0.0014133158 0.00139964 0.0013640282 0.0013318304 0.0013112724 0.0012905244 0.0012433752 0.0012120418 0.0012090802 0.0011630114 0.0011134913 0.0010826942 0.0010399354 9.998716E-4 9.576576E-4 9.217152E-4 8.851458E-4 8.438352E-4 8.119475E-4 7.850733E-4 7.657718E-4)) (quote (-6.67577E-5 -6.38068E-5 -5.67436E-5 -3.49283E-5 -6.25253E-5 -8.05557E-5 -7.68304E-5 -8.10921E-5 -7.82907E-5 -1.242757E-4 -1.578033E-4 -1.469851E-4 -2.019405E-4 -2.559423E-4 -2.67446E-4 -2.773106E-4 -3.008842E-4 -3.359616E-4 -3.027916E-4 -5.195141E-4 -3.469884E-4 -5.679429E-4 -4.013181E-4 -5.628169E-4 -3.857017E-4 -6.140172E-4 -5.868971E-4 -3.964603E-4 -6.290376E-4 -5.887151E-4 -6.211102E-4 -5.840361E-4 -5.860925E-4 -5.401075E-4 -5.355477E-4 -5.628765E-4 -5.43803E-4 -5.350113E-4 -5.185306E-4 -4.868507E-4 -4.496872E-4 -4.339516E-4 -4.084706E-4 -3.685057E-4 -3.188848E-4 -3.335178E-4 -3.339648E-4 -2.613962E-4 -2.458692E-4 -2.420843E-4 -1.663268E-4 -1.554787E-4 -1.133978E-4 -1.237392E-4 -8.20458E-5 -4.76539E-5 -5.3048E-6 3.9637E-6 1.0401E-5 5.80251E-5 3.46899E-5 1.96695E-5 6.20782E-5 7.28369E-5 3.26335E-5 2.72125E-4 4.05908E-5 1.598895E-4 1.77294E-4 -2.39015E-5 1.196861E-4 4.81904E-5 3.52263E-5 -5.51343E-5 -1.7792E-5 -1.019239E-4 -2.052486E-4 -1.641512E-4 -2.955794E-4 -2.478361E-4 -3.948808E-4 -3.92735E-4 -4.330575E-4 -5.713403E-4 -5.835295E-4 -6.180406E-4 -6.773174E-4 -7.563531E-4 -8.078814E-4 -8.478166E-4 -8.80152E-4 -9.498298E-4 -0.0010351838 -0.0010593534 -0.001128018 -0.0011621714 -0.0012227 -0.0012828112 -0.0013322234 -0.0013636948 -0.0014600754 -0.001452744 -0.001523614 -0.0015641154 -0.0015834868 -0.0016559362 -0.0016977788 -0.0017211436 -0.0018003284 -0.0018258096 -0.0018374622 -0.0019158124 -0.0019150674 -0.0020480156 -0.0020406545 -0.002152383 -0.0021573305 -0.0022105277 -0.0022734106 -0.0023092032 -0.0023430288 -0.002409786 -0.0024253428 -0.002466321 -0.002506107 -0.0025431812 -0.00255242 -0.0025842488 -0.0026435554 -0.0025835336 -0.0026090443 -0.002622068 -0.0026594997 -0.0026609302 -0.002624571 -0.0026516915 -0.0026561618 -0.002595961 -0.0026439429 -0.0026004315 -0.0026080609 -0.0026168228 -0.0025694967 -0.0027059317 -0.0026428104 -0.0025197268 -0.002628088 -0.0026020408 -0.002579391 -0.002563059 -0.0024659038 -0.0024659634 -0.002507031 -0.002602756 -0.0025845766 -0.0025835035 -0.0025454164 -0.0024847389 -0.0025115013 -0.002642095 -0.0025969148 -0.002607584 -0.0024892688 -0.0026154518 -0.0026504395 -0.00263834 -0.002650499 -0.0025247336 -0.002687812 -0.002690196 -0.0027015207 -0.0026933553 -0.0026260019 -0.0027723313 -0.0027968884 -0.0027669669 -0.0028178096 -0.0028256178 -0.0028026104 -0.0028392077 -0.0028316977 -0.0028658507 -0.0028015375 -0.0028768182 -0.0028632284 -0.0029130578 -0.0028776527 -0.0028364659 -0.0028319955 -0.0027922392 -0.0027817488 -0.002775431 -0.002750218 -0.0027412176 -0.0027047992 -0.0026905537 -0.0026362539 -0.0026554463 -0.002620399 -0.0025889874 -0.0025792122 -0.002543211 -0.0025132299 -0.002511263 -0.0025237205 -0.0025051236 -0.0025205613 -0.0025047064 -0.002518535 -0.0025002957 -0.0024926663 -0.0024942756 -0.002467394 -0.0024487973 -0.0024332404 -0.0024263265 -0.002390027 -0.002375424 -0.0023177863 -0.0022907853 -0.0022857783 -0.0022064448 -0.0021908284 -0.0021395088 -0.0021055937 -0.0020371676 -0.0019681454 -0.0019567609 -0.0018900036 -0.001830101 -0.001756072 -0.0017319322 -0.0016728044 -0.001621604 -0.0015228988 -0.0014990568 -0.001439631 -0.001389742 -0.001347959 -0.0012984872 -0.001263857 -0.0012414458 -0.0012155176 -0.0012017489 -0.0011937022 -0.0012099148 -0.0012074114 -0.0012429954 -0.0012774468 -0.0013094544 -0.0013441444 -0.0013915896 -0.0014459492 -0.0014969708 -0.0015345216 -0.0015957952 -0.0016246438 -0.001682818 -0.0017768144 -0.0018362404 -0.0018864274 -0.001984656 -0.0020397902 -0.0021346212 -0.002233088 -0.002254665 -0.0023465753 -0.0024468305 -0.0024796573)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list -6.67577E-5 -6.38068E-5 -5.67436E-5 -3.49283E-5 -6.25253E-5 -8.05557E-5 -7.68304E-5 -8.10921E-5 -7.82907E-5 -1.242757E-4 -1.578033E-4 -1.469851E-4 -2.019405E-4 -2.559423E-4 -2.67446E-4 -2.773106E-4 -3.008842E-4 -3.359616E-4 -3.027916E-4 -5.195141E-4 -3.469884E-4 -5.679429E-4 -4.013181E-4 -5.628169E-4 -3.857017E-4 -6.140172E-4 -5.868971E-4 -3.964603E-4 -6.290376E-4 -5.887151E-4 -6.211102E-4 -5.840361E-4 -5.860925E-4 -5.401075E-4 -5.355477E-4 -5.628765E-4 -5.43803E-4 -5.350113E-4 -5.185306E-4 -4.868507E-4 -4.496872E-4 -4.339516E-4 -4.084706E-4 -3.685057E-4 -3.188848E-4 -3.335178E-4 -3.339648E-4 -2.613962E-4 -2.458692E-4 -2.420843E-4 -1.663268E-4 -1.554787E-4 -1.133978E-4 -1.237392E-4 -8.20458E-5 -4.76539E-5 -5.3048E-6 3.9637E-6 1.0401E-5 5.80251E-5 3.46899E-5 1.96695E-5 6.20782E-5 7.28369E-5 3.26335E-5 2.72125E-4 4.05908E-5 1.598895E-4 1.77294E-4 -2.39015E-5 1.196861E-4 4.81904E-5 3.52263E-5 -5.51343E-5 -1.7792E-5 -1.019239E-4 -2.052486E-4 -1.641512E-4 -2.955794E-4 -2.478361E-4 -3.948808E-4 -3.92735E-4 -4.330575E-4 -5.713403E-4 -5.835295E-4 -6.180406E-4 -6.773174E-4 -7.563531E-4 -8.078814E-4 -8.478166E-4 -8.80152E-4 -9.498298E-4 -0.0010351838 -0.0010593534 -0.001128018 -0.0011621714 -0.0012227 -0.0012828112 -0.0013322234 -0.0013636948 -0.0014600754 -0.001452744 -0.001523614 -0.0015641154 -0.0015834868 -0.0016559362 -0.0016977788 -0.0017211436 -0.0018003284 -0.0018258096 -0.0018374622 -0.0019158124 -0.0019150674 -0.0020480156 -0.0020406545 -0.002152383 -0.0021573305 -0.0022105277 -0.0022734106 -0.0023092032 -0.0023430288 -0.002409786 -0.0024253428 -0.002466321 -0.002506107 -0.0025431812 -0.00255242 -0.0025842488 -0.0026435554 -0.0025835336 -0.0026090443 -0.002622068 -0.0026594997 -0.0026609302 -0.002624571 -0.0026516915 -0.0026561618 -0.002595961 -0.0026439429 -0.0026004315 -0.0026080609 -0.0026168228 -0.0025694967 -0.0027059317 -0.0026428104 -0.0025197268 -0.002628088 -0.0026020408 -0.002579391 -0.002563059 -0.0024659038 -0.0024659634 -0.002507031 -0.002602756 -0.0025845766 -0.0025835035 -0.0025454164 -0.0024847389 -0.0025115013 -0.002642095 -0.0025969148 -0.002607584 -0.0024892688 -0.0026154518 -0.0026504395 -0.00263834 -0.002650499 -0.0025247336 -0.002687812 -0.002690196 -0.0027015207 -0.0026933553 -0.0026260019 -0.0027723313 -0.0027968884 -0.0027669669 -0.0028178096 -0.0028256178 -0.0028026104 -0.0028392077 -0.0028316977 -0.0028658507 -0.0028015375 -0.0028768182 -0.0028632284 -0.0029130578 -0.0028776527 -0.0028364659 -0.0028319955 -0.0027922392 -0.0027817488 -0.002775431 -0.002750218 -0.0027412176 -0.0027047992 -0.0026905537 -0.0026362539 -0.0026554463 -0.002620399 -0.0025889874 -0.0025792122 -0.002543211 -0.0025132299 -0.002511263 -0.0025237205 -0.0025051236 -0.0025205613 -0.0025047064 -0.002518535 -0.0025002957 -0.0024926663 -0.0024942756 -0.002467394 -0.0024487973 -0.0024332404 -0.0024263265 -0.002390027 -0.002375424 -0.0023177863 -0.0022907853 -0.0022857783 -0.0022064448 -0.0021908284 -0.0021395088 -0.0021055937 -0.0020371676 -0.0019681454 -0.0019567609 -0.0018900036 -0.001830101 -0.001756072 -0.0017319322 -0.0016728044 -0.001621604 -0.0015228988 -0.0014990568 -0.001439631 -0.001389742 -0.001347959 -0.0012984872 -0.001263857 -0.0012414458 -0.0012155176 -0.0012017489 -0.0011937022 -0.0012099148 -0.0012074114 -0.0012429954 -0.0012774468 -0.0013094544 -0.0013441444 -0.0013915896 -0.0014459492 -0.0014969708 -0.0015345216 -0.0015957952 -0.0016246438 -0.001682818 -0.0017768144 -0.0018362404 -0.0018864274 -0.001984656 -0.0020397902 -0.0021346212 -0.002233088 -0.002254665 -0.0023465753 -0.0024468305 -0.0024796573))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46599996 0.47400004 0.478 0.484 0.488 0.494 0.49799997 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.87399996 0.87399996 0.88400007 0.888 0.89400006 0.898 0.904 0.90799994 0.9110001 0.91800005 0.924 0.928 0.934 0.93799997 0.944 0.956 0.956 0.958 0.9639999 0.968 0.97400004 0.978 0.984 0.988 0.99399996 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.7240001 1.728 1.734 1.7379999 1.744 1.7479999 1.754 1.7579999 1.7640002 1.7680001 1.7740002 1.7780001 1.7840002 1.7880001 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.8380002 1.844 1.848 1.854 1.858 1.8639999 1.868 1.8739998 1.878 1.8839998 1.888 1.892 1.898 1.904 1.908 1.9139999 1.9179999 1.9239999 1.9279999 1.9339999 1.9379999 1.9440001 1.9480001 1.9540001 1.9580001 1.962 1.968 1.974 1.9779999 1.984 1.9869999)) (quote (0.021311904 0.021867516 0.022786862 0.023717167 0.024775785 0.025962452 0.02735437 0.028587988 0.0300492 0.03168143 0.03340885 0.03532053 0.037271005 0.039531526 0.041812793 0.04407519 0.046500605 0.049238168 0.05182926 0.054129716 0.05597327 0.05848998 0.060727656 0.062532686 0.06432821 0.06592739 0.065626234 0.06818358 0.069883354 0.06901018 0.0697901 0.07076424 0.0706773 0.07083941 0.071505 0.07173509 0.07085581 0.07087578 0.071115084 0.07052192 0.06968557 0.06920301 0.06792382 0.06679746 0.0654668 0.064034865 0.06245552 0.06102588 0.05919465 0.058261413 0.057457816 0.05685517 0.056452763 0.056536507 0.056978945 0.057598792 0.05864369 0.060299553 0.062263944 0.06468281 0.06767755 0.070951335 0.07480921 0.07894472 0.08358799 0.08858708 0.094441056 0.09998197 0.10603134 0.112707816 0.11973335 0.1267678 0.13394085 0.14101748 0.14788217 0.15521237 0.16277454 0.1702995 0.1770302 0.18422985 0.19014035 0.19760239 0.2053267 0.21225965 0.21803974 0.22564732 0.23274301 0.23981415 0.24578424 0.2523139 0.25883558 0.2635061 0.26882488 0.27221933 0.27704126 0.2824338 0.28776535 0.2926219 0.2973962 0.30204806 0.30597898 0.3100064 0.31334406 0.31659862 0.3197001 0.32283217 0.32555616 0.3282517 0.330751 0.33304766 0.33521402 0.3371567 0.3388977 0.34044373 0.3416096 0.34261748 0.34314242 0.34345746 0.34347507 0.34321603 0.34269202 0.34289536 0.341445 0.34091944 0.33982423 0.3377332 0.33687612 0.3358028 0.33425495 0.33254373 0.3311673 0.3301445 0.32877588 0.32770965 0.32664904 0.32605565 0.3250255 0.32432747 0.324346 0.32426968 0.32444942 0.32500672 0.32586247 0.3270143 0.3280288 0.32941645 0.33084694 0.33237618 0.3341402 0.33584097 0.33768362 0.33991095 0.34191662 0.34396166 0.34637296 0.34839618 0.3503444 0.3524524 0.35457343 0.35692376 0.35897678 0.36091834 0.36338645 0.3653724 0.36739823 0.3691805 0.37093952 0.3726523 0.37432694 0.3754326 0.3762558 0.37648198 0.3765021 0.3757772 0.37456727 0.37272105 0.37046713 0.367421 0.36429337 0.3606046 0.35749185 0.35461482 0.3515712 0.3485983 0.3455899 0.34233892 0.3401931 0.3377994 0.33591846 0.3327072 0.331502 0.32868308 0.32697693 0.3250653 0.3230023 0.32266033 0.3219759 0.32134676 0.320783 0.3205976 0.31983945 0.3208982 0.32066023 0.32286903 0.32339016 0.32593662 0.3260273 0.32806137 0.3307842 0.3336492 0.33682317 0.34019795 0.34323052 0.34955603 0.3537376 0.3570886 0.36042818 0.36321828 0.3669142 0.3701632 0.3729342 0.3753925 0.37794083 0.38026106 0.38280135 0.38495827 0.38742155 0.3893361 0.39091378 0.39221025 0.39314637 0.39356783 0.39402866 0.39433995 0.3941757 0.39362097 0.39298213 0.3920723 0.39079192 0.38934147 0.3878059 0.38600495 0.38416034 0.3824083 0.37990204 0.3773873 0.3744101 0.3712365 0.36791214 0.36492622 0.36033946 0.3554903 0.35060313 0.34552133 0.3403692 0.33511773 0.32968178 0.3242004 0.3185877 0.31411645 0.30931628 0.30356014 0.29786685 0.29208204 0.2872537 0.28219426 0.2769434 0.27170393 0.26653048 0.2616109 0.25665936 0.2510179 0.24666339 0.24154184 0.23694776 0.23253466 0.22830823 0.2242628 0.22040391 0.21679706 0.21352342 0.21030204 0.20809978 0.20548699 0.2028573 0.20024574 0.19789137 0.19547676 0.19313959 0.19116515 0.18931146 0.1876924 0.18642263 0.18648672 0.18617326 0.18599563 0.18597429 0.18604754 0.18640146 0.18691038 0.18774183 0.1891131 0.19044337 0.19214669 0.193368)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9869999 1.9879999 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote (0.193368 0.19377512 0.19538509 0.19775927 0.19958033 0.20117451 0.2027549 0.20440755 0.20592736 0.20760876 0.20994033 0.21201268 0.21514343 0.21754767 0.21963233 0.22203855 0.22467073 0.2274989 0.2309345 0.23409234 0.23741858 0.24095488 0.24462439 0.24858082 0.25268617 0.25673953 0.2610535 0.26524735 0.2693674 0.27372968 0.27817628 0.28288072 0.28745666 0.29226404 0.29703027 0.30196306 0.3067534 0.3116553 0.3165453 0.3215054 0.32616788 0.33120838 0.33604366 0.34124985 0.34644103 0.35138652 0.3561983 0.36091822 0.36535427 0.36984313 0.37446433 0.37921798 0.3837695 0.3881221 0.3903357 0.39364332 0.39733836 0.4010073 0.40439478 0.407584 0.4101681 0.41315198 0.41528425 0.41731066 0.41938192 0.41933948 0.42053404 0.42090338 0.42135692 0.4221871 0.4220731 0.42207438 0.42145678 0.42152718 0.42126188 0.42290044 0.4253332 0.4275837 0.43068105 0.4360235 0.4410819 0.4488164 0.45579335 0.4641408 0.47517034 0.48678824 0.49682003 0.50769556 0.51772267 0.52643115 0.5349423 0.54265094 0.54987646 0.55613167 0.5610766 0.56515837 0.5687436 0.5708944 0.5723095 0.5722014 0.57177645 0.571171 0.56977177 0.56741804 0.56448985 0.56109715 0.55698324 0.5538967 0.547455 0.54218406 0.5370554 0.5323009 0.5262555 0.5187678 0.511858 0.50410265 0.49610317 0.48844635 0.48130474 0.47388944 0.46612147 0.4583191 0.45046893 0.44312674 0.43562344 0.42812297 0.42053002 0.41351095 0.40647465 0.39995196 0.39426035 0.38872844 0.3839498 0.37962002 0.37571502 0.37338054 0.37071997 0.36835438 0.36658037 0.36473483 0.36308658 0.36173785 0.3604865 0.35928747 0.3582539 0.35726953 0.356136 0.3548644 0.3533487 0.35205337 0.34971935 0.34788436 0.3456834 0.34289 0.34004387 0.3370002 0.33357254 0.3305684 0.3269205 0.32301158 0.3191527 0.31528366 0.3111714 0.3070471 0.30288088 0.29893544 0.29414654 0.28962657 0.285036 0.28071687 0.27603486 0.27126098 0.26611298 0.2613483 0.2562813 0.25135905 0.24627994 0.24125333 0.23643843 0.23183839 0.22696775 0.2221806 0.21745479 0.21289836 0.2083413 0.20382811 0.19943081 0.19503972 0.19093533 0.18702063 0.1831593 0.17930451 0.17548344 0.17140752 0.16768347 0.1638604 0.1603274 0.15658319 0.15296129 0.14961548 0.14626701 0.14283763 0.13943088 0.13605009 0.13277819 0.12948977 0.12613635 0.12293342 0.11968214 0.11654259 0.113350965 0.11030464 0.107394256 0.10465274 0.101855055 0.099198714 0.09663163 0.09398101 0.091373354 0.088820786 0.086496264 0.084255256 0.082043775 0.079784535 0.07771753 0.075809255 0.07389725 0.07205359 0.07028257 0.068732694 0.067357905 0.06612302 0.06488004 0.06396113 0.06318235 0.06275131 0.06241902 0.062373523 0.062585466 0.06301212 0.063603476 0.06440606 0.06530451 0.06634352)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.4380002 3.444 3.4480002 3.454 3.4580002 3.464 3.468 3.474 3.478 3.4839998 3.488 3.4939998 3.498 3.5039997 3.508 3.5139997 3.518 3.5239997 3.5280004 3.533 3.5380004 3.5440002 3.5480004 3.5540002 3.5580004 3.5640002 3.5680003 3.5740002 3.578 3.584 3.588 3.5939999 3.598 3.6039999 3.608 3.6139999 3.618 3.6239999 3.628 3.6339999 3.638 3.6440003 3.648 3.6540003 3.658 3.6640003 3.668 3.6740003 3.678 3.6840003 3.688 3.6920002 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.7379997 3.744 3.7479997 3.754 3.7579997 3.7620004 3.7679997 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.8279999 3.832 3.8379999 3.844 3.8479998 3.854 3.8579998 3.8659997 3.8659997 3.874 3.8779998 3.884 3.8880003 3.894 3.8980003 3.904 3.9080003 3.914 3.9180003 3.924 3.9280002 3.934 3.938 3.944 3.948 3.9539998 3.958 3.9639998 3.9639998 3.9639998 3.978 3.9839998 3.988 3.9939998 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote (0.06634352 0.067820505 0.0691722 0.07052538 0.07185523 0.073481694 0.07523419 0.07697432 0.078409344 0.079985626 0.081624225 0.08315397 0.08455488 0.08602253 0.08762008 0.08908506 0.090685196 0.09226509 0.093898274 0.09558367 0.09727265 0.099085815 0.10088781 0.102814704 0.10474201 0.10707781 0.10928253 0.11159236 0.11414554 0.11663788 0.119085096 0.12177286 0.12429486 0.12690053 0.12950878 0.13260423 0.13539897 0.13837435 0.14128928 0.14445119 0.14774114 0.1512623 0.15490255 0.15853055 0.16242844 0.16654223 0.17081809 0.1752636 0.1799039 0.18439844 0.18915442 0.19412704 0.19930254 0.20462826 0.21020407 0.21593756 0.22196596 0.22831153 0.2349173 0.24197184 0.24927414 0.2565349 0.26400578 0.27162257 0.2794473 0.28736973 0.29522204 0.30345404 0.3118257 0.32031983 0.32892132 0.33750072 0.34617928 0.35506532 0.36382395 0.37270987 0.38143903 0.39010158 0.39871418 0.40708068 0.41489846 0.42298406 0.43084022 0.4383736 0.44612548 0.45362592 0.46008754 0.4661929 0.47199345 0.47693354 0.4810334 0.48420614 0.4860469 0.48730987 0.48743308 0.48670146 0.48477352 0.4819134 0.47760025 0.47254318 0.46650076 0.4592793 0.45177415 0.44363025 0.43557858 0.4270535 0.4184851 0.40996164 0.40164614 0.39388278 0.38665488 0.38015676 0.37522873 0.37063643 0.36669073 0.3636263 0.3618269 0.3611652 0.36161524 0.3635079 0.3665877 0.3699034 0.37535843 0.38121194 0.3859519 0.39188355 0.39828283 0.40477273 0.4152173 0.4230984 0.4288617 0.4335062 0.43421814 0.4416025 0.4464951 0.44442287 0.44494054 0.44707066 0.44881698 0.4506207 0.4512841 0.45154825 0.4512968 0.45025685 0.44934186 0.44806194 0.44646314 0.44447687 0.4426268 0.44015646 0.4381909 0.43565997 0.4335512 0.4307386 0.4281176 0.42510358 0.42196462 0.419374 0.4158927 0.41193122 0.4081868 0.40402213 0.39966446 0.39481378 0.3907682 0.38619167 0.38080987 0.37533578 0.3696681 0.36379784 0.35792527 0.35183302 0.34526116 0.33830956 0.33117157 0.32377687 0.31562248 0.30740896 0.29854625 0.28944412 0.27988794 0.27007627 0.260111 0.25053138 0.24045064 0.23056528 0.22149684 0.21191262 0.20280583 0.19345108 0.18527675 0.17658872 0.1679922 0.15967973 0.15215571 0.14557901 0.13922014 0.13343655 0.12796735 0.12364246 0.119277686 0.1156731 0.112257436 0.109617986 0.10737072 0.10575962 0.104580216 0.104087144 0.10417243 0.104667574 0.10577039 0.10748425)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote (0.10748425 0.109580584 0.1122589 0.11539692 0.11951844 0.12314103 0.12734774 0.13210298 0.13732849 0.14345525 0.1493445 0.15579422 0.16295062 0.17057482 0.17861119 0.1870937 0.19595155 0.2051789 0.21481905 0.22475246 0.23551245 0.24703107 0.25904393 0.271748 0.28528267 0.2997514 0.31493366 0.33088574 0.3477392 0.36554134 0.38363203 0.40274075 0.42249846 0.44303712 0.46408442 0.48586357 0.5080242 0.53075314 0.5542532 0.57804525 0.60205877 0.62604505 0.6496421 0.67237324 0.694114 0.71383447 0.7305516 0.74435455 0.7558259 0.76464004 0.77111394 0.774454 0.7744665 0.7710664 0.76362336 0.7507218 0.7354362 0.71790684 0.697947 0.67500395 0.65094275 0.6238657 0.5961372 0.56662375 0.53740335 0.5082173 0.47923025 0.4503509 0.42284212 0.3968408 0.37241876 0.34991106 0.32868406 0.30943847 0.29208916 0.27542883 0.26032168 0.24625398 0.23248254 0.21990648 0.20755247 0.19513093 0.18500372 0.17407428 0.165019 0.15645372 0.14892885 0.14228946 0.13683453 0.13343719 0.13176725 0.13317463 0.13480668 0.13956058 0.14518145 0.1532038 0.16306648 0.17515014 0.18739681 0.20146613 0.2176876 0.23438525 0.2526567 0.27147403 0.29116967 0.3114059 0.33215213 0.35337845 0.3746876 0.39654395 0.41761255 0.43854192 0.45893765 0.47827548 0.49657294 0.5137781 0.5301291 0.54515356 0.5589442 0.57136715 0.5823921 0.59225947 0.6008729 0.60847694 0.61384804 0.6183536 0.6218782 0.6246095 0.62598545 0.6263483 0.62552464 0.6239985 0.6209658 0.61728585 0.6125165 0.60700667 0.60096735 0.5942745 0.5871443 0.57941467 0.5709652 0.56194216 0.5522726 0.5421233 0.53198106 0.52145184 0.51056165 0.49953926 0.48852766 0.47740257 0.4661877 0.45456728 0.44227067 0.4305685 0.41828203 0.4060136 0.39351276 0.38106486 0.36840612 0.35594705 0.34345925 0.33057472 0.31777415 0.3051566 0.29263029 0.28008226 0.2675914 0.25526053 0.243075 0.23034097 0.21804826 0.20607096 0.19350721 0.1815568 0.17013748 0.15909834 0.14857035 0.13785886 0.12795156 0.11853945 0.10987658 0.10213127 0.09539591 0.08989061 0.08621074 0.084590934 0.08517203 0.08788331 0.09290281 0.099783674 0.10805023 0.11754579 0.12787491 0.1391407 0.15094368 0.16319454 0.17560523 0.18834318 0.20116419 0.21424562 0.22738765 0.24040485 0.2535063 0.26662722 0.27980325 0.29254553 0.2963553)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote (0.2963553 0.30588067 0.31956384 0.33345994 0.34702978 0.36128688 0.37522313 0.38990796 0.40413296 0.4190727 0.43421116 0.44930774 0.4647142 0.48023003 0.4958535 0.5116609 0.52761466 0.54354066 0.559673 0.5761452 0.5925909 0.609232 0.6261553 0.6428616 0.6595217 0.67568404 0.69122667 0.7058783 0.7192514 0.73038525 0.7367063 0.7374527 0.732506 0.7220353 0.7066676 0.6869469 0.66430194 0.63874406 0.6117009 0.58402884 0.55664874 0.5298528 0.50239647 0.47557372 0.44877324 0.42261702 0.39670345 0.37109923 0.34655887 0.322302 0.2988787 0.27660334 0.25522855 0.23525667 0.21638173 0.1987123 0.18268141 0.16801659 0.15478929 0.14303738 0.1326111 0.12350059 0.1154923 0.10861893 0.10239188 0.09721194 0.09289894 0.08891374 0.085497715 0.08231357 0.07949227 0.076955624 0.0745806 0.07237842 0.070591904 0.068163045 0.066269554 0.06409379 0.06223355 0.060377218 0.05869621 0.056728755 0.05473559 0.052992855 0.05090515 0.049212307 0.04755353 0.045816403 0.044320464 0.0427688 0.041439064 0.03996834 0.0383233 0.03699893 0.035390035 0.033620533 0.031830173 0.030110484 0.028368593 0.02671888 0.025022654 0.023510373 0.022102194 0.020644647 0.019188526 0.017661266 0.016217592 0.014861588 0.013773967 0.01277713 0.012001777 0.011241278 0.010731557 0.010542637 0.010492937 0.010594895 0.010613887 0.010911852 0.0112731075 0.011477382 0.011756217 0.012209689 0.01266531 0.012960063 0.013231562 0.013328559 0.013184886 0.013454051 0.013654825 0.013801448 0.013848667 0.013896013 0.014086459 0.014105909 0.0141464 0.01443645 0.014325358 0.014282728 0.014573872 0.0147305075 0.014493237 0.014318654 0.014298411 0.01414287 0.013958459 0.013943601 0.013783482 0.013598563 0.013256319 0.012725294 0.012422656 0.012092649 0.012045014 0.011790972 0.011549785 0.0113057885 0.011033805 0.010902562 0.010519407 0.010513174 0.010312486 0.009990891 0.009870383)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.086 6.088 6.096 6.096 6.102 6.109 6.112 6.118 6.122 6.128 6.133 6.138 6.142 6.148 6.152 6.158 6.162 6.168 6.172 6.178 6.182 6.188 6.194 6.198 6.203 6.208 6.214 6.218 6.224 6.228 6.234 6.238 6.244 6.25 6.254 6.258 6.264 6.268 6.274 6.278 6.284 6.288 6.292 6.298 6.304 6.308 6.314 6.318 6.324 6.328 6.334 6.338 6.344 6.348 6.354 6.358 6.362 6.368 6.374 6.378 6.384 6.388 6.394 6.398 6.404 6.408 6.414 6.418 6.424 6.428 6.432 6.435 6.442 6.448 6.454 6.458 6.464 6.466 6.471 6.478 6.484 6.488 6.493 6.498 6.502 6.508 6.512 6.518 6.522 6.528 6.534 6.538 6.542 6.548 6.552 6.558 6.564 6.568 6.574 6.578 6.582 6.588 6.594 6.598 6.604 6.608 6.614 6.618 6.622 6.628 6.633 6.638 6.644 6.648 6.654 6.658 6.664 6.664 6.674 6.678 6.684 6.688 6.694 6.698 6.704 6.708 6.714 6.718 6.724 6.728 6.734 6.738 6.744 6.748 6.756 6.756 6.764 6.768 6.774 6.78 6.786 6.788 6.792 6.798 6.804 6.808 6.814 6.818 6.826 6.826 6.832 6.838 6.844 6.848 6.854 6.858 6.862 6.868 6.8739996 6.878 6.882 6.888 6.892 6.8960004 6.902 6.909 6.912 6.9179998 6.922 6.928 6.932 6.9380007 6.942 6.948 6.9519997 6.9580007 6.962 6.966 6.9719997 6.9780007 6.984 6.9879995 6.9940004 6.9980006 7.003 7.0079994 7.0119996 7.0180006 7.026 7.026 7.0319996 7.038 7.042 7.0479994 7.0519996 7.058 7.062 7.0679994 7.074 7.078 7.082 7.0880003 7.0920005 7.098 7.104 7.1080003 7.114 7.118 7.122 7.1280003 7.134 7.138 7.144 7.1480003 7.154 7.158 7.164 7.168 7.174 7.178 7.1859994 7.1879997 7.194 7.198 7.202 7.2079997 7.2140007 7.218 7.2239995 7.2279997 7.232 7.238 7.2439995 7.2540007 7.2540007 7.258 7.2639995 7.2679997 7.274 7.278 7.282 7.2880006 7.292 7.298 7.302 7.3080006 7.312 7.318 7.3219996 7.3259997 7.332 7.3379994 7.3419995 7.3480005 7.3520007 7.3579993 7.363 7.3680005 7.3720007 7.3779993 7.3840003 7.3880005 7.396 7.396 7.4040003 7.408 7.414 7.418 7.424 7.428 7.432 7.438 7.444 7.448 7.452 7.458 7.4660006 7.4660006 7.474 7.478 7.4839997 7.488 7.494 7.498 7.5060005 7.5060005 7.514 7.518 7.5240007 7.528 7.534 7.538 7.5440006 7.548 7.554 7.5579996 7.5640006 7.568 7.5739994 7.5779996 7.5840006 7.588 7.592 7.5979996 7.6040006 7.608 7.6139994 7.6179996 7.624 7.628 7.6339994 7.6379995 7.644 7.648 7.6539993 7.6580005 7.6620007 7.668 7.6740003 7.6780005 7.684 7.688 7.6919994 7.6980004 7.7020006 7.7090006 7.7119994 7.7180004 7.7220006 7.728 7.7319994 7.7380004 7.742 7.748 7.7519994 7.758 7.762 7.766 7.7719994 7.778 7.782 7.788 7.7920003 7.798 7.802 7.808 7.8120003 7.818 7.822 7.826 7.8320003 7.838 7.842 7.848 7.852 7.858 7.8630004 7.868 7.872 7.878 7.882 7.888 7.8919997 7.898 7.902 7.9079995 7.9119997 7.9180007 7.922 7.9279995 7.933 7.9380007 7.942 7.9479995 7.9540005 7.9580007 7.962 7.9679995 7.9719997 7.978 7.982 7.9879995 7.994 7.998 8.003 8.008 8.012 8.018 8.022 8.028 8.034 8.038 8.044 8.048 8.054 8.066 8.066 8.068 8.072 8.078 8.084 8.088 8.092 8.098 8.102 8.109 8.112 8.118 8.122 8.126 8.132 8.138 8.142 8.148 8.152 8.158 8.162 8.168 8.172 8.178 8.182 8.188 8.192 8.196 8.202 8.208 8.212 8.218 8.222 8.228 8.232 8.238 8.242 8.248 8.252 8.258 8.262 8.266 8.272 8.278 8.282 8.288 8.292 8.298 8.302 8.308 8.312 8.318 8.322 8.328 8.332 8.338 8.342 8.348 8.352 8.358 8.363 8.364 8.373 8.378 8.382 8.388 8.392 8.398 8.398 8.408 8.414 8.418 8.422 8.428 8.433 8.433 8.442 8.448 8.454 8.458 8.464 8.464 8.469 8.478 8.484 8.49 8.492 8.498 8.502 8.507 8.512 8.518 8.522 8.528 8.532 8.537 8.542 8.549 8.552 8.558 8.562 8.568 8.573 8.578 8.582 8.588 8.592 8.598 8.602 8.608 8.612 8.618 8.622 8.626 8.631 8.638 8.642 8.648 8.652 8.658 8.658 8.668 8.672 8.678 8.682 8.688 8.692 8.696 8.702 8.708 8.712 8.718 8.722 8.728 8.733 8.738 8.742 8.748 8.752 8.758 8.762 8.769 8.772 8.778 8.782 8.788 8.792 8.798 8.803 8.808 8.812 8.818 8.824 8.824 8.832 8.838 8.844 8.848 8.852 8.858 8.862 8.868 8.872 8.878 8.882 8.888 8.892 8.898 8.902 8.908 8.912 8.918 8.922 8.928 8.932 8.938 8.942 8.948 8.952 8.958 8.962 8.968 8.972 8.978 8.982 8.988 8.992 8.998 9.002 9.008 9.012 9.016 9.023 9.028 9.032 9.038 9.042 9.048 9.05 9.058 9.062 9.068 9.082 9.082 9.084 9.093 9.098 9.102 9.108 9.112 9.118 9.123 9.126 9.129)) (quote (0.009870383 0.009810137 0.009433331 0.009182142 0.008933199 0.008754041 0.008642282 0.008331774 0.008003806 0.007776936 0.007641757 0.0072773886 0.0069426424 0.00643724 0.005856188 0.0052873334 0.005059758 0.005023973 0.005801012 0.0070598754 0.0088349935 0.010996472 0.013912016 0.017214915 0.021087982 0.025271586 0.029980388 0.034937837 0.04005299 0.045230188 0.050392393 0.055564147 0.06044484 0.06528363 0.06988471 0.07435454 0.07885349 0.08304296 0.08747472 0.09195758 0.09647991 0.101283536 0.10616299 0.11138123 0.116796926 0.12243038 0.12811512 0.13410066 0.14056073 0.14704553 0.15380182 0.1608258 0.16800522 0.17504846 0.18224213 0.18922358 0.19627275 0.20315323 0.20968069 0.21614538 0.22247479 0.22840654 0.23441927 0.24000226 0.24585797 0.2512413 0.25604784 0.2612012 0.26590636 0.2701194 0.27409765 0.2777765 0.28156468 0.2850779 0.28757516 0.2902537 0.29305747 0.29535002 0.29738858 0.29918045 0.30077147 0.3029766 0.30462044 0.30578408 0.30660346 0.30696437 0.30731082 0.30723262 0.3068614 0.30615753 0.3054439 0.30429423 0.30291164 0.3014465 0.29948092 0.29755896 0.2955564 0.29319215 0.29062012 0.28784668 0.28504306 0.28184474 0.2787446 0.27567688 0.2721767 0.2697309 0.2665923 0.2639663 0.2617539 0.26012895 0.25840414 0.25670385 0.25506553 0.25337195 0.2517923 0.25027132 0.2486461 0.24700073 0.24535388 0.24374344 0.24228734 0.24082786 0.23927896 0.2378411 0.23653797 0.23546347 0.23440066 0.23366085 0.23301424 0.23229538 0.23158325 0.2308417 0.22997752 0.22911099 0.22810184 0.22711033 0.22606 0.22486195 0.22360543 0.22264919 0.21938052 0.22062995 0.22125903 0.22157294 0.2217665 0.22132726 0.22127754 0.22138663 0.22117524 0.22094415 0.22063312 0.22025672 0.22000103 0.21943733 0.21894567 0.21844736 0.21814086 0.21777804 0.21757476 0.21751954 0.2177695 0.21795285 0.21838592 0.21898663 0.21948998 0.22027566 0.22134075 0.2223499 0.22323835 0.22376822 0.2245664 0.2255529 0.22649946 0.2272418 0.22802668 0.22864619 0.22902891 0.22918815 0.2293666 0.22938575 0.22687206 0.2282496 0.22876513 0.2286271 0.2283961 0.22807303 0.22743498 0.2269507 0.22646158 0.22599747 0.22553836 0.22509673 0.2247497 0.22453866 0.22423613 0.22400405 0.22386293 0.22373839 0.2237076 0.22387626 0.22416856 0.22489234 0.22571187 0.22693573 0.2284376 0.23029359 0.23249224 0.23505564 0.23808722 0.24130433 0.2450217 0.24907995 0.25328287 0.2579828 0.26287824 0.26789755 0.27297986 0.2784465 0.2839938 0.28979775 0.29567823 0.30172017 0.3079431 0.31430712 0.32065716 0.32726535 0.33378223 0.34064963 0.34752712 0.35468405 0.3619264 0.3692355 0.3766438 0.38417128 0.39167756 0.39943823 0.4067831 0.41439107 0.42172304 0.4289608 0.4359338 0.44254985 0.44867882 0.4541336 0.45909372 0.46368065 0.46752757 0.47113764 0.47420484 0.4767994 0.47858554 0.47990522 0.48048323 0.4799857 0.47884175 0.47674695 0.4738617 0.47048408 0.46685562 0.463078 0.45926297 0.45587137 0.45252174 0.44700888 0.4441206 0.4425502 0.4418786 0.4429079 0.44356325 0.4443288 0.44480333 0.44493204 0.4452399 0.44584396 0.44669333 0.44771793 0.44934565 0.45058268 0.45167744 0.45350835 0.45511234 0.45738506 0.45963326 0.46170276 0.4642589 0.4668037 0.46889886 0.4712481 0.47352442 0.4757786 0.47794068 0.48045436 0.48096353 0.48267284 0.48457754 0.48653615 0.48847222 0.4904192 0.49326238 0.4949159 0.49698144 0.49841204 0.49986643 0.50160736 0.50480366 0.50659514 0.50783206 0.50694854 0.5074409 0.50619066 0.505136 0.5047827 0.50229395 0.5012385 0.49996433 0.49717587 0.49389097 0.48981884 0.48547646 0.4808318 0.4767339 0.47089255 0.46636575 0.4601963 0.45464733 0.44792807 0.44158396 0.43472096 0.42702293 0.4189641 0.41068423 0.40181023 0.39266583 0.38296568 0.37281474 0.36264467 0.35188258 0.34095275 0.33005345 0.3191244 0.30805206 0.29712486 0.28624076 0.27529335 0.26457328 0.25434884 0.2438602 0.23393275 0.22386246 0.21462992 0.20604342 0.19695974 0.18866976 0.18089468 0.17353797 0.16681959 0.16059956 0.1537761 0.14773596 0.14245744 0.13768351 0.13308244 0.12922186 0.12610747 0.12376934 0.12259632 0.122136906 0.123048306 0.1251723 0.12856913 0.13288814 0.1383233 0.1442076 0.15122837 0.15975398 0.1690668 0.17965777 0.19089218 0.20282719 0.21545977 0.22794947 0.24073014 0.25426126 0.2684522 0.28246412 0.2960689 0.30998883 0.32381344 0.33723578 0.35053235 0.36348882 0.37648174 0.38920122 0.40118268 0.41266269 0.42465222 0.43617097 0.44679838 0.45648158 0.4658004 0.47490054 0.48395306 0.492226 0.49995986 0.506973 0.5120959 0.5177856 0.52145744 0.5247559 0.5288383 0.5311976 0.5327233 0.533908 0.53507895 0.5356416 0.5354502 0.5346728 0.5330873 0.5315315 0.52934826 0.52639425 0.5232545 0.5200526 0.5156046 0.50965006 0.5018389 0.4918637 0.47988632 0.46630445 0.45178625 0.43640575 0.4207346 0.4049086 0.3895564 0.37423572 0.35887858 0.34341645 0.32774183 0.311553 0.29477218 0.2778051 0.26100916 0.24508798 0.229077 0.21421607 0.20082386 0.18920718 0.17955178 0.17212615 0.16710212 0.16586696 0.1660436 0.168972 0.17492502 0.18268486 0.1922988 0.20394004 0.2157392 0.22828317 0.24212843 0.2561395 0.26991948 0.28408694 0.29773256 0.31143722 0.32451198 0.33764836 0.3498731 0.36172584 0.3725612 0.3826235 0.3920426 0.40015644 0.4076806 0.41486257 0.42085865 0.42615294 0.4303426 0.43383265 0.43635055 0.43828005 0.43914813 0.438671 0.43793985 0.43690628 0.43496042 0.43192223 0.4286884 0.4249572 0.42040202 0.41569662 0.4106777 0.40475187 0.39808214 0.39113465 0.38428113 0.37599552 0.36776066 0.35920873 0.3506754 0.3414263 0.33273947 0.32327566 0.31306797 0.30219895 0.29117465 0.27997258 0.2683784 0.25727335 0.24615544 0.23482086 0.22374876 0.21232298 0.20103035 0.18986644 0.17850816 0.16716074 0.15625163 0.14521806 0.13423632 0.12390604 0.112919554 0.10251965 0.092068754 0.08162409 0.07190706 0.062286266 0.05418048 0.04622919 0.041373093 0.037862774 0.037438956 0.040125046 0.04466531 0.050707262 0.057382178 0.065436475 0.073161945 0.08182146 0.09101761 0.09955922 0.10827173 0.11676742 0.12531008 0.1328728 0.14073637 0.14796093 0.15496533 0.1615359 0.16793017 0.17378517 0.1791157 0.18408972 0.1891152 0.19314225 0.19649995 0.19916088 0.20314275 0.20496193 0.20564644 0.20637734 0.2067564 0.2059184 0.20526746 0.20350249 0.2010669 0.19885707 0.19564948 0.19195239 0.18760014 0.18286249 0.17832802 0.17304489 0.16717372 0.16139724 0.15461192 0.14795754 0.14113406 0.13332263 0.12575124 0.117990926 0.11015333 0.10174138 0.093172506 0.08513973 0.076346174 0.06775143 0.05942871 0.051126056 0.042767935 0.034545236 0.026835565 0.020168109 0.017026319 0.017231029 0.019932114 0.02426397 0.029714827 0.03518317 0.049942006 0.060447604 0.06806079 0.07406767 0.07981668 0.08461878 0.089695394 0.09456206 0.09953634 0.104236774 0.10659165)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote (0.10659165 0.10894726 0.113325514 0.11722721 0.12126903 0.12507105 0.12860713 0.13191898 0.1340524 0.13625439 0.13812737 0.13971006 0.14109804 0.14160788 0.14235467 0.14234989 0.14108238 0.14051432 0.13898349 0.13766659 0.1353378 0.13291389 0.1295347 0.12756492 0.1238729 0.12076218 0.116923966 0.11205025 0.10774252 0.10269669 0.09734702 0.092459575 0.08702515 0.08165509 0.076105476 0.07050356 0.064924196 0.05928521 0.053911314 0.048538443 0.04289743 0.037697345 0.033412505 0.029811098 0.025731015 0.025588107 0.026063664 0.027765725 0.029845354 0.03289432 0.036651425 0.041222878 0.045525343 0.05032867 0.055072423 0.0605208 0.06541 0.07025248 0.07495397 0.079385884 0.08377584 0.08755011 0.09148775 0.095728986 0.09945676 0.10360902 0.10559134 0.10948553 0.111653045 0.11329247 0.115419775 0.11763992 0.119068235 0.12062501 0.12150792 0.12247827 0.12368056 0.12410384 0.12400775 0.123557136 0.123314776 0.1225735 0.12196984 0.12055868 0.118891254 0.117200285 0.115582384 0.113256656 0.110838644 0.10825345 0.10580118 0.103138045 0.10013271 0.09730483 0.09428284 0.09130435 0.08865102 0.08584735 0.0831001 0.0806312 0.07832102 0.075805634 0.07378572 0.07168413 0.06969708 0.067981355 0.06655344 0.06565586 0.064892404 0.06409881 0.06345878 0.06338466 0.06370113 0.064159304 0.064663515 0.065495774 0.066325724 0.06700347 0.067988605 0.06893191 0.06970955 0.07079353 0.071639225 0.07247905 0.07329164 0.07421288 0.07484516 0.07549599 0.07629414 0.076424554 0.07674359 0.07697109 0.07739949 0.07769122 0.07770404 0.077773176 0.07789075 0.0774655 0.07766498 0.07745585 0.0774607 0.077375315 0.07698216 0.077543244 0.07757607 0.07700277 0.07709253 0.077038646 0.07687488 0.07673634 0.07612078 0.075573445 0.07571509 0.0760941 0.07629629 0.076564394 0.07652739 0.07614032 0.076079466 0.076859176 0.077198275 0.07755779 0.07738873 0.07798132 0.07870642 0.07915905 0.0795898 0.07932907 0.08011175 0.080703005 0.08136919 0.08177346 0.08188776 0.0827943 0.08363199 0.08406227 0.08475008 0.08534181 0.085617915 0.086075865 0.08619205 0.08658613 0.086271636 0.08677069 0.08694183 0.08747353 0.087441936 0.08708948 0.0867393 0.08618298 0.085676596 0.08523843 0.084725015 0.08427259 0.083712295 0.083217815 0.082623415 0.08223991 0.08167497 0.08113521 0.08069473 0.080052935 0.07950532 0.0791267 0.07893611 0.078857795 0.07898821 0.07925581 0.079608426 0.07996637 0.08038561 0.080837056 0.08116837 0.08149686 0.081758015 0.08207344 0.082155556 0.0822379 0.08195787 0.08171889 0.0815678 0.08114021 0.08079983 0.0803104 0.07982358 0.079141155 0.078280285 0.0774986 0.076553814 0.07560358 0.07450351 0.07360117 0.07261217 0.07167189 0.07047996 0.06958747 0.068723545 0.06793946 0.06729764 0.06666334 0.06618782 0.06572631 0.0653088 0.06499818 0.06479819 0.06464082 0.06442026 0.06432314 0.06430425 0.0643085 0.064209126 0.06422012 0.06426229 0.06432665 0.06426126 0.06428979 0.06439576 0.06453872 0.06485068 0.06528319 0.06559872 0.06619544 0.0667901 0.06765926 0.06868196 0.0694289 0.0703513 0.07156654 0.07206977)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-92.10033 -92.10188 -92.10237 -92.11662 -92.060196 -92.03201 -92.04818 -91.9956 -91.938774 -91.85381 -91.815346 -91.73575 -91.65067 -91.56849 -91.4418 -91.338036 -91.223526 -91.19136 -91.09809 -90.93519 -90.69749 -90.60275 -90.46232 -90.299736 -90.14308 -89.96661 -89.11086 -89.66725 -89.45552 -88.45984 -88.51033 -88.432465 -87.91367 -87.83847 -87.78793 -87.68845 -87.224846 -87.27717 -87.3355 -87.096924 -86.91833 -87.00869 -86.8413 -86.94332 -86.753 -86.87497 -86.77025 -86.79062 -86.56718 -86.794205 -86.904366 -86.63157 -86.594445 -87.025 -86.996575 -87.039376 -87.38417 -87.2701 -87.49984 -87.79753 -87.68411 -88.34005 -88.351906 -88.74963 -88.973145 -89.28622 -89.37323 -90.042755 -90.524346 -90.65599 -91.20756 -91.53354 -92.1455 -92.854744 -93.56742 -93.983734 -94.35001 -94.80834 -95.66984 -96.267426 -97.46184 -97.937874 -98.41213 -99.23118 -100.57939 -100.867066 -101.74953 -102.41187 -103.746575 -104.55276 -105.41697 -107.02462 -108.207634 -110.18573 -111.25189 -112.41098 -113.39627 -114.901856 -116.1216 -117.14919 -118.534096 -119.596306 -121.11967 -122.37923 -123.68165 -124.89593 -126.58805 -127.97427 -129.2572 -130.73473 -132.21067 -133.59255 -135.14452 -136.65686 -138.10384 -139.54137 -141.07794 -142.38819 -143.84889 -145.20398 -146.52045 -147.61528 -149.18354 -150.11937 -151.40299 -152.78794 -153.69835 -154.81237 -155.89788 -156.86008 -157.88492 -158.80568 -159.60808 -160.42769 -161.15265 -161.89698 -162.74645 -163.3009 -163.91179 -164.42263 -164.85887 -165.23654 -165.65494 -165.97487 -166.31203 -166.52698 -166.77442 -166.92809 -167.07141 -167.14911 -167.19751 -167.18396 -167.16934 -167.12424 -167.06156 -166.95058 -166.79438 -166.66205 -166.45764 -166.23503 -165.97824 -165.71929 -165.53879 -165.2182 -164.92186 -164.6267 -164.20343 -163.90416 -163.58515 -163.25278 -162.8617 -162.53491 -162.15267 -161.77368 -161.35694 -160.97879 -160.46727 -160.11713 -159.67237 -159.24265 -158.805 -158.36495 -156.87877 -157.37465 -156.81809 -155.1961 -155.77594 -155.18987 -154.6514 -153.0209 -153.55345 -151.78226 -151.46468 -150.8418 -150.00368 -149.52249 -148.9467 -148.23464 -147.56348 -146.97978 -146.0007 -145.75446 -144.11373 -144.2217 -142.6418 -142.92646 -140.87574 -139.99251 -139.56598 -138.57508 -137.75493 -136.95421 -135.8725 -136.32411 -135.2519 -134.2737 -133.48627 -132.52335 -131.94666 -131.0498 -130.19925 -129.24246 -128.40267 -127.47455 -126.55974 -125.59678 -124.80206 -123.85679 -122.72504 -121.733445 -120.87218 -120.085884 -119.10076 -118.153595 -117.31872 -116.394516 -115.54926 -114.65202 -113.81864 -113.021576 -112.17682 -111.40127 -110.54432 -109.766304 -108.98477 -108.30194 -107.56347 -106.832535 -106.13415 -105.15808 -104.7712 -104.4099 -103.45455 -103.25101 -102.67896 -102.09276 -101.58317 -101.38746 -100.91054 -100.88572 -100.50473 -100.32118 -99.96518 -99.63802 -99.26073 -98.92255 -98.64782 -98.327545 -98.02941 -97.79044 -97.48239 -96.97447 -97.04263 -96.49951 -96.255226 -96.168564 -95.88939 -95.73352 -95.613396 -95.4208 -95.31832 -95.15922 -95.055565 -94.96134 -94.78322 -94.6685 -94.64486 -94.49598 -94.42536 -94.39023 -94.29672 -94.28567 -94.24329 -94.19907 -94.12504 -94.13827 -94.12888 -94.0456 -94.0301 -94.05306 -94.138665 -93.857575 -93.795784 -93.83008 -93.80195)) (quote (-51.618237 -51.577858 -51.59484 -51.554184 -51.52747 -51.51741 -51.249737 -51.45055 -51.40541 -51.393403 -51.359978 -51.30679 -51.301304 -51.33289 -51.296174 -51.29122 -51.268685 -51.04856 -51.03782 -50.988106 -51.22033 -51.032326 -50.978516 -50.978867 -50.98833 -50.977314 -50.561222 -50.987275 -50.9897 -50.5844 -50.551445 -50.540005 -50.612706 -50.603138 -50.590725 -50.60339 -50.655308 -50.65123 -50.621106 -50.68581 -50.705914 -50.686146 -50.726017 -50.71255 -50.755173 -50.731633 -50.81006 -50.824727 -50.836918 -50.87072 -50.874203 -51.006955 -51.0843 -51.059498 -51.182026 -51.250348 -51.250874 -51.43432 -51.50753 -51.526764 -51.69136 -51.710858 -51.882817 -51.930108 -52.102986 -52.248127 -52.426773 -52.528485 -52.665646 -52.86795 -52.972226 -53.260045 -53.411015 -53.616394 -53.79872 -54.10019 -54.288453 -54.547413 -54.81062 -55.024373 -55.329895 -55.48115 -55.83833 -56.115815 -56.408245 -56.675217 -56.936844 -57.293766 -57.594544 -57.828087 -58.141968 -58.490048 -58.72591 -59.463967 -59.797676 -60.117157 -60.42754 -60.60501 -60.854035 -61.203728 -61.465226 -61.747612 -61.892853 -62.085995 -62.312088 -62.582653 -62.64727 -62.81382 -63.00251 -63.116352 -63.235974 -63.375615 -63.423787 -63.476696 -63.560738 -63.5651 -63.520394 -63.53652 -63.487233 -63.45265 -63.380127 -63.49313 -63.153202 -63.238457 -63.095726 -62.72121 -62.73794 -62.516205 -62.28179 -62.134434 -61.812455 -61.49068 -61.271054 -60.92424 -60.628567 -60.24179 -59.91222 -59.564248 -59.082028 -58.748757 -58.376736 -57.9442 -57.5163 -57.043366 -56.546917 -56.113865 -55.622303 -55.137116 -54.603077 -54.1121 -53.67203 -53.093865 -52.578186 -52.08135 -51.47859 -50.902497 -50.307228 -49.79028 -49.230515 -48.67667 -48.17206 -47.631966 -46.893948 -46.372727 -45.78351 -45.195427 -44.705826 -44.06903 -43.42227 -42.862244 -42.28985 -41.727864 -41.181 -40.60742 -39.98408 -39.519944 -39.12196 -38.549996 -38.134274 -37.528565 -37.099987 -36.613823 -36.22582 -35.63722 -35.268898 -34.926487 -34.425316 -34.119347 -33.77908 -33.380417 -33.029515 -32.752713 -32.44464 -32.072655 -31.727419 -31.447005 -31.279667 -31.055542 -30.82851 -30.496304 -30.24657 -30.153216 -30.140118 -29.899989 -29.82042 -29.324612 -29.568316 -29.709069 -29.317927 -29.289175 -29.29399 -29.27896 -29.305417 -29.09549 -29.08724 -29.163878 -29.147379 -29.120394 -29.145512 -29.195059 -29.270386 -29.34332 -29.390717 -29.522248 -29.48019 -29.586895 -29.608487 -29.70025 -29.764889 -29.898943 -29.9785 -30.134354 -30.158177 -30.260293 -30.263516 -30.372286 -30.39109 -30.4458 -30.487334 -30.532624 -30.579272 -30.585576 -30.613728 -30.853589 -30.650015 -30.8131 -30.787945 -30.757805 -30.724562 -30.772738 -30.733927 -30.881724 -30.575985 -30.640282 -30.511479 -30.399712 -30.263182 -30.11628 -29.984732 -29.853096 -29.681799 -29.673703 -29.517107 -29.382725 -29.09184 -28.978814 -28.795592 -28.663962 -28.53373 -28.37384 -28.235335 -27.98417 -27.98283 -27.7104 -27.592764 -27.546122 -27.433878 -27.528113 -27.507983 -27.467808 -27.43806 -27.420323 -27.629528 -27.676527 -27.674706 -27.685788 -27.775654 -27.745528 -27.86139 -27.916069 -28.004618 -28.112284 -28.24947 -28.704827 -28.816197 -28.978096 -29.159657 -29.358994 -29.572327 -29.786234 -30.034543 -30.123082 -30.310473 -30.562436 -30.781689)) (quote (51.999905 52.164784 52.146614 52.30044 52.390397 52.47519 52.948857 52.7315 52.92728 53.16509 53.25423 53.563 53.757485 53.874813 54.18826 54.312508 54.590886 55.063805 55.26175 55.605893 55.50879 55.985268 56.381596 56.618 56.77212 57.049572 57.914414 57.42482 57.782776 58.466874 59.024613 59.378708 59.299927 59.51393 59.99574 60.29114 60.207745 60.53772 61.02553 61.160424 61.291783 61.74079 61.880974 62.210423 62.370408 62.710717 62.86067 63.111325 63.17622 63.567383 63.982136 63.73667 63.86242 64.49436 64.47415 64.66988 65.12495 64.87722 65.02473 65.27625 65.10432 65.819214 65.61897 65.747826 65.75988 65.984215 65.59012 65.9668 66.112686 66.016396 66.00743 65.83481 65.85635 65.91181 65.925316 65.65674 65.29648 65.097435 64.896416 64.60285 65.03488 64.139 63.51999 63.287636 63.46224 62.449673 62.03939 61.32695 60.877747 60.318543 59.361107 59.59664 58.802838 56.18123 55.383385 54.400666 53.479866 52.26667 51.347004 50.346928 48.873803 47.887978 46.6946 45.52517 44.29859 43.072117 41.899144 40.58848 39.46422 38.34964 37.05285 35.73181 34.462357 33.1161 31.823889 30.733139 29.456774 28.232356 26.922558 25.663363 24.442934 23.030125 22.07984 20.803324 19.590128 18.764107 17.580727 16.598732 15.767834 14.582324 13.746604 12.968722 12.128947 11.498865 10.818289 10.232583 9.113117 8.504713 8.255328 7.7365914 7.2818694 7.0843234 6.8250847 6.4215427 6.540731 6.3759427 6.2354527 6.3644447 6.295532 6.1888604 6.0984087 6.165079 6.2808228 6.3702345 6.762762 6.862116 7.223276 7.4209905 7.6940036 7.913394 8.278031 8.531433 9.31499 9.588557 10.181801 10.560555 11.027693 11.558095 12.02749 12.604165 12.954886 13.4114 14.000447 14.426863 14.99501 15.347042 15.7651825 16.78266 16.898514 17.343874 17.548764 17.906567 20.366866 18.070788 18.179512 20.836474 18.505148 18.478356 18.736487 21.484408 19.179339 21.68159 21.776793 21.816039 22.651247 22.125758 22.20642 22.275399 22.429127 22.772572 23.236834 22.515517 24.895127 22.660122 24.944157 23.987053 27.143515 26.065802 26.508343 27.027628 27.39142 27.219895 28.261397 24.837668 25.894478 26.102934 26.406743 27.023026 26.600783 27.045512 27.105427 27.575766 27.569609 27.853013 28.197922 28.325245 29.14343 29.509139 29.773978 30.13148 30.41082 30.895073 31.269383 31.77301 32.330727 32.716603 33.440998 34.023503 34.672577 35.34595 35.89531 36.656975 37.337967 38.781914 39.0884 40.555073 41.436295 42.351983 43.388466 44.042447 45.404404 47.48249 48.027386 50.137757 51.60178 53.05133 54.803246 56.866826 58.8884 62.050015 63.995034 66.10992 68.13337 69.903206 72.32745 74.21994 76.078026 77.831345 79.685685 81.34565 83.00726 84.297615 86.26827 87.599884 89.19858 91.00044 92.59274 94.431046 96.10549 97.72037 99.34468 100.92972 102.9159 104.36524 105.9764 107.22642 108.687355 109.82607 111.3187 112.48897 113.75957 115.07596 116.35264 118.64678 119.75798 120.98613 122.2749 123.45698 124.56083 125.62972 126.7417 128.02051 129.11797 130.06272 130.7405)) (quote (0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0.466 0.474 0.478 0.484 0.488 0.494 0.498 0.504 0.508 0.514 0.518 0.524 0.528 0.534 0.537 0.544 0.548 0.554 0.558 0.564 0.568 0.574 0.578 0.584 0.588 0.592 0.598 0.604 0.608 0.614 0.618 0.626 0.626 0.634 0.638 0.644 0.648 0.654 0.658 0.662 0.669 0.674 0.678 0.684 0.688 0.696 0.696 0.704 0.708 0.714 0.718 0.724 0.728 0.732 0.738 0.744 0.752 0.754 0.758 0.764 0.769 0.774 0.778 0.784 0.788 0.794 0.798 0.802 0.808 0.814 0.818 0.824 0.829 0.834 0.838 0.84 0.848 0.854 0.858 0.864 0.868 0.874 0.874 0.884 0.888 0.894 0.898 0.904 0.908 0.911 0.918 0.924 0.928 0.934 0.938 0.944 0.956 0.956 0.958 0.964 0.968 0.974 0.978 0.984 0.988 0.994 0.998 1.004 1.008 1.014 1.018 1.024 1.028 1.034 1.038 1.044 1.048 1.054 1.058 1.064 1.068 1.074 1.078 1.084 1.088 1.092 1.098 1.104 1.108 1.114 1.118 1.124 1.129 1.134 1.138 1.144 1.148 1.154 1.158 1.164 1.168 1.174 1.178 1.184 1.188 1.194 1.194 1.204 1.208 1.214 1.218 1.224 1.228 1.234 1.238 1.244 1.248 1.254 1.258 1.266 1.266 1.274 1.278 1.284 1.288 1.294 1.298 1.304 1.308 1.314 1.318 1.324 1.328 1.334 1.338 1.344 1.348 1.354 1.358 1.364 1.368 1.374 1.378 1.384 1.388 1.394 1.398 1.404 1.408 1.414 1.418 1.424 1.428 1.434 1.438 1.444 1.448 1.454 1.458 1.462 1.468 1.474 1.478 1.484 1.488 1.494 1.498 1.504 1.508 1.514 1.518 1.524 1.526 1.532 1.538 1.544 1.548 1.554 1.558 1.564 1.568 1.574 1.578 1.584 1.588 1.592 1.598 1.604 1.608 1.614 1.618 1.626 1.626 1.634 1.638 1.644 1.648 1.654 1.658 1.664 1.668 1.674 1.678 1.684 1.688 1.694 1.699 1.704 1.708 1.714 1.718 1.724 1.728 1.734 1.738 1.744 1.748 1.754 1.758 1.764 1.768 1.774 1.778 1.784 1.788 1.794 1.798 1.803 1.808 1.814 1.818 1.824 1.828 1.834 1.838 1.844 1.848 1.854 1.858 1.864 1.868 1.874 1.878 1.884 1.888 1.892 1.898 1.904 1.908 1.914 1.918 1.924 1.928 1.934 1.938 1.944 1.948 1.954 1.958 1.962 1.968 1.974 1.978 1.984 1.987)) (setf (z-points newobj) (list 51.999905 52.164784 52.146614 52.30044 52.390397 52.47519 52.948857 52.7315 52.92728 53.16509 53.25423 53.563 53.757485 53.874813 54.18826 54.312508 54.590886 55.063805 55.26175 55.605893 55.50879 55.985268 56.381596 56.618 56.77212 57.049572 57.914414 57.42482 57.782776 58.466874 59.024613 59.378708 59.299927 59.51393 59.99574 60.29114 60.207745 60.53772 61.02553 61.160424 61.291783 61.74079 61.880974 62.210423 62.370408 62.710717 62.86067 63.111325 63.17622 63.567383 63.982136 63.73667 63.86242 64.49436 64.47415 64.66988 65.12495 64.87722 65.02473 65.27625 65.10432 65.819214 65.61897 65.747826 65.75988 65.984215 65.59012 65.9668 66.112686 66.016396 66.00743 65.83481 65.85635 65.91181 65.925316 65.65674 65.29648 65.097435 64.896416 64.60285 65.03488 64.139 63.51999 63.287636 63.46224 62.449673 62.03939 61.32695 60.877747 60.318543 59.361107 59.59664 58.802838 56.18123 55.383385 54.400666 53.479866 52.26667 51.347004 50.346928 48.873803 47.887978 46.6946 45.52517 44.29859 43.072117 41.899144 40.58848 39.46422 38.34964 37.05285 35.73181 34.462357 33.1161 31.823889 30.733139 29.456774 28.232356 26.922558 25.663363 24.442934 23.030125 22.07984 20.803324 19.590128 18.764107 17.580727 16.598732 15.767834 14.582324 13.746604 12.968722 12.128947 11.498865 10.818289 10.232583 9.113117 8.504713 8.255328 7.7365914 7.2818694 7.0843234 6.8250847 6.4215427 6.540731 6.3759427 6.2354527 6.3644447 6.295532 6.1888604 6.0984087 6.165079 6.2808228 6.3702345 6.762762 6.862116 7.223276 7.4209905 7.6940036 7.913394 8.278031 8.531433 9.31499 9.588557 10.181801 10.560555 11.027693 11.558095 12.02749 12.604165 12.954886 13.4114 14.000447 14.426863 14.99501 15.347042 15.7651825 16.78266 16.898514 17.343874 17.548764 17.906567 20.366866 18.070788 18.179512 20.836474 18.505148 18.478356 18.736487 21.484408 19.179339 21.68159 21.776793 21.816039 22.651247 22.125758 22.20642 22.275399 22.429127 22.772572 23.236834 22.515517 24.895127 22.660122 24.944157 23.987053 27.143515 26.065802 26.508343 27.027628 27.39142 27.219895 28.261397 24.837668 25.894478 26.102934 26.406743 27.023026 26.600783 27.045512 27.105427 27.575766 27.569609 27.853013 28.197922 28.325245 29.14343 29.509139 29.773978 30.13148 30.41082 30.895073 31.269383 31.77301 32.330727 32.716603 33.440998 34.023503 34.672577 35.34595 35.89531 36.656975 37.337967 38.781914 39.0884 40.555073 41.436295 42.351983 43.388466 44.042447 45.404404 47.48249 48.027386 50.137757 51.60178 53.05133 54.803246 56.866826 58.8884 62.050015 63.995034 66.10992 68.13337 69.903206 72.32745 74.21994 76.078026 77.831345 79.685685 81.34565 83.00726 84.297615 86.26827 87.599884 89.19858 91.00044 92.59274 94.431046 96.10549 97.72037 99.34468 100.92972 102.9159 104.36524 105.9764 107.22642 108.687355 109.82607 111.3187 112.48897 113.75957 115.07596 116.35264 118.64678 119.75798 120.98613 122.2749 123.45698 124.56083 125.62972 126.7417 128.02051 129.11797 130.06272 130.7405))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-93.80195 -93.79257 -93.895295 -93.915215 -94.04712 -94.08055 -94.16999 -94.22502 -94.28147 -94.36461 -94.47299 -94.5742 -95.24614 -95.35188 -95.47937 -95.621796 -95.82847 -95.9996 -96.1196 -96.35144 -96.58147 -96.80992 -97.03819 -97.358574 -97.65456 -97.9729 -98.18475 -98.70211 -99.034966 -99.453286 -99.86479 -100.28553 -100.72816 -101.22787 -101.73525 -102.25377 -102.87411 -103.45188 -104.11857 -104.38413 -104.956505 -105.703476 -106.32812 -107.11362 -107.86626 -108.65501 -109.464516 -110.255745 -111.40038 -112.30655 -113.23927 -114.23281 -115.28346 -116.37239 -116.45233 -117.642 -118.682305 -119.80822 -121.02918 -122.187706 -123.68372 -124.730255 -126.33747 -127.716606 -129.2812 -131.54502 -133.18268 -134.75478 -136.31302 -137.8857 -139.45493 -141.20478 -142.6374 -143.89986 -145.33975 -146.06485 -147.43477 -148.76944 -149.99353 -150.89014 -152.21791 -152.82251 -154.19118 -155.19806 -155.72028 -156.56179 -157.9931 -158.08448 -158.68648 -159.96395 -160.4592 -160.89344 -161.39176 -161.64257 -161.7173 -161.94164 -162.06574 -162.1136 -162.18433 -162.20873 -162.20848 -162.05821 -161.98474 -161.7522 -161.54038 -161.28153 -160.96163 -160.70769 -160.30406 -159.78572 -159.05774 -158.53621 -158.05695 -157.85306 -157.01078 -156.88677 -156.24904 -155.76914 -154.89037 -154.43824 -153.78456 -153.31649 -152.73172 -152.16963 -151.54869 -151.35645 -150.82363 -150.0978 -149.47916 -148.86974 -148.2018 -147.56726 -146.89238 -146.13217 -145.44164 -144.8033 -144.04283 -143.36252 -142.61963 -141.84049 -141.07956 -140.32964 -139.48947 -138.80048 -137.97891 -137.25925 -136.4556 -135.70929 -135.0305 -134.23073 -133.52053 -132.82141 -132.00368 -131.42783 -130.73928 -129.9937 -129.41344 -128.69554 -128.13488 -127.48204 -126.799446 -126.231224 -125.67582 -125.1309 -124.47441 -123.96432 -123.48461 -122.90919 -122.3395 -121.810425 -121.25223 -120.83112 -120.32728 -119.811776 -119.38272 -118.84809 -118.47456 -118.0676 -117.6692 -117.31594 -116.91279 -116.50906 -116.09794 -115.70062 -115.31116 -114.922486 -114.55107 -114.17824 -113.84429 -113.49708 -113.199715 -112.86894 -112.5301 -112.179215 -111.894226 -111.62845 -111.30242 -111.04644 -110.82126 -110.475174 -110.22944 -109.95705 -109.684075 -109.45418 -109.19247 -108.922036 -108.75282 -108.51993 -108.273796 -108.01258 -107.83031 -107.58179 -107.418206 -107.17087 -107.02442 -106.83963 -106.6046 -106.4151 -106.2452 -106.09633 -105.91623 -105.77238 -105.56534 -105.42328 -105.256714 -105.08964 -104.91674 -104.793175 -104.6999 -104.52343 -104.473656 -104.29983 -104.271195 -104.082436 -104.0039 -104.01284 -103.95853 -103.8583 -103.822365 -103.78028 -103.76162 -103.693726 -103.66789 -103.60902)) (quote (-30.781689 -30.854775 -31.051373 -31.121897 -31.392083 -31.654082 -31.984822 -32.27055 -32.564434 -32.865303 -33.41675 -33.770237 -34.506833 -34.880085 -35.225224 -35.62505 -36.029232 -36.37556 -36.656662 -37.077168 -37.51916 -37.92697 -38.44872 -38.832028 -39.3429 -39.784264 -40.24054 -40.803177 -41.277714 -41.77504 -42.35381 -42.88464 -43.41463 -43.97653 -44.488575 -45.081467 -45.67028 -46.195076 -46.757924 -47.183373 -47.670014 -48.23647 -48.71707 -49.325348 -49.87574 -50.429985 -50.954327 -51.470345 -52.20896 -52.67273 -53.218052 -53.74081 -54.239308 -54.794686 -54.89438 -55.324654 -55.74388 -56.173115 -56.690487 -57.147587 -57.51484 -57.67422 -58.111355 -58.43746 -58.57953 -59.121567 -59.26148 -59.55711 -59.688153 -59.682724 -59.899956 -59.78926 -59.674664 -59.591904 -59.362023 -58.952626 -58.646267 -58.31191 -57.89471 -57.45538 -56.85727 -56.39355 -55.6846 -55.007538 -54.44361 -53.613194 -52.725735 -52.10612 -51.29565 -50.373055 -49.55233 -48.709805 -47.79907 -46.97929 -46.13039 -45.26752 -44.305806 -43.49049 -42.637005 -41.866925 -41.037918 -40.07951 -39.232178 -38.50081 -37.66111 -36.854065 -36.07971 -35.155686 -34.799344 -33.845055 -33.052533 -32.03375 -31.305588 -30.795367 -30.033726 -29.473587 -28.92486 -28.254855 -27.592764 -26.998427 -26.46338 -26.010598 -25.469273 -24.895594 -24.45955 -23.960305 -23.62013 -23.15638 -22.666359 -22.30626 -21.93935 -21.654746 -21.25936 -20.981196 -20.739535 -20.410616 -20.034193 -19.894814 -19.62221 -19.461798 -19.263895 -19.032692 -18.786189 -18.627043 -18.375344 -18.207755 -18.048647 -17.883627 -17.676928 -17.486325 -17.399937 -17.215889 -17.066977 -16.944256 -16.773684 -16.578263 -16.45513 -16.317305 -16.27329 -16.154572 -15.96539 -15.7793045 -15.726955 -15.640664 -15.542395 -15.361003 -15.362407 -15.241737 -15.135803 -15.026287 -14.949345 -14.850637 -14.8018675 -14.701371 -14.625371 -14.5376625 -14.487414 -14.403113 -14.368564 -14.284276 -14.231683 -14.181352 -14.117015 -14.046026 -13.981792 -13.896971 -13.82744 -13.765161 -13.699253 -13.619345 -13.550496 -13.47632 -13.373627 -13.24955 -13.166399 -13.068721 -12.985821 -12.893504 -12.799865 -12.737307 -12.651311 -12.568283 -12.482553 -12.394602 -12.330393 -12.252786 -12.163894 -12.095091 -12.021835 -11.950347 -11.853932 -11.80847 -11.730017 -11.674507 -11.584914 -11.514482 -11.431472 -11.407593 -11.328471 -11.264235 -11.218775 -11.137443 -11.098806 -11.049507 -11.01292 -10.981032 -10.939815 -10.913833 -10.882698 -10.869073 -10.907899 -10.830079 -10.794391 -10.789759 -10.768489 -10.7582445 -10.74792 -10.753867 -10.736273 -10.73576 -10.71003 -10.714719 -10.723626 -10.720292)) (quote (130.7405 130.96643 131.69998 132.9962 133.64824 134.2056 135.06728 135.63648 136.06546 136.58759 137.44394 137.95874 138.87407 139.33054 139.72373 140.26766 140.62065 140.83835 141.58776 141.7498 142.0437 142.25035 142.55867 142.5331 142.85257 142.90056 143.13574 143.06192 143.08675 143.00078 143.11087 143.09894 143.00844 142.74605 142.52268 142.40053 142.0651 141.58428 141.17377 140.01309 139.2131 138.25679 137.51918 136.66504 135.62023 134.45999 133.42923 132.08951 130.53874 129.18268 127.78352 126.23096 124.635186 122.887146 121.01039 119.13168 117.271256 115.334275 113.49434 111.619866 109.363556 107.35942 105.25255 103.30185 101.15186 97.88214 95.54252 93.94799 91.989495 90.031975 88.26693 86.2789 84.0587 82.51649 80.35614 78.69143 75.64942 74.77789 72.85038 70.10905 69.269196 67.0722 66.15044 64.95172 63.63688 62.663205 62.695374 61.68951 61.2542 61.874287 61.744553 61.593445 61.67154 61.473835 61.7315 61.702362 61.577763 61.598965 61.624955 62.070698 62.210827 62.46733 62.769425 63.170617 63.475777 63.675663 63.89973 61.61715 65.542565 64.87917 64.39512 64.76417 65.04842 65.63639 65.49318 66.1996 66.438965 66.88895 66.70847 67.16336 67.50358 68.0414 68.52837 68.859375 69.27073 70.29262 70.81325 71.14245 71.05521 71.415665 71.74403 72.011 72.05671 72.293755 72.474686 73.45291 73.88012 73.71815 73.900215 73.97336 73.974175 74.22281 74.37767 74.45096 74.60638 74.69099 75.10627 75.13398 75.39282 75.55768 75.97757 76.02099 76.23057 76.68967 76.79627 77.012596 77.39219 77.64391 78.14596 78.510826 78.73997 78.91185 79.31292 79.59921 79.81206 79.99798 80.5426 80.80245 81.25081 81.34768 81.68029 82.039696 82.39098 82.45208 82.814965 82.880135 83.52251 83.78416 84.108635 84.454506 84.78691 85.10222 85.42258 85.66724 85.88407 86.19533 86.36568 86.56494 86.86566 87.10948 87.35178 87.67188 87.79013 87.98262 88.29366 88.58992 88.77296 89.12063 89.39323 89.57069 89.86506 90.11342 90.3799 90.58978 90.88868 91.0087 91.40651 91.62163 91.786316 91.96921 92.21311 92.39576 92.59746 92.76361 93.02949 93.17275 93.35775 93.530175 93.653565 93.8823 94.05129 94.25852 94.281876 94.51253 94.66477 94.85974 95.04767 95.10483 95.35928 95.39567 95.37217 95.72538 95.80982 95.93142 96.12616 96.24409 96.36114 96.46387 96.50588 96.64628 96.78401 96.85417 97.01198 97.03185)) (quote (1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1.987 1.988 1.994 1.999 2.004 2.008 2.014 2.018 2.024 2.028 2.032 2.038 2.044 2.048 2.054 2.058 2.066 2.066 2.074 2.078 2.084 2.088 2.094 2.098 2.102 2.108 2.114 2.118 2.124 2.128 2.134 2.138 2.144 2.149 2.154 2.158 2.164 2.168 2.174 2.178 2.184 2.188 2.194 2.198 2.204 2.208 2.214 2.218 2.224 2.228 2.232 2.238 2.244 2.248 2.254 2.258 2.264 2.264 2.274 2.278 2.284 2.288 2.294 2.298 2.304 2.308 2.314 2.318 2.324 2.328 2.334 2.338 2.344 2.348 2.356 2.356 2.364 2.368 2.374 2.378 2.384 2.388 2.392 2.398 2.404 2.408 2.414 2.418 2.426 2.426 2.434 2.438 2.444 2.448 2.454 2.458 2.462 2.468 2.474 2.478 2.484 2.488 2.496 2.496 2.504 2.508 2.514 2.518 2.524 2.528 2.533 2.538 2.544 2.548 2.554 2.558 2.564 2.564 2.574 2.578 2.584 2.588 2.594 2.598 2.604 2.608 2.614 2.618 2.624 2.624 2.634 2.638 2.644 2.648 2.654 2.658 2.664 2.668 2.674 2.678 2.684 2.688 2.694 2.698 2.704 2.708 2.714 2.718 2.724 2.728 2.734 2.738 2.744 2.748 2.754 2.758 2.764 2.768 2.774 2.778 2.784 2.788 2.794 2.798 2.804 2.808 2.814 2.818 2.824 2.828 2.832 2.838 2.844 2.848 2.854 2.858 2.864 2.868 2.873 2.878 2.884 2.888 2.894 2.898 2.904 2.908 2.914 2.918 2.924 2.924 2.934 2.938 2.942 2.952 2.954 2.958 2.964 2.968 2.974 2.979 2.984 2.988 2.994 2.994 3.004 3.008 3.014 3.018 3.024 3.028 3.034 3.038 3.044 3.048 3.054 3.058 3.064 3.064 3.074 3.078 3.084 3.088 3.094 3.098 3.104 3.108 3.114 3.118 3.124 3.128 3.134 3.138 3.144 3.148 3.154 3.158 3.164 3.168 3.174 3.178 3.184 3.188 3.192 3.198)) (setf (z-points newobj) (list 130.7405 130.96643 131.69998 132.9962 133.64824 134.2056 135.06728 135.63648 136.06546 136.58759 137.44394 137.95874 138.87407 139.33054 139.72373 140.26766 140.62065 140.83835 141.58776 141.7498 142.0437 142.25035 142.55867 142.5331 142.85257 142.90056 143.13574 143.06192 143.08675 143.00078 143.11087 143.09894 143.00844 142.74605 142.52268 142.40053 142.0651 141.58428 141.17377 140.01309 139.2131 138.25679 137.51918 136.66504 135.62023 134.45999 133.42923 132.08951 130.53874 129.18268 127.78352 126.23096 124.635186 122.887146 121.01039 119.13168 117.271256 115.334275 113.49434 111.619866 109.363556 107.35942 105.25255 103.30185 101.15186 97.88214 95.54252 93.94799 91.989495 90.031975 88.26693 86.2789 84.0587 82.51649 80.35614 78.69143 75.64942 74.77789 72.85038 70.10905 69.269196 67.0722 66.15044 64.95172 63.63688 62.663205 62.695374 61.68951 61.2542 61.874287 61.744553 61.593445 61.67154 61.473835 61.7315 61.702362 61.577763 61.598965 61.624955 62.070698 62.210827 62.46733 62.769425 63.170617 63.475777 63.675663 63.89973 61.61715 65.542565 64.87917 64.39512 64.76417 65.04842 65.63639 65.49318 66.1996 66.438965 66.88895 66.70847 67.16336 67.50358 68.0414 68.52837 68.859375 69.27073 70.29262 70.81325 71.14245 71.05521 71.415665 71.74403 72.011 72.05671 72.293755 72.474686 73.45291 73.88012 73.71815 73.900215 73.97336 73.974175 74.22281 74.37767 74.45096 74.60638 74.69099 75.10627 75.13398 75.39282 75.55768 75.97757 76.02099 76.23057 76.68967 76.79627 77.012596 77.39219 77.64391 78.14596 78.510826 78.73997 78.91185 79.31292 79.59921 79.81206 79.99798 80.5426 80.80245 81.25081 81.34768 81.68029 82.039696 82.39098 82.45208 82.814965 82.880135 83.52251 83.78416 84.108635 84.454506 84.78691 85.10222 85.42258 85.66724 85.88407 86.19533 86.36568 86.56494 86.86566 87.10948 87.35178 87.67188 87.79013 87.98262 88.29366 88.58992 88.77296 89.12063 89.39323 89.57069 89.86506 90.11342 90.3799 90.58978 90.88868 91.0087 91.40651 91.62163 91.786316 91.96921 92.21311 92.39576 92.59746 92.76361 93.02949 93.17275 93.35775 93.530175 93.653565 93.8823 94.05129 94.25852 94.281876 94.51253 94.66477 94.85974 95.04767 95.10483 95.35928 95.39567 95.37217 95.72538 95.80982 95.93142 96.12616 96.24409 96.36114 96.46387 96.50588 96.64628 96.78401 96.85417 97.01198 97.03185))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-103.60902 -103.631966 -103.63863 -103.64635 -103.64824 -103.618164 -103.66723 -103.70467 -103.694886 -103.76975 -103.857 -103.840035 -103.859505 -103.91734 -104.001854 -104.05937 -104.09511 -104.15155 -104.203896 -104.26958 -104.32435 -104.36605 -104.42635 -104.50043 -104.570366 -104.77273 -104.83499 -104.90914 -105.01746 -105.18024 -105.234406 -105.38644 -105.52937 -105.67888 -105.82878 -106.032074 -106.08653 -106.344605 -106.53412 -106.64969 -106.90274 -107.1059 -107.27047 -107.47614 -107.64619 -107.933625 -108.13906 -108.37503 -108.551545 -108.82132 -109.043885 -109.29492 -109.64001 -109.867424 -110.2555 -110.57291 -110.84628 -111.21906 -111.605355 -112.053154 -112.514824 -112.867066 -113.39482 -113.83033 -114.36082 -114.795845 -115.30554 -115.81085 -116.38377 -116.895066 -117.42983 -118.04961 -118.66009 -119.32285 -119.84938 -120.538285 -121.2467 -121.960305 -122.671425 -123.405 -124.22686 -125.01296 -125.77579 -126.546295 -127.395615 -128.17685 -129.07942 -129.9489 -130.85416 -131.6966 -132.60367 -133.54129 -134.44678 -135.44818 -136.29056 -137.2618 -138.1386 -139.045 -139.89579 -140.81253 -141.47374 -142.24605 -143.0871 -143.83058 -144.46347 -145.10009 -145.69203 -146.10457 -146.58716 -147.09946 -147.42021 -147.65644 -147.48847 -147.6055 -147.45034 -147.40528 -147.25962 -147.24512 -147.0015 -146.58307 -146.31714 -146.06702 -145.49817 -145.04819 -144.58324 -143.99117 -143.3631 -142.73693 -141.54447 -140.78768 -139.91236 -139.30301 -138.15448 -137.1275 -136.37038 -135.9726 -135.05619 -135.04402 -134.24813 -133.30828 -132.59214 -131.80196 -130.9405 -130.19812 -129.32302 -128.39176 -127.61516 -126.660225 -125.64236 -124.9205 -123.74611 -122.88465 -121.73945 -120.742165 -119.68812 -118.47042 -117.12856 -115.76642 -114.59473 -113.03861 -111.913246 -110.601555 -109.33242 -107.909096 -105.78482 -104.4705 -102.972275 -101.61185 -100.10106 -98.78417 -97.09091 -95.64505 -94.0955 -92.603455 -91.17845 -89.326775 -87.93222 -86.44569 -85.122666 -83.849915 -82.60906 -81.20964 -80.67975 -78.84854 -78.12898 -77.07571 -75.71639 -75.209656 -74.54597 -73.56037 -72.69753 -72.43745 -71.422066 -71.01541 -70.38699 -70.161965 -69.111595 -69.23122 -68.3031 -67.9358 -67.6981 -67.12217 -66.5276 -66.48076 -65.798806 -65.62653 -65.204476 -64.86605 -64.63904 -64.31697 -64.073845 -63.87712)) (quote (-10.720292 -10.741917 -10.722183 -10.730704 -10.703548 -10.721984 -10.720531 -10.725649 -10.746173 -10.727604 -10.7204 -10.730821 -10.759422 -10.724544 -10.736929 -10.717101 -10.723224 -10.700882 -10.698235 -10.685929 -10.659247 -10.65837 -10.649714 -10.643884 -10.644653 -10.603447 -10.619346 -10.623721 -10.613834 -10.593939 -10.597099 -10.591128 -10.584394 -10.593762 -10.611266 -10.573701 -10.6092205 -10.611804 -10.636157 -10.671153 -10.677531 -10.737426 -10.791272 -10.838727 -10.885176 -10.947157 -11.019554 -11.086024 -11.136506 -11.234002 -11.300322 -11.398234 -11.47225 -11.577177 -11.658474 -11.793055 -11.904007 -12.013315 -12.104023 -12.229268 -12.32233 -12.475816 -12.625828 -12.741325 -12.859085 -12.999252 -13.114203 -13.2560835 -13.354302 -13.45989 -13.618298 -13.795225 -13.907542 -14.079269 -14.247756 -14.3694105 -14.542809 -14.751037 -14.899526 -15.125101 -15.358032 -15.54097 -15.728242 -15.942395 -16.17455 -16.369469 -16.57911 -16.836676 -17.062729 -17.322436 -17.560309 -17.8137 -18.139384 -18.426136 -18.751542 -19.094857 -19.476075 -19.866368 -20.18896 -20.554854 -20.9567 -21.129326 -21.569005 -21.95554 -22.451987 -22.936329 -23.384768 -23.896235 -24.436804 -24.98117 -25.51259 -26.125723 -26.75964 -27.394509 -28.066428 -28.75365 -29.430115 -30.053015 -30.776108 -31.47235 -32.19471 -32.910546 -33.676964 -34.402504 -35.125836 -35.890145 -36.61749 -37.455487 -38.224713 -39.0338 -39.825478 -40.53169 -40.94695 -42.243283 -42.974186 -43.090863 -43.861168 -44.850373 -45.620343 -46.42395 -47.065857 -47.738903 -48.47269 -49.097756 -49.80474 -50.514695 -51.18931 -51.86624 -52.54962 -53.058167 -53.8159 -54.327038 -55.08643 -55.60244 -56.178536 -56.772004 -57.40138 -57.962197 -58.490086 -58.997723 -59.52235 -60.012024 -60.484356 -61.140614 -61.619084 -61.770127 -62.388745 -62.736847 -63.11018 -63.396248 -63.71127 -63.988736 -64.23501 -64.48025 -64.69227 -64.8573 -65.05373 -65.20991 -65.32749 -65.44285 -65.53615 -65.53436 -65.59562 -65.66126 -65.598145 -65.62257 -65.71723 -65.6195 -65.66746 -65.58718 -65.70845 -65.58622 -65.447876 -65.42271 -65.35376 -65.362725 -65.15956 -65.213425 -65.00252 -64.94308 -64.905136 -64.760666 -64.58341 -64.52269 -64.518 -64.361016 -64.28965 -64.15556 -64.04841 -63.952324 -63.858975 -63.747216)) (quote (97.03185 97.24629 97.33858 97.43898 97.75792 97.63517 97.76571 97.89162 98.077484 98.17799 98.37174 98.43798 98.5133 98.727906 98.87742 99.063126 99.19924 99.341095 99.50207 99.53926 99.638 99.78218 99.83909 99.99514 100.11131 100.368004 100.52198 100.54302 100.73591 100.87282 100.98741 101.28045 101.30934 101.49961 101.553536 101.7686 101.92896 102.12131 102.31422 102.495186 102.766686 102.965065 103.33825 103.41776 103.63798 103.854836 103.98866 104.12824 104.112015 104.17765 104.22815 104.40888 104.55606 104.6676 104.887215 105.02023 105.1308 105.43678 105.714424 105.93729 106.09384 106.23406 106.34953 106.22487 106.1956 105.95989 105.69428 105.35332 104.96031 104.48352 103.958245 103.59693 102.97923 102.572365 101.887925 101.50886 100.917435 100.49486 99.891136 99.31285 98.749245 98.18839 97.35533 96.52366 95.72133 94.41929 93.28394 92.07128 90.73372 89.23873 87.70526 86.349396 84.72517 83.74862 82.7062 81.79283 80.86305 79.899025 78.76503 77.80656 76.69304 75.22568 74.46826 73.71842 72.77505 72.11782 71.3667 70.181595 69.219475 68.397446 67.59652 66.887474 65.03156 64.190056 62.389965 61.48298 60.42908 59.662697 58.611367 57.486626 56.592534 54.1864 55.063153 54.077366 51.652218 50.538853 49.788727 49.103398 52.627453 52.31082 51.51427 50.853146 46.568005 49.93623 50.05128 45.943154 45.73948 44.66927 44.538105 44.383423 44.694874 44.70628 44.75934 44.96423 45.114178 45.12254 45.313336 45.528416 45.712918 46.027165 46.223687 46.49711 46.36883 46.594445 46.46301 46.53533 46.547383 45.944615 45.991364 46.326397 46.09213 45.982003 45.993306 45.228264 45.40226 46.20627 45.74867 45.65397 46.042805 46.158245 46.51288 46.990277 47.263184 47.590554 48.12709 48.036522 48.380074 49.208573 49.877472 50.539223 51.241486 51.964966 51.60604 53.255406 53.393494 53.93895 54.782677 54.97224 54.96985 55.68451 55.968617 55.97716 56.99786 57.16969 57.32522 57.15759 57.771794 57.163002 57.932827 57.536602 57.461945 57.290223 57.5591 57.00877 56.362816 56.059464 55.918297 55.457154 55.04144 54.856247 54.47216 54.415207)) (quote (3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3.198 3.204 3.208 3.214 3.218 3.224 3.228 3.234 3.238 3.244 3.248 3.254 3.258 3.262 3.268 3.274 3.278 3.284 3.288 3.294 3.298 3.304 3.308 3.314 3.318 3.324 3.328 3.332 3.338 3.344 3.348 3.354 3.358 3.364 3.364 3.374 3.378 3.384 3.388 3.392 3.398 3.404 3.408 3.414 3.418 3.424 3.424 3.434 3.438 3.444 3.448 3.454 3.458 3.464 3.468 3.474 3.478 3.484 3.488 3.494 3.498 3.504 3.508 3.514 3.518 3.524 3.528 3.533 3.538 3.544 3.548 3.554 3.558 3.564 3.568 3.574 3.578 3.584 3.588 3.594 3.598 3.604 3.608 3.614 3.618 3.624 3.628 3.634 3.638 3.644 3.648 3.654 3.658 3.664 3.668 3.674 3.678 3.684 3.688 3.692 3.698 3.704 3.708 3.714 3.718 3.724 3.724 3.734 3.738 3.744 3.748 3.754 3.758 3.762 3.768 3.774 3.778 3.784 3.788 3.796 3.796 3.804 3.808 3.814 3.818 3.824 3.828 3.832 3.838 3.844 3.848 3.854 3.858 3.866 3.866 3.874 3.878 3.884 3.888 3.894 3.898 3.904 3.908 3.914 3.918 3.924 3.928 3.934 3.938 3.944 3.948 3.954 3.958 3.964 3.964 3.964 3.978 3.984 3.988 3.994 3.998 3.998 3.998 4.014 4.018 4.024 4.028 4.033 4.038 4.044 4.048 4.054 4.058 4.064 4.064 4.074 4.078 4.084 4.088 4.094 4.098 4.104 4.108 4.114 4.118 4.124 4.128 4.134 4.138 4.138 4.148 4.154 4.158 4.164 4.168 4.172 4.173 4.184 4.188 4.192 4.198 4.204 4.206 4.214 4.218 4.226 4.226 4.234 4.238 4.24 4.248 4.254)) (setf (z-points newobj) (list 97.03185 97.24629 97.33858 97.43898 97.75792 97.63517 97.76571 97.89162 98.077484 98.17799 98.37174 98.43798 98.5133 98.727906 98.87742 99.063126 99.19924 99.341095 99.50207 99.53926 99.638 99.78218 99.83909 99.99514 100.11131 100.368004 100.52198 100.54302 100.73591 100.87282 100.98741 101.28045 101.30934 101.49961 101.553536 101.7686 101.92896 102.12131 102.31422 102.495186 102.766686 102.965065 103.33825 103.41776 103.63798 103.854836 103.98866 104.12824 104.112015 104.17765 104.22815 104.40888 104.55606 104.6676 104.887215 105.02023 105.1308 105.43678 105.714424 105.93729 106.09384 106.23406 106.34953 106.22487 106.1956 105.95989 105.69428 105.35332 104.96031 104.48352 103.958245 103.59693 102.97923 102.572365 101.887925 101.50886 100.917435 100.49486 99.891136 99.31285 98.749245 98.18839 97.35533 96.52366 95.72133 94.41929 93.28394 92.07128 90.73372 89.23873 87.70526 86.349396 84.72517 83.74862 82.7062 81.79283 80.86305 79.899025 78.76503 77.80656 76.69304 75.22568 74.46826 73.71842 72.77505 72.11782 71.3667 70.181595 69.219475 68.397446 67.59652 66.887474 65.03156 64.190056 62.389965 61.48298 60.42908 59.662697 58.611367 57.486626 56.592534 54.1864 55.063153 54.077366 51.652218 50.538853 49.788727 49.103398 52.627453 52.31082 51.51427 50.853146 46.568005 49.93623 50.05128 45.943154 45.73948 44.66927 44.538105 44.383423 44.694874 44.70628 44.75934 44.96423 45.114178 45.12254 45.313336 45.528416 45.712918 46.027165 46.223687 46.49711 46.36883 46.594445 46.46301 46.53533 46.547383 45.944615 45.991364 46.326397 46.09213 45.982003 45.993306 45.228264 45.40226 46.20627 45.74867 45.65397 46.042805 46.158245 46.51288 46.990277 47.263184 47.590554 48.12709 48.036522 48.380074 49.208573 49.877472 50.539223 51.241486 51.964966 51.60604 53.255406 53.393494 53.93895 54.782677 54.97224 54.96985 55.68451 55.968617 55.97716 56.99786 57.16969 57.32522 57.15759 57.771794 57.163002 57.932827 57.536602 57.461945 57.290223 57.5591 57.00877 56.362816 56.059464 55.918297 55.457154 55.04144 54.856247 54.47216 54.415207))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-63.87712 -63.6286 -63.55627 -63.391716 -63.224053 -63.059113 -62.922013 -62.77313 -62.7742 -62.732605 -62.73089 -62.625264 -62.72802 -62.774968 -62.91923 -62.97159 -63.153447 -63.30578 -63.434483 -63.695435 -63.99348 -64.340416 -64.77608 -65.38155 -66.07711 -66.869896 -67.86526 -68.94823 -70.19792 -71.605576 -73.24517 -74.983 -76.8446 -78.82861 -81.10251 -83.377495 -85.94604 -88.486275 -91.16328 -93.85061 -96.69723 -99.59635 -102.59602 -105.47379 -108.344185 -111.1904 -113.89028 -116.567406 -119.1353 -121.5916 -123.94433 -126.13327 -128.22193 -130.15345 -132.11022 -133.64766 -134.98097 -136.2947 -137.39754 -138.39966 -138.89554 -140.15433 -140.47365 -141.52495 -141.62961 -142.17296 -142.6022 -143.37354 -143.71826 -144.00135 -144.24085 -144.02727 -144.56342 -144.75734 -144.87487 -145.03069 -145.15065 -145.21692 -145.30083 -144.89809 -145.36827 -145.10002 -145.39885 -144.94998 -145.31572 -145.31302 -145.17302 -145.09375 -144.95331 -144.72542 -144.56893 -143.983 -143.32627 -143.61569 -143.65602 -143.41259 -143.2031 -142.38549 -142.44234 -141.96685 -141.23374 -141.01163 -140.1452 -139.55013 -138.88405 -138.08968 -137.41295 -136.44948 -135.46588 -134.42205 -133.27118 -131.92766 -130.56298 -129.17426 -127.60897 -125.89534 -124.16797 -122.241616 -120.28308 -118.15973 -116.009636 -113.63465 -111.20842 -108.683586 -106.05985 -103.2407 -100.40018 -97.57087 -94.45657 -91.4635 -88.25006 -85.06461 -81.89723 -78.781746 -75.569146 -72.411515 -69.29349 -66.209305 -63.486275 -60.675713 -58.01771 -55.418446 -52.962365 -50.635437 -48.38125 -46.209774 -44.015477 -42.06406 -40.209282 -38.33963 -36.638096 -35.152543 -33.53209 -31.961783 -30.691903 -29.286541 -28.023098 -26.818856 -25.7209 -24.89663 -23.858366 -23.020518 -22.093028 -21.256007 -20.383162 -19.499463 -18.779524 -18.026276 -17.239874 -16.509524 -15.838785 -15.172574 -13.913138 -13.364348 -12.644169 -12.219041 -11.741999 -11.167054 -10.6677885 -10.107702 -9.65782 -9.196621 -8.719757 -8.276497 -7.8413773 -7.400566 -7.066833 -6.557128 -6.194605 -5.829549 -5.547886 -5.288187 -5.007561 -4.7838225 -4.5271163 -4.346333 -4.20089 -3.9556918 -3.831255 -3.7038186 -3.6080478 -3.5531507 -3.511015 -3.4663227 -3.3868714 -3.3095186 -3.3244198)) (quote (-63.747216 -63.662793 -63.57909 -63.488644 -63.34692 -63.29449 -63.20755 -63.096566 -63.056874 -62.953476 -62.9629 -62.88397 -62.895806 -62.870106 -62.813084 -62.873848 -62.881817 -62.88693 -62.92068 -62.92603 -63.00882 -63.01509 -63.10519 -63.183087 -63.273194 -63.38102 -63.469078 -63.612786 -63.70398 -63.816643 -63.910145 -64.04255 -64.13946 -64.21319 -64.23521 -64.26423 -64.222 -64.15973 -64.10833 -63.951065 -63.733418 -63.45072 -63.103253 -62.695164 -62.193074 -61.650517 -61.058575 -60.322495 -59.502613 -58.66942 -57.69556 -56.70687 -55.685475 -54.663437 -53.72412 -53.039315 -51.959187 -51.023453 -50.18468 -49.48446 -48.667534 -48.01787 -47.362488 -46.793766 -46.266068 -45.737286 -45.3541 -45.003636 -44.635212 -44.38638 -44.203217 -43.980362 -43.804417 -43.69579 -43.52475 -43.439106 -43.37869 -43.301613 -43.32747 -43.23548 -43.189553 -43.14867 -43.17304 -43.145657 -43.38565 -43.35626 -43.52852 -43.665215 -43.83461 -44.091465 -44.235947 -44.31084 -44.491436 -44.722283 -45.33818 -45.658726 -45.989293 -46.265294 -46.538723 -46.99736 -47.556103 -48.05493 -48.68804 -49.263073 -49.89687 -50.613575 -51.372796 -52.14205 -52.877556 -53.669335 -54.422593 -55.266694 -56.05589 -56.88323 -57.64989 -58.435124 -59.2468 -60.050938 -60.799958 -61.55382 -62.179474 -62.873246 -63.5182 -64.09865 -64.52274 -65.02002 -65.480446 -65.870255 -66.24107 -66.49209 -66.74441 -67.098656 -67.09469 -67.22042 -67.14837 -67.11645 -66.99925 -66.8092 -66.6423 -66.29684 -66.105774 -65.7908 -65.45207 -65.10293 -64.69719 -64.2742 -63.817025 -63.37045 -62.92508 -62.439213 -61.96027 -61.574368 -60.933926 -60.317337 -59.92834 -59.515843 -59.047898 -58.594613 -58.137764 -57.626278 -57.209355 -56.781296 -56.346653 -55.970044 -55.628033 -55.307038 -54.969757 -54.658337 -54.36862 -54.070824 -53.851635 -53.605675 -53.278038 -53.11411 -52.912487 -52.800835 -52.727108 -52.549756 -52.503815 -52.405735 -52.44411 -52.439454 -52.477486 -52.544514 -52.617524 -52.731163 -52.88174 -53.03136 -53.209893 -53.396573 -53.6483 -53.88922 -54.187455 -54.466294 -54.78038 -55.147805 -55.541493 -55.922257 -56.367684 -56.819725 -57.27175 -57.809445 -58.32593 -58.8869 -59.342617 -59.765194 -59.944397)) (quote (54.415207 54.037068 53.867497 53.771756 53.785168 53.571354 53.567513 53.498673 53.31974 53.311985 53.18898 53.082375 52.76263 52.455677 52.17728 51.55843 51.08882 50.429154 49.76779 48.929566 47.995903 47.219384 46.41601 45.481156 44.463704 43.561707 42.58389 41.653897 40.88272 39.90275 39.40329 38.649235 37.69331 36.762448 35.4468 34.21314 32.88323 31.084647 29.382557 27.307003 25.08768 22.844229 20.324307 17.941239 15.377579 13.125749 11.560729 10.175933 8.875332 8.066031 7.62459 7.7770963 7.8349877 8.016024 8.815826 10.374819 10.424251 10.248692 10.251511 10.09364 10.871929 9.346006 10.191225 8.863483 9.780586 9.555668 9.331059 7.5773864 7.2563386 6.9111686 6.169937 7.013146 5.436212 4.844434 4.3963766 4.01546 3.7096718 3.5699282 3.5492077 4.637226 3.18967 5.243541 3.2770655 4.5906973 3.1027384 3.0038145 2.8384114 2.7342749 2.6496868 2.7872653 2.413156 0.9482126 3.6466308 1.1513566 2.112357 2.3267663 2.2580145 1.0098201 1.4600033 1.4749265 1.3405647 1.5893262 1.7786669 1.542692 1.525569 1.3547411 1.1506856 1.3579233 1.2806459 1.7044714 1.7856566 2.2654226 2.8027568 3.192606 3.9345968 4.8645606 5.811724 6.981885 8.349977 9.823559 11.306263 13.27242 15.0899725 17.238272 18.802433 21.032412 23.193114 25.908963 28.556796 31.191674 33.946534 37.42338 39.341633 42.519165 44.574707 47.259648 49.98954 52.954068 55.1009 57.977234 60.85447 63.176396 65.43564 67.56383 69.72752 71.59359 73.41967 75.094956 76.75846 78.29894 79.64372 80.878296 82.00548 83.2415 84.43419 85.69656 86.83465 87.86526 88.84934 90.38906 91.36401 92.30601 93.294136 94.26842 95.15979 95.920426 96.62153 97.42947 98.157006 97.874794 98.36213 98.94401 100.252594 100.71764 101.37073 101.85528 102.12364 102.57987 102.880036 103.28964 103.54805 103.82096 104.160034 104.47745 104.67395 104.84927 105.09615 105.42234 105.52025 105.599556 105.663895 105.59741 105.715805 105.57566 105.64133 105.52631 105.61284 105.65512 105.58809 105.53475 105.36705 105.367676 105.16925 104.96662 103.56396 103.03263 102.887146)) (quote (4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4.254 4.258 4.264 4.268 4.274 4.278 4.284 4.288 4.296 4.296 4.304 4.308 4.314 4.318 4.324 4.328 4.334 4.338 4.342 4.348 4.354 4.358 4.366 4.366 4.374 4.378 4.384 4.388 4.394 4.398 4.404 4.408 4.414 4.418 4.424 4.424 4.434 4.438 4.442 4.448 4.454 4.458 4.464 4.468 4.474 4.478 4.484 4.488 4.492 4.498 4.504 4.508 4.514 4.518 4.528 4.528 4.534 4.538 4.542 4.548 4.554 4.558 4.562 4.568 4.574 4.578 4.584 4.588 4.594 4.598 4.604 4.608 4.614 4.618 4.624 4.628 4.632 4.638 4.644 4.648 4.654 4.658 4.664 4.668 4.674 4.678 4.684 4.688 4.694 4.698 4.704 4.708 4.714 4.718 4.726 4.726 4.734 4.738 4.744 4.748 4.754 4.758 4.764 4.768 4.774 4.778 4.784 4.788 4.794 4.798 4.804 4.808 4.814 4.818 4.824 4.828 4.834 4.838 4.844 4.848 4.854 4.858 4.864 4.864 4.874 4.878 4.884 4.888 4.894 4.9 4.904 4.908 4.914 4.918 4.924 4.928 4.934 4.938 4.944 4.948 4.954 4.958 4.964 4.968 4.974 4.978 4.984 4.988 4.992 4.998 5.004 5.008 5.014 5.018 5.024 5.028 5.028 5.038 5.044 5.048 5.054 5.058 5.062 5.068 5.074 5.078 5.084 5.088 5.11 5.11 5.11 5.11 5.11 5.118 5.124 5.128 5.132 5.138 5.144 5.148 5.154 5.16 5.166 5.166 5.174 5.178 5.184 5.188 5.194 5.198 5.202 5.208 5.214 5.218 5.224 5.224 5.23 5.23 5.23 5.248 5.254 5.258 5.264 5.277 5.277 5.277 5.279)) (setf (z-points newobj) (list 54.415207 54.037068 53.867497 53.771756 53.785168 53.571354 53.567513 53.498673 53.31974 53.311985 53.18898 53.082375 52.76263 52.455677 52.17728 51.55843 51.08882 50.429154 49.76779 48.929566 47.995903 47.219384 46.41601 45.481156 44.463704 43.561707 42.58389 41.653897 40.88272 39.90275 39.40329 38.649235 37.69331 36.762448 35.4468 34.21314 32.88323 31.084647 29.382557 27.307003 25.08768 22.844229 20.324307 17.941239 15.377579 13.125749 11.560729 10.175933 8.875332 8.066031 7.62459 7.7770963 7.8349877 8.016024 8.815826 10.374819 10.424251 10.248692 10.251511 10.09364 10.871929 9.346006 10.191225 8.863483 9.780586 9.555668 9.331059 7.5773864 7.2563386 6.9111686 6.169937 7.013146 5.436212 4.844434 4.3963766 4.01546 3.7096718 3.5699282 3.5492077 4.637226 3.18967 5.243541 3.2770655 4.5906973 3.1027384 3.0038145 2.8384114 2.7342749 2.6496868 2.7872653 2.413156 0.9482126 3.6466308 1.1513566 2.112357 2.3267663 2.2580145 1.0098201 1.4600033 1.4749265 1.3405647 1.5893262 1.7786669 1.542692 1.525569 1.3547411 1.1506856 1.3579233 1.2806459 1.7044714 1.7856566 2.2654226 2.8027568 3.192606 3.9345968 4.8645606 5.811724 6.981885 8.349977 9.823559 11.306263 13.27242 15.0899725 17.238272 18.802433 21.032412 23.193114 25.908963 28.556796 31.191674 33.946534 37.42338 39.341633 42.519165 44.574707 47.259648 49.98954 52.954068 55.1009 57.977234 60.85447 63.176396 65.43564 67.56383 69.72752 71.59359 73.41967 75.094956 76.75846 78.29894 79.64372 80.878296 82.00548 83.2415 84.43419 85.69656 86.83465 87.86526 88.84934 90.38906 91.36401 92.30601 93.294136 94.26842 95.15979 95.920426 96.62153 97.42947 98.157006 97.874794 98.36213 98.94401 100.252594 100.71764 101.37073 101.85528 102.12364 102.57987 102.880036 103.28964 103.54805 103.82096 104.160034 104.47745 104.67395 104.84927 105.09615 105.42234 105.52025 105.599556 105.663895 105.59741 105.715805 105.57566 105.64133 105.52631 105.61284 105.65512 105.58809 105.53475 105.36705 105.367676 105.16925 104.96662 103.56396 103.03263 102.887146))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-3.3244198 -3.3616762 -3.4983774 -3.6045263 -3.9466422 -4.0524855 -4.985541 -5.0593295 -4.95408 -5.237839 -5.575493 -6.10884 -6.8128405 -7.5638127 -8.424415 -9.595422 -11.033562 -12.547382 -14.700029 -17.221957 -20.787404 -25.32815 -31.182318 -39.985016 -53.031525 -70.926895 -92.28484 -112.32464 -127.7635 -138.20285 -145.13404 -149.81255 -153.18323 -155.7022 -157.4339 -158.8995 -159.45978 -160.22063 -160.83269 -161.335 -161.6527 -161.96802 -162.3336 -162.50365 -162.76071 -162.97435 -163.13309 -162.93578 -163.38024 -163.50908 -163.62952 -163.67687 -163.75824 -163.79004 -163.91649 -163.92484 -163.95684 -163.97127 -164.03397 -164.05638 -164.03839 -163.99727 -163.98305 -163.92761 -163.89588 -163.81708 -163.65895 -163.67053 -163.66039 -163.51105 -163.4897 -163.41539 -163.34003 -163.2697 -163.2476 -163.1996 -163.09772 -163.05027 -162.99547 -162.90468 -162.90238 -162.89994 -162.85654 -162.87506 -162.86362 -162.86577 -162.88556 -162.88384 -162.90412 -162.90563 -162.96855 -162.97893 -162.97219 -162.99738 -162.97875 -163.01149 -163.03473 -163.14478 -163.17144 -163.17012 -163.1974 -163.14354 -163.22589 -163.25112 -163.25104 -163.28192 -163.30924 -163.34307 -163.39167 -163.48966 -163.51903 -163.56934 -163.6088 -163.63753 -163.64261 -163.6872 -163.7147 -163.73647 -163.76084 -163.76342 -163.82688 -163.92348 -163.87947 -163.95815 -163.98688 -163.99857 -164.06938 -164.03327 -164.0523 -164.07646 -164.10497 -164.15099 -164.10758 -164.13289 -164.14778 -164.23632 -164.22174 -164.21675 -164.19506 -164.21782 -164.25656 -164.26132 -164.25638 -164.30411 -164.28354 -164.27216 -164.26036 -164.29251 -164.30443 -164.34667 -164.35585 -164.41355 -164.43413 -164.42168 -164.46863 -164.45215 -164.4853 -164.53096 -164.58329 -164.61641 -164.65904 -164.7141 -164.73328)) (quote (-59.944397 -60.39244 -61.071583 -61.766755 -62.677857 -63.45941 -64.406 -65.214875 -65.95338 -66.87747 -67.81333 -68.82636 -69.93468 -71.05113 -72.20367 -73.45353 -74.66555 -75.94316 -77.27788 -78.60729 -79.98857 -81.30867 -82.610955 -83.79889 -84.84991 -85.48563 -85.62541 -85.13719 -84.17157 -82.94466 -81.48088 -80.05669 -78.57719 -77.20417 -75.83918 -74.58674 -73.391785 -72.37851 -71.32076 -70.3612 -69.27764 -68.330956 -67.63461 -66.78849 -66.13171 -65.48799 -64.953804 -64.29099 -63.926835 -63.53927 -63.100937 -62.739705 -62.47885 -62.198948 -62.01749 -61.787018 -61.606358 -61.465474 -61.304097 -61.166668 -61.07496 -60.93844 -60.83928 -60.761658 -60.651143 -60.58284 -60.489518 -60.41699 -60.277646 -60.237305 -60.1087 -60.056897 -59.986767 -59.89915 -59.818917 -59.654583 -59.596405 -59.50258 -59.501103 -59.334885 -59.250126 -59.202835 -59.14156 -59.07207 -58.94979 -58.87933 -58.84756 -58.77872 -58.70785 -58.621846 -58.56433 -58.4963 -58.383957 -58.351998 -58.289704 -58.285424 -58.194535 -58.076188 -58.07353 -58.02392 -58.03825 -58.03323 -57.976357 -57.93247 -57.887864 -57.900963 -57.89898 -57.910874 -57.894432 -57.912243 -57.807366 -57.909542 -57.927037 -57.9288 -57.92035 -57.97317 -57.961823 -57.96875 -58.030175 -58.083435 -58.110463 -58.071953 -58.069188 -58.181656 -58.16579 -58.180874 -58.130806 -58.23019 -58.261208 -58.231743 -58.271996 -58.315888 -58.320427 -58.359856 -58.367718 -58.325577 -58.397503 -58.464253 -58.49661 -58.438076 -58.50986 -58.525616 -58.525895 -58.512436 -58.54769 -58.55982 -58.59054 -58.611367 -58.62271 -58.620175 -58.64227 -58.5957 -58.611538 -58.633534 -58.69929 -58.703827 -58.680706 -58.657898 -58.679966 -58.69542 -58.701115 -58.706547 -58.7489)) (quote (102.887146 102.52339 101.95155 101.26581 100.300675 99.61283 99.27389 98.62952 98.842476 98.1881 97.64064 97.02063 96.505066 96.084114 95.745705 95.286476 94.67301 93.92734 92.58392 90.88118 88.323006 84.545456 79.65086 71.85265 59.59643 42.595166 21.75421 2.6238816 -12.176891 -22.007105 -28.088353 -31.89527 -34.06925 -35.886055 -36.524624 -37.22688 -36.738213 -36.922505 -37.02737 -37.295678 -36.51438 -36.601048 -36.843693 -36.394185 -36.31791 -36.2094 -36.112534 -35.24513 -35.994877 -35.97617 -36.07669 -36.282986 -36.270108 -36.61804 -36.853207 -36.88187 -37.08088 -37.18521 -37.535923 -37.69951 -37.81506 -37.979184 -37.98724 -38.077015 -37.97771 -38.08195 -37.98102 -37.870614 -37.90165 -37.723484 -37.735165 -37.524315 -37.51675 -37.32809 -37.471756 -36.92491 -37.01099 -36.786744 -36.709866 -36.286766 -36.2422 -36.15516 -35.912495 -35.986348 -35.74439 -35.856408 -35.620617 -35.58708 -35.66072 -35.43861 -35.616658 -35.428852 -35.288708 -35.3366 -35.16197 -35.229367 -34.957344 -34.894226 -34.961304 -34.819966 -34.812394 -34.703656 -34.764855 -34.73273 -34.587834 -34.604756 -34.584923 -34.66249 -34.819935 -34.845936 -34.719857 -34.98786 -35.038433 -35.029068 -35.004605 -35.313897 -35.38895 -35.33245 -35.29914 -35.43362 -35.703747 -35.786484 -35.708733 -35.950318 -35.94173 -35.97346 -35.854706 -36.00025 -36.016316 -35.8747 -36.00642 -36.155343 -35.928208 -35.90109 -36.008324 -35.987976 -36.087647 -36.11401 -36.014096 -35.83346 -35.970173 -36.03555 -35.902077 -35.948754 -35.91675 -35.62508 -35.533253 -35.643528 -35.589966 -35.743466 -35.639718 -35.628266 -35.643357 -35.45305 -35.43122 -35.310555 -35.348076 -35.362996 -35.440358 -35.30971 -35.26875 -35.275875 -35.38526)) (quote (5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5.279 5.284 5.288 5.294 5.298 5.298 5.298 5.314 5.318 5.324 5.328 5.332 5.332 5.332 5.348 5.354 5.358 5.364 5.367 5.367 5.377 5.384 5.388 5.394 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.439 5.442 5.448 5.456 5.456 5.464 5.468 5.474 5.478 5.484 5.488 5.492 5.498 5.504 5.508 5.514 5.518 5.526 5.526 5.534 5.538 5.544 5.548 5.554 5.558 5.562 5.568 5.574 5.578 5.584 5.589 5.596 5.596 5.604 5.608 5.614 5.618 5.624 5.628 5.634 5.638 5.643 5.648 5.654 5.658 5.666 5.666 5.674 5.678 5.684 5.688 5.692 5.698 5.704 5.708 5.712 5.718 5.724 5.728 5.734 5.738 5.744 5.749 5.754 5.758 5.764 5.768 5.774 5.778 5.784 5.788 5.794 5.798 5.804 5.808 5.814 5.818 5.824 5.828 5.834 5.838 5.844 5.848 5.854 5.858 5.862 5.868 5.874 5.878 5.882 5.888 5.894 5.898 5.904 5.908 5.914 5.918 5.924 5.928 5.932 5.938 5.944 5.948 5.954 5.958 5.964 5.968 5.974 5.978 5.984 5.988 5.994 5.998 6.004 6.008 6.014 6.018 6.024 6.026 6.034 6.038 6.044 6.048 6.052 6.058 6.064 6.068 6.074 6.078 6.082 6.086)) (setf (z-points newobj) (list 102.887146 102.52339 101.95155 101.26581 100.300675 99.61283 99.27389 98.62952 98.842476 98.1881 97.64064 97.02063 96.505066 96.084114 95.745705 95.286476 94.67301 93.92734 92.58392 90.88118 88.323006 84.545456 79.65086 71.85265 59.59643 42.595166 21.75421 2.6238816 -12.176891 -22.007105 -28.088353 -31.89527 -34.06925 -35.886055 -36.524624 -37.22688 -36.738213 -36.922505 -37.02737 -37.295678 -36.51438 -36.601048 -36.843693 -36.394185 -36.31791 -36.2094 -36.112534 -35.24513 -35.994877 -35.97617 -36.07669 -36.282986 -36.270108 -36.61804 -36.853207 -36.88187 -37.08088 -37.18521 -37.535923 -37.69951 -37.81506 -37.979184 -37.98724 -38.077015 -37.97771 -38.08195 -37.98102 -37.870614 -37.90165 -37.723484 -37.735165 -37.524315 -37.51675 -37.32809 -37.471756 -36.92491 -37.01099 -36.786744 -36.709866 -36.286766 -36.2422 -36.15516 -35.912495 -35.986348 -35.74439 -35.856408 -35.620617 -35.58708 -35.66072 -35.43861 -35.616658 -35.428852 -35.288708 -35.3366 -35.16197 -35.229367 -34.957344 -34.894226 -34.961304 -34.819966 -34.812394 -34.703656 -34.764855 -34.73273 -34.587834 -34.604756 -34.584923 -34.66249 -34.819935 -34.845936 -34.719857 -34.98786 -35.038433 -35.029068 -35.004605 -35.313897 -35.38895 -35.33245 -35.29914 -35.43362 -35.703747 -35.786484 -35.708733 -35.950318 -35.94173 -35.97346 -35.854706 -36.00025 -36.016316 -35.8747 -36.00642 -36.155343 -35.928208 -35.90109 -36.008324 -35.987976 -36.087647 -36.11401 -36.014096 -35.83346 -35.970173 -36.03555 -35.902077 -35.948754 -35.91675 -35.62508 -35.533253 -35.643528 -35.589966 -35.743466 -35.639718 -35.628266 -35.643357 -35.45305 -35.43122 -35.310555 -35.348076 -35.362996 -35.440358 -35.30971 -35.26875 -35.275875 -35.38526))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-164.73328 -164.74288 -164.7501 -164.7718 -164.83513 -164.8706 -164.9161 -164.939 -164.98326 -165.00048 -165.06061 -165.08254 -165.13799 -165.15346 -165.10742 -165.14328 -165.21376 -164.94783 -165.22154 -165.2499 -165.28002 -165.19243 -165.26467 -165.10456 -165.04901 -164.96779 -164.96538 -164.89408 -164.74808 -164.65921 -164.48812 -164.41564 -164.31798 -164.20368 -164.04538 -163.93642 -163.82868 -163.71833 -163.59009 -163.43805 -163.30043 -163.14014 -162.98224 -162.78726 -162.62982 -162.42263 -162.22249 -162.00482 -161.75424 -161.57308 -161.33841 -160.98763 -160.79299 -160.43094 -160.13636 -159.71302 -159.40978 -159.07572 -158.51827 -158.28044 -157.89855 -157.3423 -157.09857 -156.50583 -155.94892 -155.55663 -155.24623 -154.67505 -154.15349 -153.6985 -153.31089 -152.8519 -152.31809 -151.73726 -151.33444 -150.78699 -150.23123 -149.70438 -149.16501 -148.63858 -148.11734 -147.23857 -146.67157 -146.05344 -145.4963 -144.92548 -144.32003 -143.71898 -143.1357 -142.63149 -141.97965 -141.46999 -140.86809 -140.31256 -140.10375 -139.48633 -138.95357 -138.43604 -137.92276 -137.43366 -136.87409 -136.47859 -136.04602 -135.6744 -135.40085 -134.73583 -134.57222 -134.15515 -133.71773 -133.28754 -132.82222 -132.46791 -132.04613 -131.66919 -131.17621 -130.74083 -130.3497 -129.96335 -129.58551 -129.22777 -128.78249 -128.30139 -128.02867 -127.682045 -127.2302 -126.83902 -126.61324 -126.16625 -125.86568 -125.41501 -125.1036 -124.78766 -124.6089 -124.39096 -124.178475 -123.93052 -123.61982 -123.5522 -122.65476 -122.51607 -121.890656 -121.9967 -121.792786 -121.71768 -121.48377 -121.405205 -121.184845 -120.926094 -120.5559 -120.22592 -119.80994 -119.53815 -118.9838 -118.37659 -117.9872 -117.562775 -116.77839 -116.288994 -115.74752 -114.902405 -114.26621 -113.46295 -112.76026 -111.69343 -110.89016 -109.82015 -108.82449 -107.5133 -106.47323 -105.46554 -103.98585 -102.342354 -100.78128 -98.792855 -96.38339 -94.00934 -91.44997 -89.12211 -85.89177 -82.64202 -80.95603 -75.81175 -72.04561 -68.01875 -64.03784 -59.726902 -55.070103 -51.274647 -46.205735 -42.340817 -38.343304 -33.853333 -29.754389 -25.74536 -21.738659 -18.814743 -15.016945 -12.213402 -9.580962 -7.119505 -4.8559804 -2.7440656 -1.0049006 0.8905611 2.5325127 4.0962057 5.5272098 6.7806583 8.800577 9.934647 11.013277 11.939433 12.877056 14.411282 16.094803 16.076214 16.5922 18.497704 20.087847 21.219944 23.943959 25.735833 28.503668 32.30952 36.445473 42.23767 47.42578 58.654255 71.114174 83.99433 102.7245 116.88661 129.8722 139.27764 146.22368 151.57973 155.69446 158.69385 161.3433 163.64467 165.36917 166.72129 168.19387 169.4864 171.09029 171.7941 172.74114 173.27634 173.81746 174.2751 175.09732 175.82744 176.52448 176.77625 177.38007 178.01827 178.58893 179.16468 179.6908 -179.74068 -179.0377 -178.42917 -177.69094 -175.7189 -175.06244 -174.32155 -173.57125 -172.81383 -171.95992 -171.19997 -170.35497 -169.47037 -168.66649 -167.85602 -167.2296 -166.41867 -166.57106 -164.76607 -164.06815 -163.25695 -162.52993 -161.58866 -160.77336 -159.97893 -159.08744 -158.17531 -157.45627 -156.61277 -155.68633 -154.80643 -153.94335 -153.06948 -152.16855 -151.24678 -150.33693 -149.58483 -148.8752 -147.84735 -146.87889 -146.11682 -145.34194 -144.43584 -143.83992 -142.86263 -142.14167 -141.34076 -140.4457 -139.52074 -138.41126 -137.6483 -136.86112 -136.0748 -135.31226 -134.52573 -134.017 -133.16512 -132.48375 -131.72432 -131.0822 -129.9201 -129.58452 -129.05327 -128.25243 -127.66679 -126.45396 -126.27416 -125.62405 -124.97629 -124.33574 -123.70277 -122.989785 -122.455796 -121.85133 -121.33313 -120.65387 -120.26881 -119.683655 -119.14352 -118.698685 -118.24162 -117.9191 -117.505875 -117.0687 -116.665985 -116.42401 -116.0609 -115.81902 -115.3913 -114.88897 -114.703064 -114.43807 -113.991455 -113.7315 -113.38141 -113.269745 -112.86377 -112.93195 -112.541016 -112.39448 -111.99894 -112.04845 -111.78246 -111.54125 -111.37463 -111.52062 -111.089066 -111.11744 -111.009056 -110.85763 -110.68472 -110.580086 -110.58563 -110.58411 -110.65446 -110.59277 -110.597245 -110.6052 -110.63113 -110.65401 -110.726296 -110.82852 -110.84773 -110.743 -110.86513 -110.88095 -110.95031 -111.037896 -110.99505 -111.22741 -111.2072 -111.15376 -111.3451 -111.29523 -111.48554 -111.386025 -111.5175 -111.57105 -111.65578 -111.777664 -111.823555 -111.9344 -111.9918 -112.16357 -112.41443 -112.67417 -112.57218 -112.983826 -112.92977 -113.09352 -113.49758 -113.71132 -113.67406 -113.87615 -114.26054 -114.52168 -114.70808 -114.89864 -115.035065 -115.495835 -115.67863 -115.93038 -116.07926 -116.59903 -116.669876 -116.9878 -117.567826 -117.91306 -118.2067 -118.29535 -118.88564 -119.20313 -119.52876 -119.58387 -120.11922 -120.45709 -120.79293 -121.12986 -121.46222 -121.712906 -121.8157 -122.136925 -122.42991 -123.0804 -123.16279 -123.44524 -123.86886 -124.19911 -124.62648 -124.99783 -125.38446 -126.11662 -126.25277 -126.680535 -127.055 -127.4745 -127.89172 -128.51398 -128.62909 -128.94762 -129.5463 -129.95447 -130.09615 -130.70525 -130.85689 -131.4234 -131.60849 -132.18521 -132.63025 -132.82901 -133.25879 -133.57363 -133.85037 -134.10935 -134.28595 -134.54442 -134.75296 -134.8996 -135.14325 -135.19101 -135.30226 -135.45671 -135.55054 -135.63248 -135.74025 -135.6591 -135.8431 -135.85984 -135.89725 -135.98069 -135.9062 -135.99803 -136.15067 -136.16861 -136.21521 -136.17781 -136.19593 -136.13216 -136.13957 -136.18198 -136.16613 -136.04647 -136.07965 -136.10881 -135.99338 -135.99881 -135.83734 -135.76616 -135.57773 -135.58304 -135.56903 -135.40395 -135.39131 -135.32413 -135.15995 -135.1461 -134.94989 -134.82247 -134.75254 -134.59777 -134.49275 -134.53865 -134.42584 -134.37778 -134.18584 -134.18407 -134.01787 -133.9899 -134.0062 -133.97782 -133.91986 -133.84055 -133.86891 -133.84902 -133.80216 -133.75145 -133.8188 -133.75421 -133.99738 -133.95137 -133.91013 -134.06407 -134.11394 -134.16974 -134.2149 -134.43036 -134.47222 -134.58219 -134.7126 -134.83388 -134.93344 -135.02445 -135.1399 -135.26654 -135.31377 -135.51506 -135.82788 -135.81246 -135.90755 -136.16716 -136.2584 -136.30832 -136.45693 -136.57497 -136.73123 -136.86267 -137.02298 -137.1392 -137.1703 -137.3416 -137.50304 -137.65639 -137.69995 -137.83061 -137.8746 -137.90216 -138.03347 -138.10341 -138.14856 -138.30055 -138.38014 -138.41959 -138.43874 -138.60776 -138.64778 -138.66204 -138.78885 -138.80643 -138.82169 -138.87093 -138.91417 -138.96602 -138.93738 -139.0219 -138.98447 -138.97354 -138.9619 -138.96646 -138.91164 -138.79615 -138.73468 -138.75606 -138.66115 -138.55088 -138.51706 -138.40407 -138.33383 -138.26898 -138.22472 -138.1411 -138.13899)) (quote (-58.7489 -58.77007 -58.669674 -58.657917 -58.66035 -58.639954 -58.636475 -58.6149 -58.641968 -58.624974 -58.607514 -58.55521 -58.535668 -58.508366 -58.456723 -58.419903 -58.439106 -58.292504 -58.33555 -58.275063 -58.27592 -58.24552 -58.126954 -58.097027 -58.03994 -57.972607 -57.925423 -57.832238 -57.858178 -57.717904 -57.704434 -57.626427 -57.528523 -57.383088 -57.33703 -57.118798 -57.001465 -56.86642 -56.724358 -56.586377 -56.435067 -56.263363 -56.18581 -56.069245 -55.983868 -55.934754 -55.915474 -55.924305 -55.931378 -55.998978 -56.03295 -56.03539 -56.161972 -56.260804 -56.297554 -56.347996 -56.405926 -56.496796 -56.441372 -56.66053 -56.779206 -56.752243 -57.039494 -56.965954 -57.17766 -57.32888 -57.43466 -57.622193 -57.860573 -58.032818 -58.227353 -58.403214 -58.61476 -59.070218 -58.99113 -59.1706 -59.485856 -59.81831 -59.915356 -60.084328 -60.270668 -60.585438 -60.778138 -60.98008 -61.16471 -61.420685 -61.58582 -61.80581 -62.030884 -62.20955 -62.46733 -62.69751 -62.931378 -63.164456 -63.469105 -63.689392 -63.921364 -64.15978 -64.35065 -64.580506 -64.77637 -65.00314 -65.20206 -65.41365 -65.86432 -65.76554 -66.25235 -66.44324 -66.62291 -66.72599 -66.915306 -67.13066 -67.34121 -67.59641 -67.79714 -68.018715 -68.259415 -68.44881 -68.65761 -68.85283 -69.0527 -69.25238 -69.41824 -69.60448 -69.810074 -70.006096 -70.22327 -70.467865 -70.680046 -70.88368 -71.10307 -71.34878 -71.59893 -71.86781 -72.13833 -72.38456 -72.64925 -72.87803 -72.86173 -73.11664 -73.49485 -73.62386 -73.851036 -74.118615 -74.40898 -74.73508 -74.99321 -75.27061 -75.52434 -75.7975 -76.06855 -76.36466 -76.619515 -76.871346 -77.124855 -77.41998 -77.68213 -77.946396 -78.26885 -78.52454 -78.79935 -79.10996 -79.40542 -79.70187 -80.04147 -80.349655 -80.64824 -80.94112 -81.24595 -81.77735 -82.10778 -82.36765 -82.679756 -82.962235 -83.24477 -83.520516 -83.80967 -84.02599 -84.28108 -84.5353 -83.9557 -84.928925 -85.06842 -85.24183 -85.39454 -85.48471 -85.57614 -85.6474 -85.731224 -85.76297 -85.78152 -85.7836 -85.764824 -85.786606 -85.70662 -85.70284 -85.652275 -85.503975 -85.45366 -85.392716 -85.28665 -85.240136 -85.172325 -85.11928 -85.0584 -85.02964 -85.01517 -85.01202 -85.00101 -85.00843 -85.04325 -85.09754 -85.12756 -85.25442 -85.34981 -85.48697 -85.588196 -85.790406 -85.968346 -86.20452 -86.42171 -86.633766 -86.9034 -87.13864 -87.38712 -87.64383 -87.8953 -88.10997 -88.277336 -88.38899 -88.28971 -88.094666 -87.77486 -87.383316 -86.950554 -86.34291 -85.829926 -85.14559 -84.548416 -83.813965 -83.08471 -82.31284 -81.56545 -80.809365 -79.9656 -79.130936 -78.31838 -77.371666 -76.51261 -75.53997 -74.67946 -73.595375 -72.72141 -71.775215 -70.85828 -69.91742 -68.92855 -68.01309 -67.03113 -66.05316 -65.16643 -64.188614 -63.277867 -62.19603 -61.27555 -60.292504 -59.300507 -58.67562 -57.777974 -56.70287 -55.761555 -54.847657 -53.809666 -52.82943 -51.9233 -50.81146 -49.60265 -48.731827 -47.777806 -46.805912 -45.757805 -44.762753 -43.76598 -42.667538 -41.595513 -40.59808 -39.54367 -38.51154 -37.472657 -36.393483 -35.345166 -34.26645 -32.827515 -31.66172 -30.626566 -29.485865 -28.531 -27.445849 -26.310725 -25.339852 -24.253296 -23.30635 -22.361092 -21.135142 -20.482159 -19.357562 -18.222525 -16.826758 -15.159996 -13.795574 -12.648688 -11.925149 -10.445625 -9.998288 -9.092574 -8.007591 -6.943004 -5.8482013 -4.9279165 -5.288985 -2.9008417 -1.897496 -0.940237 0.033980582 -0.44674113 1.7628145 2.6819165 3.5185743 4.3158984 5.142442 5.9318285 6.70093 7.449813 8.140035 8.817627 9.4636755 10.167132 10.801794 11.390676 12.035057 12.554969 13.010378 13.624228 14.051246 14.519911 15.238393 15.332253 15.760906 16.367329 16.461075 16.991776 17.24958 17.537577 17.680069 17.947264 18.177432 18.186476 18.531813 18.686884 18.773848 18.718771 19.023245 19.138752 19.247961 19.00928 19.245236 19.258955 19.193469 19.069983 18.99919 18.87915 18.715897 18.589497 18.356907 18.092103 17.842284 17.47522 17.184149 16.742993 16.30154 15.927343 15.410789 14.901326 14.163644 13.572345 12.985945 12.229138 11.598841 10.846535 10.095667 9.289007 8.469676 7.578003 6.7723985 6.0107308 5.012584 4.072012 3.1168588 2.1878214 1.2833692 0.2783305 -0.9062231 -1.9241068 -3.0461438 -3.9594827 -5.024327 -6.135406 -7.1223254 -8.158135 -9.299629 -10.328711 -11.372133 -12.423214 -13.495093 -14.49264 -15.501168 -16.561606 -17.59428 -18.597317 -19.631966 -20.63096 -21.518946 -22.511342 -23.455609 -24.344347 -25.194405 -26.0125 -26.808108 -27.610844 -28.263733 -28.91967 -29.595995 -30.269499 -30.794047 -31.312397 -31.855463 -32.350987 -32.77607 -33.25687 -33.624073 -33.955903 -34.22676 -34.40726 -34.673817 -34.90077 -34.921086 -35.055935 -35.04749 -35.038124 -35.000866 -34.831238 -34.7554 -34.551255 -34.306523 -34.02817 -33.75139 -33.376927 -33.089745 -32.45319 -32.025078 -31.563517 -31.122057 -30.581198 -30.0852 -29.49468 -28.915719 -28.27579 -27.723338 -27.023503 -26.418808 -25.72768 -25.055483 -24.381913 -23.696072 -22.994914 -22.319224 -21.603608 -20.791686 -20.195855 -19.48297 -18.782406 -18.097493 -17.471823 -16.632922 -15.824168 -15.393972 -14.522269 -13.875821 -13.312474 -12.600382 -11.873568 -11.3309765 -10.736848 -10.161611 -9.395466 -8.859238 -8.367822 -7.748346 -7.242902 -6.782921 -6.3122993 -5.5246344 -5.0795603 -4.681391 -4.208652 -3.865729 -3.4603079 -3.0430239 -2.8231724 -2.4247547 -2.1955056 -1.8962695 -1.6476401 -1.4300919 -1.1400814 -1.0746428 -0.837404 -0.61083216 -0.57264734 -0.5206977 -0.45263615 -0.3254389 -0.3125927 -0.27199397 -0.23919219 -0.32248172 -0.38142824 -0.49398303 -0.4080943 -0.73734957 -0.7061188 -0.982549 -1.0841874 -1.3820683 -1.6170783 -1.8430779 -2.0283132 -2.2948783 -2.6054812 -2.8761988 -3.215531 -3.5903533 -3.9217198 -4.243841 -4.612509 -5.0758643 -5.412285 -5.8484793 -6.238458 -6.6643577 -7.131478 -7.549724 -8.066417 -8.458429 -8.863442 -9.373493 -9.865156 -10.568101 -10.969605 -11.42491 -11.845707 -12.352252 -12.672773 -13.181527 -13.597952 -14.108967 -14.489366 -14.826691 -15.1990795 -15.620852 -15.937141 -16.230219 -16.703356 -16.992154 -17.275937 -17.607495 -17.827477 -18.08127 -18.36644 -18.66217 -18.861683 -18.934382 -19.072653 -19.380652 -19.432423 -19.569314 -19.694157 -19.837687 -19.876322 -19.919749 -19.93082 -19.8921 -19.979807 -19.951212 -19.93038 -19.936013 -19.84047 -19.783207 -19.682333 -19.410895 -19.339213 -19.242066 -19.188982 -18.99049 -18.732785 -18.65174 -18.319838 -18.201874 -18.027436 -17.89588)) (quote (-35.38526 -35.43995 -35.20533 -35.17468 -35.22065 -35.161183 -35.1683 -35.08472 -35.094746 -35.047753 -35.004548 -34.833855 -34.686886 -34.569783 -34.21654 -34.00228 -34.039875 -32.939228 -33.65588 -33.476548 -33.449147 -32.997685 -33.01103 -32.772263 -32.86313 -32.65516 -32.834404 -33.07108 -33.12614 -33.40634 -33.599427 -33.79069 -34.091206 -34.163128 -34.328404 -34.39486 -34.55756 -34.489613 -34.43183 -34.578144 -34.417824 -34.258824 -34.19585 -34.270726 -34.413563 -34.57553 -34.9456 -35.803013 -36.15614 -36.901154 -37.520043 -38.040707 -38.491948 -38.93722 -39.337986 -39.578404 -39.72527 -40.038258 -40.288208 -40.674473 -40.889504 -41.03079 -41.582104 -41.62692 -42.226628 -42.62818 -43.202828 -44.15348 -44.069123 -44.824826 -45.43772 -45.96904 -46.4098 -47.44052 -47.57113 -47.964447 -48.325146 -49.03593 -49.25939 -49.508667 -49.85746 -50.175953 -50.505337 -50.611313 -50.820683 -51.03758 -51.26671 -51.47508 -51.718758 -51.90862 -52.205338 -52.67712 -53.007725 -53.396286 -54.592446 -54.90804 -55.48659 -56.050805 -56.62469 -57.220478 -57.64103 -58.417145 -58.88872 -59.43604 -60.65439 -60.16699 -61.582726 -62.077076 -62.52285 -63.344956 -63.958916 -64.743676 -65.42996 -66.267105 -66.90379 -67.74339 -68.57472 -69.37812 -70.17405 -70.97173 -71.526276 -72.08073 -72.7796 -73.405655 -74.00595 -74.64464 -75.51349 -76.21681 -77.13469 -77.930405 -78.83999 -79.93083 -81.203316 -82.55201 -83.803696 -85.05874 -86.163704 -87.67261 -89.29462 -90.39807 -90.29179 -92.06762 -92.910775 -93.82237 -94.40986 -95.70821 -96.063355 -96.446175 -96.75688 -97.04572 -97.02744 -97.217224 -96.83507 -96.60073 -96.37778 -96.314835 -95.5786 -95.37615 -95.08168 -94.30635 -93.83141 -93.15061 -92.65196 -91.67775 -91.05819 -89.96544 -88.91505 -87.62589 -86.65965 -86.16463 -84.69115 -82.7872 -81.08703 -78.9195 -76.25925 -73.63571 -70.89356 -68.3079 -64.88844 -61.504136 -58.799733 -54.253994 -50.256977 -46.103207 -41.972565 -37.448685 -32.829724 -29.008973 -23.935784 -20.241457 -16.33172 -12.014486 -8.186116 -4.523669 -0.8881693 1.6839982 5.21385 7.9447804 10.326746 12.599419 14.862146 16.90055 18.616953 20.487114 22.1157 23.720726 25.317986 26.806784 29.044281 30.491436 32.047448 33.600094 35.141068 37.23073 39.535794 40.652623 42.049176 44.51359 46.874733 48.94907 52.166287 55.002922 58.602547 63.23064 68.1612 74.68035 80.746735 92.623314 105.85789 119.62999 138.90282 153.74423 167.37409 177.58223 -174.88814 -168.98233 -164.24707 -160.69307 -157.31118 -154.28914 -151.83217 -149.93488 -147.83615 -145.89293 -143.40509 -142.14672 -140.6699 -139.69017 -138.76459 -137.86719 -136.43364 -135.56209 -134.31787 -133.68683 -132.61295 -131.51139 -130.6833 -129.84601 -129.20035 -128.56139 -127.619194 -126.9039 -125.722824 -120.40709 -119.43031 -118.28516 -116.97604 -115.27565 -113.82957 -112.46536 -110.974655 -109.255844 -107.73312 -106.239785 -103.849366 -102.4192 -102.26798 -99.57707 -98.45263 -97.04463 -95.78444 -94.21554 -92.98817 -91.53836 -90.19905 -88.457115 -87.09093 -85.687615 -83.86082 -82.11549 -80.52322 -78.97106 -76.31417 -74.50725 -72.74301 -71.383736 -70.184136 -67.72563 -66.586846 -64.77175 -63.059174 -61.332566 -60.607354 -57.804737 -56.099617 -54.43928 -52.35887 -49.603875 -46.449116 -43.03342 -40.72266 -40.38014 -36.68245 -35.642247 -33.65996 -31.308428 -29.380579 -27.730534 -26.068932 -30.61506 -22.72409 -19.953085 -19.28292 -17.023415 -22.19526 -14.145847 -13.074214 -11.904392 -10.686284 -9.402197 -7.872561 -6.513255 -5.536914 -4.1533203 -2.6947897 -1.2105957 0.28524166 1.5824294 2.824354 4.74464 6.3503323 7.4395027 9.031126 10.211055 11.885177 14.482776 14.197371 15.147674 16.844212 16.794493 18.673626 18.936985 19.559559 20.174975 20.850119 21.143332 21.42306 22.410717 23.148072 23.029879 22.85148 24.108473 24.034594 24.152014 23.785138 24.15859 24.718634 24.602829 24.5206 24.265746 24.334052 24.482535 24.8633 25.341267 25.326685 25.53821 25.702212 26.268326 26.359248 26.559515 26.76593 27.067908 26.819043 26.535153 26.418152 26.674685 26.517195 26.831074 26.764754 26.592314 26.4144 26.518994 26.233584 26.284873 26.447564 26.994545 26.959956 26.747975 26.547146 26.595622 26.738167 27.085047 27.21872 27.668166 28.736872 28.2724 29.155238 28.696482 28.889302 29.87524 29.441878 29.358323 29.41538 29.563517 29.903229 29.942629 29.496903 29.567297 29.599345 29.510312 29.073496 29.664422 29.65769 29.83824 29.915709 30.206709 30.592988 30.652699 30.811802 31.134457 31.229893 31.229716 31.147812 31.069697 30.977913 30.757569 30.457938 30.116555 29.791365 29.486128 29.143227 28.677683 28.276999 28.09108 27.619482 27.624794 27.238989 27.024502 26.669919 26.475184 26.253312 26.082678 25.858223 25.49707 25.206383 25.066084 25.090298 24.750132 25.257748 25.470522 25.429883 25.366089 25.656983 25.708544 26.038655 26.20715 26.753958 27.080985 27.56353 27.790387 27.943749 28.512236 28.96411 29.226418 29.704018 29.853123 29.95661 30.375546 30.347405 30.496493 30.515223 30.775387 30.616457 30.580267 31.251534 30.315995 31.881882 31.759316 31.689917 31.680037 31.8122 32.05224 32.29836 32.47976 32.6898 32.446587 32.57937 32.593327 33.0278 32.870308 32.64324 33.06322 33.052613 32.92381 33.348687 32.913735 33.13953 32.896195 32.799374 32.771607 32.773438 32.516068 32.938183 32.683918 32.751847 32.537835 32.402584 32.735314 32.475575 32.204792 32.42842 32.47538 32.534577 32.15885 32.16177 31.917143 31.625819 31.627699 31.928257 31.49845 31.569138 31.34614 31.651329 31.445313 31.501461 31.2635 31.275982 31.512259 31.191607 31.207142 31.47436 31.47986 31.151892 31.224955 31.342202 31.252429 31.379103 31.504712 31.307263 31.301733 31.250082 31.01002 31.02482 30.904553 31.07744 31.307484 30.857836 31.004355 31.194569 30.83201 30.585898 30.667674 30.75788 31.063042 31.033099 31.053175 31.186505 31.00868 31.002173 30.954472 30.84011 30.867436 30.930056 30.778512 30.506714 30.212952 30.295815 30.525094 30.167698 30.247464 30.057465 30.376709 30.231802 30.1516 30.298247 30.40279 30.266219 30.374335 30.65394 30.52885 30.528084 30.453593 30.33127 30.365097 30.392592 30.320244 30.543158 30.531653 30.585543 30.639296 30.542176 30.613492 30.350298 30.305928 30.570633 30.478114 30.622538 30.721966 30.654467 30.635157)) (quote (6.086 6.088 6.096 6.096 6.102 6.109 6.112 6.118 6.122 6.128 6.133 6.138 6.142 6.148 6.152 6.158 6.162 6.168 6.172 6.178 6.182 6.188 6.194 6.198 6.203 6.208 6.214 6.218 6.224 6.228 6.234 6.238 6.244 6.25 6.254 6.258 6.264 6.268 6.274 6.278 6.284 6.288 6.292 6.298 6.304 6.308 6.314 6.318 6.324 6.328 6.334 6.338 6.344 6.348 6.354 6.358 6.362 6.368 6.374 6.378 6.384 6.388 6.394 6.398 6.404 6.408 6.414 6.418 6.424 6.428 6.432 6.435 6.442 6.448 6.454 6.458 6.464 6.466 6.471 6.478 6.484 6.488 6.493 6.498 6.502 6.508 6.512 6.518 6.522 6.528 6.534 6.538 6.542 6.548 6.552 6.558 6.564 6.568 6.574 6.578 6.582 6.588 6.594 6.598 6.604 6.608 6.614 6.618 6.622 6.628 6.633 6.638 6.644 6.648 6.654 6.658 6.664 6.664 6.674 6.678 6.684 6.688 6.694 6.698 6.704 6.708 6.714 6.718 6.724 6.728 6.734 6.738 6.744 6.748 6.756 6.756 6.764 6.768 6.774 6.78 6.786 6.788 6.792 6.798 6.804 6.808 6.814 6.818 6.826 6.826 6.832 6.838 6.844 6.848 6.854 6.858 6.862 6.868 6.874 6.878 6.882 6.888 6.892 6.896 6.902 6.909 6.912 6.918 6.922 6.928 6.932 6.938 6.942 6.948 6.952 6.958 6.962 6.966 6.972 6.978 6.984 6.988 6.994 6.998 7.003 7.008 7.012 7.018 7.026 7.026 7.032 7.038 7.042 7.048 7.052 7.058 7.062 7.068 7.074 7.078 7.082 7.088 7.092 7.098 7.104 7.108 7.114 7.118 7.122 7.128 7.134 7.138 7.144 7.148 7.154 7.158 7.164 7.168 7.174 7.178 7.186 7.188 7.194 7.198 7.202 7.208 7.214 7.218 7.224 7.228 7.232 7.238 7.244 7.254 7.254 7.258 7.264 7.268 7.274 7.278 7.282 7.288 7.292 7.298 7.302 7.308 7.312 7.318 7.322 7.326 7.332 7.338 7.342 7.348 7.352 7.358 7.363 7.368 7.372 7.378 7.384 7.388 7.396 7.396 7.404 7.408 7.414 7.418 7.424 7.428 7.432 7.438 7.444 7.448 7.452 7.458 7.466 7.466 7.474 7.478 7.484 7.488 7.494 7.498 7.506 7.506 7.514 7.518 7.524 7.528 7.534 7.538 7.544 7.548 7.554 7.558 7.564 7.568 7.574 7.578 7.584 7.588 7.592 7.598 7.604 7.608 7.614 7.618 7.624 7.628 7.634 7.638 7.644 7.648 7.654 7.658 7.662 7.668 7.674 7.678 7.684 7.688 7.692 7.698 7.702 7.709 7.712 7.718 7.722 7.728 7.732 7.738 7.742 7.748 7.752 7.758 7.762 7.766 7.772 7.778 7.782 7.788 7.792 7.798 7.802 7.808 7.812 7.818 7.822 7.826 7.832 7.838 7.842 7.848 7.852 7.858 7.863 7.868 7.872 7.878 7.882 7.888 7.892 7.898 7.902 7.908 7.912 7.918 7.922 7.928 7.933 7.938 7.942 7.948 7.954 7.958 7.962 7.968 7.972 7.978 7.982 7.988 7.994 7.998 8.003 8.008 8.012 8.018 8.022 8.028 8.034 8.038 8.044 8.048 8.054 8.066 8.066 8.068 8.072 8.078 8.084 8.088 8.092 8.098 8.102 8.109 8.112 8.118 8.122 8.126 8.132 8.138 8.142 8.148 8.152 8.158 8.162 8.168 8.172 8.178 8.182 8.188 8.192 8.196 8.202 8.208 8.212 8.218 8.222 8.228 8.232 8.238 8.242 8.248 8.252 8.258 8.262 8.266 8.272 8.278 8.282 8.288 8.292 8.298 8.302 8.308 8.312 8.318 8.322 8.328 8.332 8.338 8.342 8.348 8.352 8.358 8.363 8.364 8.373 8.378 8.382 8.388 8.392 8.398 8.398 8.408 8.414 8.418 8.422 8.428 8.433 8.433 8.442 8.448 8.454 8.458 8.464 8.464 8.469 8.478 8.484 8.49 8.492 8.498 8.502 8.507 8.512 8.518 8.522 8.528 8.532 8.537 8.542 8.549 8.552 8.558 8.562 8.568 8.573 8.578 8.582 8.588 8.592 8.598 8.602 8.608 8.612 8.618 8.622 8.626 8.631 8.638 8.642 8.648 8.652 8.658 8.658 8.668 8.672 8.678 8.682 8.688 8.692 8.696 8.702 8.708 8.712 8.718 8.722 8.728 8.733 8.738 8.742 8.748 8.752 8.758 8.762 8.769 8.772 8.778 8.782 8.788 8.792 8.798 8.803 8.808 8.812 8.818 8.824 8.824 8.832 8.838 8.844 8.848 8.852 8.858 8.862 8.868 8.872 8.878 8.882 8.888 8.892 8.898 8.902 8.908 8.912 8.918 8.922 8.928 8.932 8.938 8.942 8.948 8.952 8.958 8.962 8.968 8.972 8.978 8.982 8.988 8.992 8.998 9.002 9.008 9.012 9.016 9.023 9.028 9.032 9.038 9.042 9.048 9.05 9.058 9.062 9.068 9.082 9.082 9.084 9.093 9.098 9.102 9.108 9.112 9.118 9.123 9.126 9.129)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6.086 6.088 6.096 6.096 6.102 6.109 6.112 6.118 6.122 6.128 6.133 6.138 6.142 6.148 6.152 6.158 6.162 6.168 6.172 6.178 6.182 6.188 6.194 6.198 6.203 6.208 6.214 6.218 6.224 6.228 6.234 6.238 6.244 6.25 6.254 6.258 6.264 6.268 6.274 6.278 6.284 6.288 6.292 6.298 6.304 6.308 6.314 6.318 6.324 6.328 6.334 6.338 6.344 6.348 6.354 6.358 6.362 6.368 6.374 6.378 6.384 6.388 6.394 6.398 6.404 6.408 6.414 6.418 6.424 6.428 6.432 6.435 6.442 6.448 6.454 6.458 6.464 6.466 6.471 6.478 6.484 6.488 6.493 6.498 6.502 6.508 6.512 6.518 6.522 6.528 6.534 6.538 6.542 6.548 6.552 6.558 6.564 6.568 6.574 6.578 6.582 6.588 6.594 6.598 6.604 6.608 6.614 6.618 6.622 6.628 6.633 6.638 6.644 6.648 6.654 6.658 6.664 6.664 6.674 6.678 6.684 6.688 6.694 6.698 6.704 6.708 6.714 6.718 6.724 6.728 6.734 6.738 6.744 6.748 6.756 6.756 6.764 6.768 6.774 6.78 6.786 6.788 6.792 6.798 6.804 6.808 6.814 6.818 6.826 6.826 6.832 6.838 6.844 6.848 6.854 6.858 6.862 6.868 6.874 6.878 6.882 6.888 6.892 6.896 6.902 6.909 6.912 6.918 6.922 6.928 6.932 6.938 6.942 6.948 6.952 6.958 6.962 6.966 6.972 6.978 6.984 6.988 6.994 6.998 7.003 7.008 7.012 7.018 7.026 7.026 7.032 7.038 7.042 7.048 7.052 7.058 7.062 7.068 7.074 7.078 7.082 7.088 7.092 7.098 7.104 7.108 7.114 7.118 7.122 7.128 7.134 7.138 7.144 7.148 7.154 7.158 7.164 7.168 7.174 7.178 7.186 7.188 7.194 7.198 7.202 7.208 7.214 7.218 7.224 7.228 7.232 7.238 7.244 7.254 7.254 7.258 7.264 7.268 7.274 7.278 7.282 7.288 7.292 7.298 7.302 7.308 7.312 7.318 7.322 7.326 7.332 7.338 7.342 7.348 7.352 7.358 7.363 7.368 7.372 7.378 7.384 7.388 7.396 7.396 7.404 7.408 7.414 7.418 7.424 7.428 7.432 7.438 7.444 7.448 7.452 7.458 7.466 7.466 7.474 7.478 7.484 7.488 7.494 7.498 7.506 7.506 7.514 7.518 7.524 7.528 7.534 7.538 7.544 7.548 7.554 7.558 7.564 7.568 7.574 7.578 7.584 7.588 7.592 7.598 7.604 7.608 7.614 7.618 7.624 7.628 7.634 7.638 7.644 7.648 7.654 7.658 7.662 7.668 7.674 7.678 7.684 7.688 7.692 7.698 7.702 7.709 7.712 7.718 7.722 7.728 7.732 7.738 7.742 7.748 7.752 7.758 7.762 7.766 7.772 7.778 7.782 7.788 7.792 7.798 7.802 7.808 7.812 7.818 7.822 7.826 7.832 7.838 7.842 7.848 7.852 7.858 7.863 7.868 7.872 7.878 7.882 7.888 7.892 7.898 7.902 7.908 7.912 7.918 7.922 7.928 7.933 7.938 7.942 7.948 7.954 7.958 7.962 7.968 7.972 7.978 7.982 7.988 7.994 7.998 8.003 8.008 8.012 8.018 8.022 8.028 8.034 8.038 8.044 8.048 8.054 8.066 8.066 8.068 8.072 8.078 8.084 8.088 8.092 8.098 8.102 8.109 8.112 8.118 8.122 8.126 8.132 8.138 8.142 8.148 8.152 8.158 8.162 8.168 8.172 8.178 8.182 8.188 8.192 8.196 8.202 8.208 8.212 8.218 8.222 8.228 8.232 8.238 8.242 8.248 8.252 8.258 8.262 8.266 8.272 8.278 8.282 8.288 8.292 8.298 8.302 8.308 8.312 8.318 8.322 8.328 8.332 8.338 8.342 8.348 8.352 8.358 8.363 8.364 8.373 8.378 8.382 8.388 8.392 8.398 8.398 8.408 8.414 8.418 8.422 8.428 8.433 8.433 8.442 8.448 8.454 8.458 8.464 8.464 8.469 8.478 8.484 8.49 8.492 8.498 8.502 8.507 8.512 8.518 8.522 8.528 8.532 8.537 8.542 8.549 8.552 8.558 8.562 8.568 8.573 8.578 8.582 8.588 8.592 8.598 8.602 8.608 8.612 8.618 8.622 8.626 8.631 8.638 8.642 8.648 8.652 8.658 8.658 8.668 8.672 8.678 8.682 8.688 8.692 8.696 8.702 8.708 8.712 8.718 8.722 8.728 8.733 8.738 8.742 8.748 8.752 8.758 8.762 8.769 8.772 8.778 8.782 8.788 8.792 8.798 8.803 8.808 8.812 8.818 8.824 8.824 8.832 8.838 8.844 8.848 8.852 8.858 8.862 8.868 8.872 8.878 8.882 8.888 8.892 8.898 8.902 8.908 8.912 8.918 8.922 8.928 8.932 8.938 8.942 8.948 8.952 8.958 8.962 8.968 8.972 8.978 8.982 8.988 8.992 8.998 9.002 9.008 9.012 9.016 9.023 9.028 9.032 9.038 9.042 9.048 9.05 9.058 9.062 9.068 9.082 9.082 9.084 9.093 9.098 9.102 9.108 9.112 9.118 9.123 9.126 9.129)) (setf (z-points newobj) (list -35.38526 -35.43995 -35.20533 -35.17468 -35.22065 -35.161183 -35.1683 -35.08472 -35.094746 -35.047753 -35.004548 -34.833855 -34.686886 -34.569783 -34.21654 -34.00228 -34.039875 -32.939228 -33.65588 -33.476548 -33.449147 -32.997685 -33.01103 -32.772263 -32.86313 -32.65516 -32.834404 -33.07108 -33.12614 -33.40634 -33.599427 -33.79069 -34.091206 -34.163128 -34.328404 -34.39486 -34.55756 -34.489613 -34.43183 -34.578144 -34.417824 -34.258824 -34.19585 -34.270726 -34.413563 -34.57553 -34.9456 -35.803013 -36.15614 -36.901154 -37.520043 -38.040707 -38.491948 -38.93722 -39.337986 -39.578404 -39.72527 -40.038258 -40.288208 -40.674473 -40.889504 -41.03079 -41.582104 -41.62692 -42.226628 -42.62818 -43.202828 -44.15348 -44.069123 -44.824826 -45.43772 -45.96904 -46.4098 -47.44052 -47.57113 -47.964447 -48.325146 -49.03593 -49.25939 -49.508667 -49.85746 -50.175953 -50.505337 -50.611313 -50.820683 -51.03758 -51.26671 -51.47508 -51.718758 -51.90862 -52.205338 -52.67712 -53.007725 -53.396286 -54.592446 -54.90804 -55.48659 -56.050805 -56.62469 -57.220478 -57.64103 -58.417145 -58.88872 -59.43604 -60.65439 -60.16699 -61.582726 -62.077076 -62.52285 -63.344956 -63.958916 -64.743676 -65.42996 -66.267105 -66.90379 -67.74339 -68.57472 -69.37812 -70.17405 -70.97173 -71.526276 -72.08073 -72.7796 -73.405655 -74.00595 -74.64464 -75.51349 -76.21681 -77.13469 -77.930405 -78.83999 -79.93083 -81.203316 -82.55201 -83.803696 -85.05874 -86.163704 -87.67261 -89.29462 -90.39807 -90.29179 -92.06762 -92.910775 -93.82237 -94.40986 -95.70821 -96.063355 -96.446175 -96.75688 -97.04572 -97.02744 -97.217224 -96.83507 -96.60073 -96.37778 -96.314835 -95.5786 -95.37615 -95.08168 -94.30635 -93.83141 -93.15061 -92.65196 -91.67775 -91.05819 -89.96544 -88.91505 -87.62589 -86.65965 -86.16463 -84.69115 -82.7872 -81.08703 -78.9195 -76.25925 -73.63571 -70.89356 -68.3079 -64.88844 -61.504136 -58.799733 -54.253994 -50.256977 -46.103207 -41.972565 -37.448685 -32.829724 -29.008973 -23.935784 -20.241457 -16.33172 -12.014486 -8.186116 -4.523669 -0.8881693 1.6839982 5.21385 7.9447804 10.326746 12.599419 14.862146 16.90055 18.616953 20.487114 22.1157 23.720726 25.317986 26.806784 29.044281 30.491436 32.047448 33.600094 35.141068 37.23073 39.535794 40.652623 42.049176 44.51359 46.874733 48.94907 52.166287 55.002922 58.602547 63.23064 68.1612 74.68035 80.746735 92.623314 105.85789 119.62999 138.90282 153.74423 167.37409 177.58223 -174.88814 -168.98233 -164.24707 -160.69307 -157.31118 -154.28914 -151.83217 -149.93488 -147.83615 -145.89293 -143.40509 -142.14672 -140.6699 -139.69017 -138.76459 -137.86719 -136.43364 -135.56209 -134.31787 -133.68683 -132.61295 -131.51139 -130.6833 -129.84601 -129.20035 -128.56139 -127.619194 -126.9039 -125.722824 -120.40709 -119.43031 -118.28516 -116.97604 -115.27565 -113.82957 -112.46536 -110.974655 -109.255844 -107.73312 -106.239785 -103.849366 -102.4192 -102.26798 -99.57707 -98.45263 -97.04463 -95.78444 -94.21554 -92.98817 -91.53836 -90.19905 -88.457115 -87.09093 -85.687615 -83.86082 -82.11549 -80.52322 -78.97106 -76.31417 -74.50725 -72.74301 -71.383736 -70.184136 -67.72563 -66.586846 -64.77175 -63.059174 -61.332566 -60.607354 -57.804737 -56.099617 -54.43928 -52.35887 -49.603875 -46.449116 -43.03342 -40.72266 -40.38014 -36.68245 -35.642247 -33.65996 -31.308428 -29.380579 -27.730534 -26.068932 -30.61506 -22.72409 -19.953085 -19.28292 -17.023415 -22.19526 -14.145847 -13.074214 -11.904392 -10.686284 -9.402197 -7.872561 -6.513255 -5.536914 -4.1533203 -2.6947897 -1.2105957 0.28524166 1.5824294 2.824354 4.74464 6.3503323 7.4395027 9.031126 10.211055 11.885177 14.482776 14.197371 15.147674 16.844212 16.794493 18.673626 18.936985 19.559559 20.174975 20.850119 21.143332 21.42306 22.410717 23.148072 23.029879 22.85148 24.108473 24.034594 24.152014 23.785138 24.15859 24.718634 24.602829 24.5206 24.265746 24.334052 24.482535 24.8633 25.341267 25.326685 25.53821 25.702212 26.268326 26.359248 26.559515 26.76593 27.067908 26.819043 26.535153 26.418152 26.674685 26.517195 26.831074 26.764754 26.592314 26.4144 26.518994 26.233584 26.284873 26.447564 26.994545 26.959956 26.747975 26.547146 26.595622 26.738167 27.085047 27.21872 27.668166 28.736872 28.2724 29.155238 28.696482 28.889302 29.87524 29.441878 29.358323 29.41538 29.563517 29.903229 29.942629 29.496903 29.567297 29.599345 29.510312 29.073496 29.664422 29.65769 29.83824 29.915709 30.206709 30.592988 30.652699 30.811802 31.134457 31.229893 31.229716 31.147812 31.069697 30.977913 30.757569 30.457938 30.116555 29.791365 29.486128 29.143227 28.677683 28.276999 28.09108 27.619482 27.624794 27.238989 27.024502 26.669919 26.475184 26.253312 26.082678 25.858223 25.49707 25.206383 25.066084 25.090298 24.750132 25.257748 25.470522 25.429883 25.366089 25.656983 25.708544 26.038655 26.20715 26.753958 27.080985 27.56353 27.790387 27.943749 28.512236 28.96411 29.226418 29.704018 29.853123 29.95661 30.375546 30.347405 30.496493 30.515223 30.775387 30.616457 30.580267 31.251534 30.315995 31.881882 31.759316 31.689917 31.680037 31.8122 32.05224 32.29836 32.47976 32.6898 32.446587 32.57937 32.593327 33.0278 32.870308 32.64324 33.06322 33.052613 32.92381 33.348687 32.913735 33.13953 32.896195 32.799374 32.771607 32.773438 32.516068 32.938183 32.683918 32.751847 32.537835 32.402584 32.735314 32.475575 32.204792 32.42842 32.47538 32.534577 32.15885 32.16177 31.917143 31.625819 31.627699 31.928257 31.49845 31.569138 31.34614 31.651329 31.445313 31.501461 31.2635 31.275982 31.512259 31.191607 31.207142 31.47436 31.47986 31.151892 31.224955 31.342202 31.252429 31.379103 31.504712 31.307263 31.301733 31.250082 31.01002 31.02482 30.904553 31.07744 31.307484 30.857836 31.004355 31.194569 30.83201 30.585898 30.667674 30.75788 31.063042 31.033099 31.053175 31.186505 31.00868 31.002173 30.954472 30.84011 30.867436 30.930056 30.778512 30.506714 30.212952 30.295815 30.525094 30.167698 30.247464 30.057465 30.376709 30.231802 30.1516 30.298247 30.40279 30.266219 30.374335 30.65394 30.52885 30.528084 30.453593 30.33127 30.365097 30.392592 30.320244 30.543158 30.531653 30.585543 30.639296 30.542176 30.613492 30.350298 30.305928 30.570633 30.478114 30.622538 30.721966 30.654467 30.635157))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (-138.13899 -138.13689 -137.95185 -137.83884 -137.76937 -137.6683 -137.56955 -137.6055 -137.34786 -137.24065 -137.17189 -137.07056 -137.04093 -136.98618 -136.90436 -136.76898 -136.6832 -136.64009 -136.45552 -136.44762 -136.28139 -136.23708 -136.19203 -136.19298 -136.03601 -135.99587 -135.89966 -135.82459 -135.74399 -135.66506 -135.69802 -135.5094 -135.6211 -135.37992 -135.28444 -135.30342 -135.2738 -135.22277 -135.31761 -135.1864 -135.1587 -135.15038 -135.05402 -135.06455 -135.0409 -135.08469 -135.23087 -135.01714 -135.15349 -135.23734 -135.15679 -135.07212 -135.21379 -135.21637 -135.28043 -135.27686 -135.30573 -135.31175 -135.28992 -135.3906 -135.40453 -135.56325 -135.66382 -135.65579 -135.76683 -135.68791 -135.84754 -135.87995 -135.97208 -135.97911 -136.13898 -136.24594 -136.29268 -136.34561 -136.47769 -136.55821 -136.60572 -136.56203 -136.70732 -136.80635 -136.87955 -136.89444 -136.90772 -137.02173 -136.99437 -137.05846 -136.96588 -137.07572 -137.07674 -137.0259 -136.97834 -136.94345 -137.00833 -136.89539 -136.91776 -136.87789 -136.7982 -136.81327 -136.72788 -136.60837 -136.4997 -136.3918 -136.33216 -136.2694 -136.08805 -136.04346 -135.95725 -135.78725 -135.69004 -135.56276 -135.38855 -135.3285 -135.21558 -134.94849 -134.8889 -134.58193 -134.53582 -134.40624 -134.23755 -134.06021 -133.9018 -133.70745 -133.55025 -133.39583 -133.17772 -133.03624 -132.8639 -132.63928 -132.33829 -132.29682 -132.12198 -132.0053 -131.63964 -131.51432 -131.44309 -131.18862 -130.94145 -130.82238 -130.66332 -130.50656 -130.38205 -130.20589 -130.0784 -129.69774 -129.58353 -129.54164 -129.21977 -129.07779 -128.92806 -128.80059 -128.79183 -128.64527 -128.43587 -128.119 -127.94688 -127.80992 -127.63732 -127.90437 -127.75569 -127.342 -127.230675 -127.06178 -127.09358 -126.71581 -126.565796 -126.38037 -126.22347 -126.3136 -125.91822 -125.80335 -125.51367 -125.376305 -125.37121 -124.998795 -124.85248 -124.64306 -124.43627 -124.26446 -124.05488 -123.89156 -123.64161 -123.43522 -123.26096 -123.09809 -122.87525 -122.638726 -122.4735 -122.27012 -122.02372 -121.823075 -121.61447 -121.38835 -121.168946 -120.99654 -120.72387 -120.53625 -120.39095 -120.11188 -119.89941 -119.72298 -119.51942 -119.2525 -119.14332 -118.87528 -118.68072 -118.56072 -118.34956 -118.1705 -118.0129 -117.85585 -117.620056 -117.432625 -117.2318 -117.096566 -116.94223 -116.78691 -116.54629 -116.497506 -116.33328 -116.1421 -116.06285 -115.95139 -115.776 -115.64967 -115.5349 -115.43358 -115.28867 -115.156296 -115.095986 -115.03057 -114.92071 -114.824135 -114.725174 -114.63534 -114.58105 -114.59054 -114.479805 -114.47329 -114.401635 -114.35503 -114.33829 -114.24862 -114.33427 -114.25237 -114.24823 -114.17299 -114.11391 -114.10155 -114.03028 -114.0005 -113.96611 -113.866844 -113.7764 -113.74891 -113.70541 -113.561264 -113.31658 -113.19387 -113.065895 -112.925606 -112.80452 -112.67419 -112.46603 -112.35028 -112.13589 -111.99376 -111.8435 -111.58281 -111.48286)) (quote (-17.89588 -17.76428 -17.569298 -17.2219 -17.094696 -16.844189 -16.582745 -16.267018 -16.046099 -15.799587 -15.500288 -15.2548275 -15.083461 -14.830623 -14.490606 -14.263583 -13.940008 -13.796334 -13.430329 -12.99502 -12.989116 -12.58279 -12.550013 -12.140537 -12.197241 -11.774616 -11.585725 -11.640057 -11.260906 -10.962382 -10.857619 -10.811242 -10.63965 -10.479082 -10.390892 -10.313236 -10.226061 -10.127646 -10.12925 -10.138986 -10.013969 -10.001383 -10.039584 -10.028058 -10.217783 -10.179736 -10.225474 -10.170365 -10.31079 -10.413721 -10.473552 -10.566596 -10.705249 -10.91146 -10.956671 -11.088705 -11.1975765 -11.3754835 -11.582844 -11.729439 -11.87975 -12.164103 -12.350421 -12.533814 -12.697447 -13.115148 -13.212798 -13.637861 -13.845143 -13.817353 -14.283195 -14.556222 -14.695826 -15.081183 -15.159634 -15.449083 -15.671476 -15.923635 -16.240784 -16.428219 -16.662415 -16.867514 -17.080397 -17.350724 -17.59567 -17.864167 -18.028717 -18.300908 -18.494769 -18.716748 -18.868926 -19.073668 -19.310799 -19.442702 -19.67036 -19.88917 -19.965859 -20.229975 -20.396889 -20.453539 -20.75733 -20.899279 -21.013459 -21.14686 -21.273293 -21.437779 -21.517287 -21.607636 -21.795903 -21.902386 -22.015013 -22.0705 -22.262602 -22.303418 -22.493329 -22.587666 -22.696209 -22.7844 -22.912369 -22.991095 -23.045248 -23.224062 -23.278534 -23.39029 -23.433993 -23.573903 -23.6925 -23.768727 -23.824959 -23.949215 -24.115862 -24.174921 -24.242754 -24.30597 -24.532427 -24.53546 -24.675608 -24.779898 -24.886816 -24.972796 -25.069155 -25.194939 -25.297152 -25.445242 -25.544476 -25.649996 -25.769322 -25.912022 -25.980139 -26.139473 -26.269366 -26.359467 -26.525115 -26.6542 -26.759913 -26.91882 -27.017292 -27.38666 -27.485636 -27.69185 -27.79248 -27.989708 -28.086607 -28.292023 -28.442093 -28.594105 -28.81115 -28.914294 -29.135209 -29.246558 -29.462336 -29.59268 -29.820082 -29.980963 -30.218228 -30.372693 -30.579154 -30.758856 -30.96578 -31.113974 -31.33059 -31.556912 -31.731604 -31.91796 -32.085175 -32.320996 -32.44439 -32.655648 -32.846898 -33.052407 -33.26627 -33.47263 -33.664563 -33.84252 -34.05258 -34.216267 -34.44895 -34.59869 -34.75375 -34.983986 -35.149334 -35.342785 -35.52458 -35.73107 -35.90852 -36.053845 -36.27818 -36.49831 -36.67918 -36.927845 -37.138108 -37.38621 -37.573464 -37.79564 -38.004467 -38.252888 -38.502396 -38.693 -38.9134 -39.125046 -39.34873 -39.55993 -39.77221 -39.965168 -40.16975 -40.377453 -40.559716 -40.766568 -40.935547 -41.115014 -41.284066 -41.483647 -41.650555 -41.823777 -41.946598 -42.11361 -42.316834 -42.434185 -42.624665 -42.7918 -42.907578 -43.074864 -43.208588 -43.37098 -43.489315 -43.66031 -43.80982 -43.92377 -44.09481 -44.21521 -44.343525 -44.51751 -44.65679 -44.79009 -44.90988 -45.066258 -45.145615 -45.2955 -45.43821 -45.545536 -45.67179 -45.823693 -45.942257 -46.054593 -46.191006 -46.287953 -46.410813 -46.556813 -46.620106)) (quote (30.635157 30.61584 30.544436 30.763972 30.701693 30.251723 30.498023 30.480597 30.483813 30.317219 30.684477 30.33144 30.586441 30.598336 30.801405 30.723763 31.019707 30.738066 30.730797 30.873745 30.640997 30.832949 30.991822 30.886763 30.764336 30.897934 30.762396 30.696595 30.858138 31.003775 31.271624 30.75947 31.151165 30.95477 30.844985 30.879315 30.90651 30.939917 31.095509 30.778025 30.858639 30.965924 30.772852 30.794495 30.457785 30.78094 31.080952 30.89682 30.959115 31.226565 30.943406 30.784874 30.886712 30.95915 30.929924 30.891642 30.864354 30.676346 30.7061 30.855303 30.779002 30.857316 30.905779 30.81317 30.941243 30.754685 30.538554 30.541533 30.626393 30.601187 30.614172 30.864577 30.569144 30.446496 30.733157 30.455376 30.703204 30.375533 30.624918 30.573452 30.85089 30.727065 30.738089 30.740403 30.624508 30.55009 30.438357 30.372282 30.35624 30.281958 30.139903 30.12602 30.079878 30.056885 29.956276 29.601279 29.590405 29.578227 29.386668 29.409628 29.118756 28.960545 28.692933 28.727585 28.54235 28.472105 28.453536 28.204188 27.952546 27.834109 27.720837 27.69569 26.576386 27.112692 26.159659 26.664984 25.79383 25.667414 25.476958 25.365283 25.176697 24.92321 24.917845 24.433419 24.479208 24.360732 24.083895 24.121256 23.902852 23.71756 23.552216 23.477852 23.307433 23.320307 22.985682 23.045229 22.988278 22.822949 22.928229 22.78422 22.748299 22.776888 22.703719 22.50279 22.58912 22.326762 22.340804 22.244183 22.11599 22.183955 22.197865 22.170184 22.028702 22.001009 21.920023 21.855002 21.896864 21.07752 21.324107 21.087935 21.083495 21.073494 21.098696 20.97004 21.02551 21.115036 21.048399 21.265265 21.138184 21.225769 21.226695 21.28128 21.31238 21.422522 21.170632 21.455559 21.275227 21.52707 21.488833 21.957446 21.77741 22.196709 21.962082 22.504462 22.652289 22.877982 22.854956 22.82283 22.864638 22.715144 22.738429 22.784832 22.871165 22.980315 22.859469 22.99483 22.948565 23.010104 23.086697 22.96563 23.068846 23.092753 23.05822 23.131955 23.405529 23.75708 23.980759 24.4472 24.636776 24.965392 24.995186 25.133572 25.307637 25.657614 25.89517 26.17485 26.278489 26.586415 26.890339 27.132952 27.29949 27.474606 27.704764 27.938752 28.164843 28.321852 28.426905 28.436648 28.596064 28.769764 28.886788 29.086215 29.117344 29.060973 29.297518 29.221493 29.190409 29.227808 29.172532 29.187867 29.20823 29.211302 29.150542 29.132876 29.23595 29.120043 29.157479 29.068045 29.022736 28.98612 28.950119 28.887562 28.859847 28.905175 28.887248 28.745818 29.099272 28.981482 28.973633 29.035893 29.042328 29.005385 28.975646 29.035578 29.043543 29.009055 29.041489 28.869299 28.848652)) (quote (9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9.129 9.132 9.138 9.142 9.148 9.152 9.158 9.163 9.168 9.172 9.178 9.182 9.188 9.192 9.196 9.202 9.208 9.212 9.218 9.222 9.228 9.233 9.238 9.242 9.248 9.252 9.258 9.264 9.264 9.274 9.278 9.282 9.288 9.3 9.3 9.303 9.308 9.312 9.318 9.322 9.328 9.332 9.338 9.342 9.348 9.352 9.358 9.362 9.368 9.372 9.378 9.382 9.388 9.392 9.398 9.402 9.408 9.412 9.418 9.422 9.428 9.433 9.438 9.442 9.448 9.452 9.458 9.462 9.468 9.472 9.478 9.482 9.488 9.492 9.496 9.502 9.508 9.512 9.518 9.522 9.528 9.532 9.538 9.542 9.548 9.552 9.558 9.562 9.566 9.572 9.578 9.582 9.588 9.592 9.598 9.602 9.608 9.612 9.618 9.624 9.624 9.632 9.638 9.642 9.648 9.652 9.658 9.663 9.668 9.674 9.678 9.684 9.688 9.694 9.698 9.704 9.706 9.712 9.718 9.722 9.728 9.728 9.738 9.742 9.748 9.752 9.758 9.762 9.768 9.772 9.778 9.782 9.788 9.792 9.798 9.802 9.808 9.812 9.818 9.822 9.828 9.832 9.838 9.842 9.848 9.852 9.856 9.862 9.868 9.872 9.878 9.882 9.888 9.892 9.898 9.902 9.908 9.912 9.918 9.922 9.926 9.932 9.938 9.942 9.948 9.952 9.958 9.962 9.968 9.972 9.978 9.982 9.988 9.992 9.996 10.002 10.008 10.012 10.018 10.022 10.028 10.028 10.038 10.042 10.048 10.052 10.058 10.062 10.066 10.072 10.078 10.082 10.088 10.092 10.098 10.103 10.106 10.112 10.118 10.122 10.128 10.132 10.138 10.142 10.148 10.152 10.158 10.162 10.168 10.172 10.178 10.182 10.188 10.192 10.198 10.202 10.208 10.212 10.218 10.222 10.226 10.233 10.238 10.242 10.248 10.252 10.258 10.264 10.264 10.272 10.278 10.282 10.288 10.292 10.298 10.302 10.308 10.312 10.318 10.322 10.328 10.332 10.338 10.342 10.348 10.352 10.358 10.362 10.368 10.372 10.378 10.382 10.388 10.393 10.398 10.402 10.408 10.412 10.418 10.422 10.426 10.432 10.438 10.442 10.448 10.452 10.458 10.463 10.465)) (setf (z-points newobj) (list 30.635157 30.61584 30.544436 30.763972 30.701693 30.251723 30.498023 30.480597 30.483813 30.317219 30.684477 30.33144 30.586441 30.598336 30.801405 30.723763 31.019707 30.738066 30.730797 30.873745 30.640997 30.832949 30.991822 30.886763 30.764336 30.897934 30.762396 30.696595 30.858138 31.003775 31.271624 30.75947 31.151165 30.95477 30.844985 30.879315 30.90651 30.939917 31.095509 30.778025 30.858639 30.965924 30.772852 30.794495 30.457785 30.78094 31.080952 30.89682 30.959115 31.226565 30.943406 30.784874 30.886712 30.95915 30.929924 30.891642 30.864354 30.676346 30.7061 30.855303 30.779002 30.857316 30.905779 30.81317 30.941243 30.754685 30.538554 30.541533 30.626393 30.601187 30.614172 30.864577 30.569144 30.446496 30.733157 30.455376 30.703204 30.375533 30.624918 30.573452 30.85089 30.727065 30.738089 30.740403 30.624508 30.55009 30.438357 30.372282 30.35624 30.281958 30.139903 30.12602 30.079878 30.056885 29.956276 29.601279 29.590405 29.578227 29.386668 29.409628 29.118756 28.960545 28.692933 28.727585 28.54235 28.472105 28.453536 28.204188 27.952546 27.834109 27.720837 27.69569 26.576386 27.112692 26.159659 26.664984 25.79383 25.667414 25.476958 25.365283 25.176697 24.92321 24.917845 24.433419 24.479208 24.360732 24.083895 24.121256 23.902852 23.71756 23.552216 23.477852 23.307433 23.320307 22.985682 23.045229 22.988278 22.822949 22.928229 22.78422 22.748299 22.776888 22.703719 22.50279 22.58912 22.326762 22.340804 22.244183 22.11599 22.183955 22.197865 22.170184 22.028702 22.001009 21.920023 21.855002 21.896864 21.07752 21.324107 21.087935 21.083495 21.073494 21.098696 20.97004 21.02551 21.115036 21.048399 21.265265 21.138184 21.225769 21.226695 21.28128 21.31238 21.422522 21.170632 21.455559 21.275227 21.52707 21.488833 21.957446 21.77741 22.196709 21.962082 22.504462 22.652289 22.877982 22.854956 22.82283 22.864638 22.715144 22.738429 22.784832 22.871165 22.980315 22.859469 22.99483 22.948565 23.010104 23.086697 22.96563 23.068846 23.092753 23.05822 23.131955 23.405529 23.75708 23.980759 24.4472 24.636776 24.965392 24.995186 25.133572 25.307637 25.657614 25.89517 26.17485 26.278489 26.586415 26.890339 27.132952 27.29949 27.474606 27.704764 27.938752 28.164843 28.321852 28.426905 28.436648 28.596064 28.769764 28.886788 29.086215 29.117344 29.060973 29.297518 29.221493 29.190409 29.227808 29.172532 29.187867 29.20823 29.211302 29.150542 29.132876 29.23595 29.120043 29.157479 29.068045 29.022736 28.98612 28.950119 28.887562 28.859847 28.905175 28.887248 28.745818 29.099272 28.981482 28.973633 29.035893 29.042328 29.005385 28.975646 29.035578 29.043543 29.009055 29.041489 28.869299 28.848652))) newobj)) (list "performer on left side" "large circular movement" "-" "some other notes" "short gesture" "long gesture" "-"))) array)) nil nil (pairlis (quote (room-size show-room show-axes bg-color color-max color-min color-mode line-width winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list 2 0 1 nil (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0 1.0 (om-make-point 10 40) (om-make-point 890 726) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 349 176) (om-make-point 80 83) (load-buffer-textfile (quote ("performer on left side" "large circular movement" "-" "some other notes" "short gesture" "long gesture" "-" "-" "-" "-" "-" "-" "-" "-" "-" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 241 202) (om-make-point 90 30) "annotation" "\"annotation\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-ROW 2" (quote add-row) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "SLOTNAME" nil) (om-load-inputfun (quote input-funbox) "" "SLOTVALS" nil))) (om-make-point 233 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-acc.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 318 567) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-Geste" "OM-Geste" "resources" "audio")) :device nil :host nil :name "3D-acc" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "3D-acc.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 0 22) (om-make-point 1413 402) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 405 34) (quote "for study of musician's gestures, as compositional notes, etc.") "" (om-make-point 29 78) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 350 34) (quote "annotations, meta-data, audio, symbolic scores, etc.") "" (om-make-point 30 54) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 14.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GESTURE-MODEL 3" (quote gesture-model) (quote ((om-load-inputfun (quote input-funbox) "time-array object" "self" nil) (om-load-inputfun (quote input-funbox) "sorted list of onsets [seconds]" "times" (list 0)) (om-load-inputkeyword (quote control-keyword) "" "XA30" "XA30" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XRE0" "XRE0" nil nil) (om-load-inputkeyword (quote control-keyword) "" "XAA1" "XAA1" nil nil) (om-load-inputkeyword (quote control-keyword) "" "functions" "functions" nil nil))) (om-make-point 629 359) (om-make-point 140 127) (if (find-class (quote gesture-model) nil) (let ((array (make-instance (quote gesture-model) :numcols 10))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote times)) (list 0 1 2 3 4 5 6 7 8 9 10)) (setf (lcontrols array) (list (list "XA30" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj))) (list "XRE0" (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj))) (list "XAA1" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list "functions" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 13 33 56 100)) (quote (0 74 25 75 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (setf (data array) (list (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.409 0.409 0.41 0.407 0.407 0.407 0.41 0.412 0.417 0.423 0.414 0.421 0.426 0.43799996 0.436 0.44 0.429 0.436 0.4369301)) (quote (0.931 0.931 0.936 0.93499995 0.93499995 0.93499995 0.928 0.924 0.931 0.929 0.929 0.915 0.922 0.924 0.91 0.92 0.90599996 0.91 0.90906996)) (quote (-0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.141 -0.141 -0.148 -0.141 -0.141 -0.133 -0.137 -0.141 -0.137 -0.156 -0.152 -0.156 -0.148 -0.156 -0.164 -0.16 -0.156 -0.164 -0.16317326))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4369301 0.445 0.445 0.45 0.45 0.44700003 0.445 0.43799996 0.43100002 0.44300002 0.44700003 0.427 0.415 0.43100002 0.414 0.415 0.421 0.4109963)) (quote (0.90906996 0.90099997 0.90099997 0.90799994 0.90799994 0.897 0.90099997 0.90599996 0.90299994 0.91300005 0.924 0.91 0.90799994 0.92 0.92100007 0.90799994 0.924 0.922461)) (quote (-0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16317326 -0.156 -0.164 -0.148 -0.172 -0.172 -0.164 -0.16 -0.16 -0.168 -0.176 -0.168 -0.172 -0.172 -0.152 -0.176 -0.176 -0.17292193))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.4109963 0.408 0.403 0.41 0.396 0.407 0.393 0.4 0.377 0.393 0.382 0.363 0.364 0.346 0.364 0.344 0.343 0.325 0.32718143)) (quote (0.922461 0.922 0.924 0.936 0.92100007 0.917 0.928 0.93999994 0.951 0.9369999 0.9319999 0.944 0.961 0.9700001 0.9700001 0.956 0.9689999 0.951 0.9579806)) (quote (-0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.17292193 -0.172 -0.168 -0.164 -0.164 -0.176 -0.152 -0.16 -0.148 -0.18 -0.156 -0.145 -0.145 -0.148 -0.16 -0.164 -0.164 -0.148 -0.148))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.32718143 0.33 0.332 0.315 0.318 0.322 0.276 0.257 0.24500002 0.23499999 0.23299998 0.206 0.21899998 0.156 0.149 0.108 0.105 0.075 0.07356023)) (quote (0.9579806 0.96699995 0.981 0.955 0.97400004 0.96699995 0.9800001 0.9929999 0.99099994 1.003 0.998 0.97200007 0.99099994 0.987 0.992 0.95899994 0.9929999 0.97400004 0.97153175)) (quote (-0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.148 -0.148 -0.156 -0.156 -0.145 -0.152 -0.145 -0.145 -0.121 -0.137 -0.148 -0.152 -0.164 -0.172 -0.176 -0.211 -0.246 -0.285 -0.29189032))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.07356023 0.061 0.049 0.022 0.06 0.046 0.089 0.146 0.136 0.216 0.277 0.336 0.39 0.463 0.558 0.657 0.637 0.6731713)) (quote (0.97153175 0.95000005 0.9480001 0.922 0.854 0.829 0.785 0.739 0.669 0.612 0.611 0.488 0.44 0.38 0.327 0.318 0.182 0.1827696)) (quote (-0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29189032 -0.352 -0.398 -0.434 -0.492 -0.535 -0.562 -0.656 -0.703 -0.758 -0.781 -0.816 -0.734 -0.684 -0.652 -0.555 -0.477 -0.35617253))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6731713 0.684 0.639 0.608 0.6 0.661 0.621 0.76 0.811 0.581 0.694 0.411 0.127 0.099 0.363 0.385 0.552 0.849 0.84768916)) (quote (0.1827696 0.183 0.07 -0.01 -0.048 0.168 0.088 -0.027 0.18 -0.035 0.271 0.199 0.196 -0.152 -0.059 0.173 -0.128 -0.822 -0.9211848)) (quote (-0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.35617253 -0.32 -0.145 -0.012 0.094 0.293 0.445 0.473 0.641 0.844 1.109 1.359 1.391 1.566 1.867 1.996 1.164 0.44100004 0.31822068))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.84768916 0.846 1.072 1.188 0.728 0.821 0.761 0.284 0.682 0.343 0.292 0.505 0.583 0.21899998 0.565 0.478 0.638 0.615 0.62117285)) (quote (-0.9211848 -1.049 -0.77 -0.831 -0.841 -0.019 0.794 0.858 1.012 0.8870001 0.831 0.956 1.081 0.722 0.985 0.761 0.743 0.532 0.5367325)) (quote (0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.31822068 0.16 0.207 0.547 0.863 0.34 0.312 0.027 0.195 0.383 0.113 -0.129 -0.047 0.109 -0.09 -0.074 -0.074 -0.113 -0.11824691))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.62117285 0.675 0.752 0.623 0.89100004 0.847 0.676 0.724 0.87899995 0.813 0.6 1.031 0.827 0.697 0.656 0.721 0.721 0.6178727)) (quote (0.5367325 0.578 0.724 0.588 0.652 0.484 0.531 0.567 0.569 0.563 0.44700003 0.659 0.335 0.372 0.187 0.106 0.258 0.27800977)) (quote (-0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.11824691 -0.164 -0.109 -0.172 -0.152 -0.22699999 -0.238 -0.21899998 -0.211 -0.258 -0.266 -0.375 -0.22300002 -0.195 -0.371 -0.531 -0.535 -0.59810776))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.6178727 0.587 0.383 0.585 0.419 0.333 0.122 0.336 -0.021 -0.985 -1.103 -1.594 -1.439 -0.768 -0.089 0.613 0.162 0.716 0.8595158)) (quote (0.27800977 0.284 0.186 0.379 0.129 0.057 -0.197 -0.21899998 0.116 0.144 1.311 1.446 0.848 1.112 -0.095 -0.163 -0.863 -0.986 -1.0867664)) (quote (-0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.59810776 -0.617 -1.0 -1.059 -1.043 -1.105 -1.012 -1.023 -0.961 -1.578 -0.984 -1.23 -1.105 -0.645 -0.934 -0.434 -0.273 -0.703 -0.91107607))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.8595158 1.045 0.325 0.328 0.069 -0.537 -0.228 -0.143 -1.131 -1.389 -1.324 -0.709 -0.324 -0.817 0.01 0.593 0.18 0.599 0.60600394)) (quote (-1.0867664 -1.217 -0.832 -0.857 -0.986 -1.167 -1.798 -2.287 -2.244 -1.614 -1.8470001 -1.046 -1.303 -1.172 -0.308 0.2 -0.264 0.008 0.017578945)) (quote (-0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.91107607 -1.18 -1.059 -1.027 -1.047 -0.809 -0.738 -0.406 -0.363 -0.59 -1.477 -1.648 -1.766 -1.996 -1.605 -1.156 -0.578 -0.461 -0.45657104))) newobj)) (list (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.157 1.157 1.158 1.16 1.16 1.16 1.154 1.151 1.149 1.144 1.152 1.14 1.138 1.128 1.124 1.125 1.129 1.124 1.1227599)) (quote (-0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659)) (quote (0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397902 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.873824 0.93384004 0.99379904 1)) (setf (z-points newobj) (list -0.137 -0.137 -0.144 -0.137 -0.137 -0.13 -0.134 -0.138 -0.133 -0.152 -0.149 -0.154 -0.145 -0.152 -0.161 -0.156 -0.155 -0.161 -0.16027659))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1227599 1.112 1.112 1.11 1.11 1.109 1.112 1.121 1.126 1.119 1.12 1.132 1.142 1.133 1.149 1.142 1.144 1.1516953)) (quote (-0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097)) (quote (1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 1 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.833766 1.893738 1.9538051 2)) (setf (z-points newobj) (list -0.16027659 -0.154 -0.162 -0.145 -0.168 -0.17 -0.162 -0.158 -0.159 -0.164 -0.17 -0.166 -0.17 -0.168 -0.15 -0.174 -0.171 -0.16946097))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.1516953 1.154 1.159 1.158 1.164 1.154 1.17 1.169 1.193 1.174 1.181 1.203 1.209 1.228 1.212 1.225 1.231 1.242 1.242)) (quote (-0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114)) (quote (2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 2 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3)) (setf (z-points newobj) (list -0.16946097 -0.169 -0.165 -0.159 -0.162 -0.173 -0.15 -0.156 -0.144 -0.175 -0.154 -0.142 -0.14 -0.143 -0.153 -0.16 -0.158 -0.147 -0.14569114))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.242 1.242 1.244 1.253 1.255 1.25 1.296 1.317 1.328 1.341 1.341 1.362 1.353 1.414 1.422 1.458 1.465 1.494 1.4953369)) (quote (-0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888)) (quote (3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 3 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.453824 3.5138913 3.573803 3.633822 3.693838 3.753793 3.8137992 3.873799 3.933832 3.99383 4)) (setf (z-points newobj) (list -0.14569114 -0.144 -0.15 -0.154 -0.14 -0.148 -0.141 -0.14 -0.118 -0.132 -0.144 -0.152 -0.16 -0.17 -0.173 -0.21500002 -0.242 -0.284 -0.29119888))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (1.4953369 1.507 1.519 1.547 1.501 1.516 1.458 1.376 1.37 1.232 1.146 0.96699995 0.846 0.688 0.529 0.451 0.279 0.26591676)) (quote (-0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928)) (quote (4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 4 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5)) (setf (z-points newobj) (list -0.29119888 -0.354 -0.397 -0.439 -0.522 -0.572 -0.619 -0.717 -0.8 -0.863 -0.861 -0.9430001 -0.895 -0.851 -0.79 -0.649 -0.624 -0.47084928))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.26591676 0.262 0.11 -0.016 -0.08 0.24899999 0.141 -0.036 0.218 -0.061 0.372 0.451 0.997 -0.99 -0.161 0.423 -0.22699999 -0.769 -0.8227433)) (quote (-0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512)) (quote (5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 5 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6)) (setf (z-points newobj) (list -0.47084928 -0.425 -0.22100002 -0.019 0.154 0.406 0.617 0.556 0.657 0.96699995 0.9800001 1.246 1.405 1.456 1.377 1.362 1.118 0.358 0.25313512))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.8227433 -0.8920001 -0.623 -0.611 -0.857 -0.023 0.806 1.251 0.97700006 1.201 1.233 1.085 1.076 1.276 1.05 1.01 0.861 0.713 0.7125885)) (quote (0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964)) (quote (6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 6 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.873861 6.933865 6.99383 7)) (setf (z-points newobj) (list 0.25313512 0.118 0.156 0.361 0.66 0.392 0.277 0.03 0.159 0.383 0.128 -0.119 -0.038 0.144 -0.079 -0.082 -0.076 -0.138 -0.14262964))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.7125885 0.709 0.767 0.757 0.632 0.519 0.666 0.665 0.574 0.606 0.64 0.569 0.385 0.49000004 0.278 0.146 0.344 0.42634794)) (quote (-0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018)) (quote (7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 7 7.0538006 7.113828 7.173738 7.233828 7.293816 7.353865 7.4138713 7.473879 7.5338283 7.594018 7.653828 7.71385 7.77383 7.833844 7.893832 7.9538303 8)) (setf (z-points newobj) (list -0.14262964 -0.183 -0.104 -0.198 -0.137 -0.228 -0.27 -0.234 -0.199 -0.255 -0.341 -0.297 -0.244 -0.242 -0.49799997 -0.63 -0.61 -0.7239018))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (0.42634794 0.451 0.451 0.574 0.299 0.169 -1.019 -0.578 1.7519999 2.997 2.27 2.405 2.609 2.175 -2.321 -0.261 -1.385 -0.9430001 -0.9072301)) (quote (-0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202)) (quote (8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 8 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9)) (setf (z-points newobj) (list -0.7239018 -0.758 -1.168 -0.98899997 -1.173 -1.274 -1.346 -1.197 -1.449 -1.008 -0.522 -0.519 -0.585 -0.445 -1.433 -0.6 -0.302 -0.523 -0.5714202))) newobj) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote (-0.9072301 -0.861 -1.199 -1.205 -1.501 -2.002 -1.697 -1.633 -2.038 -2.281 -2.193 -2.166 -1.815 -2.179 -1.538 0.326 -0.973 0.013 0.027213915)) (quote (-0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971)) (quote (9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (quote 3d-trajectory) 10 (quote nil) (quote dist)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote dist)) (setf (sample-params newobj) nil) (setf (times newobj) (list 9 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10)) (setf (z-points newobj) (list -0.5714202 -0.634 -0.87 -0.842 -0.814 -0.562 -0.387 -0.175 -0.144 -0.27 -0.576 -0.917 -0.92100007 -0.95000005 -1.381 -1.075 -1.065 -0.656 -0.6455971))) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.033777003 0.093838 0.15383 0.213818 0.273826 0.33377302 0.393824 0.45397905 0.51381404 0.573824 0.63378305 0.693828 0.75378305 0.813795 0.87382406 0.9338401 0.9937991 1.0)) (quote (0.011 0.011 0.01 0.009 0.0 0.008 0.009 0.006 0.01 0.02 0.01 0.016 0.012 0.015 0.016 0.012 0.018 0.011 0.01141337)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 1.053803 1.113828 1.173787 1.233828 1.293781 1.353797 1.4138261 1.4739771 1.533803 1.593791 1.653834 1.713883 1.773824 1.8337659 1.893738 1.9538051 2.0)) (quote (0.01141337 0.015 0.008 0.018 0.023 0.011 0.009 0.01 0.008 0.018 0.014 0.025 0.013 0.02 0.026 0.026 0.017 0.013921933)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0 2.0138362 2.0738182 2.133832 2.193873 2.253805 2.313842 2.373826 2.433826 2.4939099 2.5537949 2.613793 2.673859 2.733799 2.793818 2.853842 2.9137972 2.973822 3.0)) (quote (0.013921933 0.013 0.007 0.015 0.021 0.016 0.029 0.016 0.028 0.038 0.026 0.026 0.017 0.02 0.021 0.024 0.012 0.029 0.023764585)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0 3.033824 3.0937438 3.1538182 3.213816 3.273826 3.3338259 3.393805 3.4538243 3.5138913 3.573803 3.6338222 3.693838 3.7537933 3.8137992 3.8737989 3.933832 3.9938298 4.0)) (quote (0.023764585 0.017 0.016 0.031 0.023 0.011 0.048 0.023 0.026 0.022 0.013 0.037 0.026 0.064 0.01 0.063 0.048 0.053 0.054953978)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0 4.053826 4.113787 4.1737967 4.233793 4.29383 4.3538218 4.413797 4.473773 4.533982 4.5938263 4.653812 4.713777 4.773807 4.833828 4.8938217 4.9538093 5.0)) (quote (0.054953978 0.072 0.048 0.051 0.098 0.051 0.068 0.119 0.085 0.112 0.065 0.141 0.109 0.107 0.114 0.14 0.158 0.16184801)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0 5.0138283 5.0738053 5.1337986 5.193809 5.253824 5.313812 5.37383 5.433824 5.493832 5.553977 5.613812 5.673869 5.733814 5.79382 5.853787 5.913832 5.973789 6.0)) (quote (0.16184801 0.163 0.214 0.158 0.112 0.3 0.176 0.182 0.272 0.375 0.42 0.384 0.287 0.39 0.41 0.266 0.9 1.045 0.746135)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0 6.0337768 6.0938463 6.15384 6.2138443 6.273826 6.333852 6.393766 6.4538217 6.5138264 6.573996 6.633791 6.693859 6.753869 6.813834 6.8738604 6.933865 6.9938297 7.0)) (quote (0.746135 0.361 0.361 0.364 0.558 0.97900004 0.816 0.56 0.45900002 0.407 0.28 0.346 0.169 0.535 0.478 0.24099998 0.161 0.216 0.20313992)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0 7.0538 7.1138277 7.1737375 7.2338286 7.293816 7.353865 7.4138713 7.473879 7.5338287 7.5940175 7.653828 7.71385 7.7738295 7.833844 7.8938327 7.95383 8.0)) (quote (0.20313992 0.091 0.174 0.198 0.277 0.19 0.178 0.063 0.156 0.082 0.24300002 0.493 0.412 0.138 0.258 0.191 0.152 0.15738724)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8.0 8.013822 8.073793 8.1337595 8.193795 8.253838 8.313827 8.373834 8.433832 8.493826 8.553785 8.613998 8.673838 8.733738 8.793781 8.853828 8.913787 8.973832 9.0)) (quote (0.15738724 0.159 0.445 0.285 0.3 0.129 0.343 0.216 0.494 1.145 1.314 0.566 0.63 0.856 1.415 0.864 0.848 0.712 0.6736128)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9.0 9.03382 9.093858 9.15382 9.213824 9.273896 9.333867 9.3938265 9.453811 9.513879 9.573877 9.63399 9.693824 9.7537985 9.813842 9.873809 9.933828 9.99382 10.0)) (quote (0.6736128 0.624 0.825 0.04 0.29 0.677 0.707 0.597 0.99 0.718 0.9190001 1.024 0.477 0.559 1.259 0.89400006 0.849 0.514 0.47372723)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list 0.0 63.247864 51.405552 25.724638 49.879227 74.03381 81.06061 87.37373 93.68687 100.0))) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos line-width color-mode color-min color-max bg-color show-axes show-room room-size cursor-mode obj-mode fontsize mode zoom score-mode notechancolor? show-stems approx cmnpref staff grillestep scale player outport)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil))) 0 (quote t) nil (om-make-point 1087 619) (om-make-point 0 22) 1.0 0 (list 0.4 0.8 1.0) (list 0.0 0.9 1.0) nil 1 1 20 (quote :normal) 1 24 0 27/10 0 nil (quote t) 2 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 1000 nil (quote :microplayer) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 613 197) (om-make-point 81 30) "functions" "\"functions\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-ROW 2" (quote add-row) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "SLOTNAME" nil) (om-load-inputfun (quote input-funbox) "" "SLOTVALS" nil))) (om-make-point 623 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 513 44) (quote "Extend/Associate gesture-model with arbitrary external data") "" (om-make-point 21 2) nil (om-make-color 0.013653278 0.0 1.0) (om-make-font "Apercu Pro" 18.0 :family "Apercu Pro" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 3 0 nil 0) (2 0 3 1 nil 0) (9 0 8 0 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (3 0 9 2 nil 0) (16 0 11 0 nil 0) (15 0 13 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (23 0 15 2 nil 0) (22 0 19 0 nil 0) (0 0 22 0 nil 0) (21 0 22 1 nil 0) (20 1 22 2 nil 0) (28 0 26 0 nil 0) (18 0 28 0 nil 0) (27 0 28 1 nil 0) (1 0 28 2 nil 0))) nil 6.0901))
