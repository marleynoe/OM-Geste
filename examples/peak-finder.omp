; OM File Header - Saved 2015/05/13 19:01:48
; (6.0901 :patc (om-make-point 64 10) (om-make-point 50 50) (om-make-point 686 573) "" 183 0 "2015/05/13 18:46:53" "2015/05/13 18:46:53")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Geste")))(setf *om-current-persistent* (om-load-patch1 "03-peak-finder" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 260 78) (quote "find-peaks attempts to find the N peaks or troughs in the signal with the  greatest distance to neighbouring peaks/troughs") "" (om-make-point 310 214) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 5))) (om-make-point 101 60) (om-make-point 118 112) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.0 14300.0 14400.0 14500.0 14600.0 14700.0 14800.0 14900.0 15000.0 15100.0 15200.0 15300.0 15400.0 15500.0 15600.0 15700.0 15800.0 15900.0 16000.0 16100.0 16200.0 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0)) (quote (-1.25008 -0.54218 -0.9091 -1.04093 -1.03315 -0.86887 -1.37458 -1.53996 -1.28535 -1.53656 -0.70426 -1.16821 -1.22848 -0.78221 -1.15369 -1.15536 -0.93595 -1.15232 -0.59164 -1.28977 -0.65505 -1.00567 -0.12322 -0.38105 -0.34566 -0.13674 0.59892 1.18879 1.63637 1.94101 1.84884 2.03075 1.18966 1.68911 1.5659 1.54986 1.41382 0.9674 0.01206 0.04296 1.2748 1.49414 1.57824 2.17652 2.38894 2.22753 1.58141 1.35289 1.04544 1.36547 3.04643 3.58388 4.42804 4.18621 3.85048 2.84613 1.96122 0.62465 -0.31967 -0.84093 0.26865 0.69947 1.94533 2.09539 3.03535 3.20222 3.20307 2.25079 1.31651 1.93696 1.66459 2.84663 3.20572 2.59379 1.96072 0.96615 -0.04195 1.28466 2.24345 3.47642 3.85496 3.7907 3.29014 2.48647 3.15303 3.36346 3.58823 4.25309 4.37304 4.11216 2.54712 1.65107 0.57946 -0.44111 -0.01519 -0.07109 0.3701 -0.20837 -0.17261 0.48498 0.66377 0.95263 1.35443 1.91703 1.23607 1.35946 1.20229 0.48714 1.30571 0.88093 1.47314 1.48141 1.77877 1.06756 0.36958 -0.29287 0.29929 -0.24257 -0.19096 -1.11351 -1.2432 -0.35155 -0.88546 -0.64209 -0.46822 -0.79261 -0.13766 -0.13587 -0.70874 -0.71799 -0.19055 0.759 1.0688 0.82041 0.58986 1.00767 0.44286 0.43742 -0.74231 -0.27464 0.14517 -0.48915 -0.03306 0.10186 -0.40034 0.14921 0.55213 0.92698 1.63278 1.42625 1.77582 2.07482 2.53485 2.61526 3.01248 4.19576 3.94697 3.86647 1.9847 0.7151 -0.25887 -1.35213 -1.14539 -1.66622 -1.03716 -1.71861 -1.00737 -1.09547 -1.93811)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1943 -289) (om-make-point 797 394))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "FIND-PEAKS" (quote find-peaks) (quote ((om-load-inputfun (quote input-funbox) "a bpf or point-list" "SELF" (list (list 0 1) (list 5 10) (list 10 1))) (om-load-inputfunmenu1 (quote input-funmenu) "mode (Peak or Trough)" "MODE" (quote peak) (list (list "peak" (quote (quote peak))) (list "trough" (quote (quote trough))))) (om-load-inputkeyword (quote input-keyword) "Number of Peaks to find" "numpeaks" (quote :numpeaks) nil nil))) (om-make-point 204 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 1 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 291 104) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 114 24) "untitled" :direction :horizontal :range (quote (1 15)) :increment 1 :value 12))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 82 360) (om-make-point 233 140) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3699.9998 3800.0 3900.0003 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0005 7200.0 7300.0 7399.9995 7500.0 7600.0 7699.9995 7800.0005 7900.0 8000.0 8099.9995 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.001 14300.0 14400.0 14499.999 14600.0 14700.0 14799.999 14900.0 15000.0 15099.999 15200.0 15300.001 15399.999 15500.0 15600.001 15700.0 15800.0 15900.001 16000.0 16100.0 16199.999 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0)) (quote (-1.25008 -0.54218 -0.90910006 -1.04093 -1.03315 -0.86887 -1.37458 -1.53996 -1.28535 -1.53656 -0.70426 -1.16821 -1.22848 -0.78221 -1.15369 -1.15536 -0.93595005 -1.15232 -0.59164 -1.28977 -0.65505 -1.00567 -0.12322 -0.38105002 -0.34566 -0.13674 0.59892 1.18879 1.6363701 1.94101 1.84884 2.0307498 1.18966 1.68911 1.5659 1.54986 1.41382 0.9674 0.01206 0.04296 1.2748001 1.49414 1.57824 2.1765199 2.38894 2.22753 1.58141 1.35289 1.04544 1.36547 3.0464299 3.58388 4.42804 4.1862097 3.85048 2.84613 1.9612202 0.62465 -0.31967 -0.84093 0.26865 0.69947 1.94533 2.0953899 3.03535 3.20222 3.20307 2.25079 1.31651 1.9369599 1.66459 2.84663 3.20572 2.59379 1.96072 0.96615005 -0.04195 1.28466 2.2434502 3.4764202 3.8549598 3.7907002 3.2901402 2.48647 3.15303 3.36346 3.58823 4.2530904 4.3730397 4.1121597 2.5471199 1.65107 0.57945997 -0.44111002 -0.01519 -0.07109 0.3701 -0.20837 -0.17261 0.48498002 0.66377 0.95263 1.35443 1.91703 1.23607 1.35946 1.2022899 0.48714 1.30571 0.88093 1.47314 1.48141 1.77877 1.0675601 0.36958 -0.29287 0.29929 -0.24257002 -0.19096 -1.11351 -1.2432 -0.35155 -0.88545996 -0.64208997 -0.46822 -0.79261 -0.13766001 -0.13587001 -0.70874 -0.71799 -0.19055 0.759 1.0688 0.82041 0.58986 1.0076699 0.44285998 0.43741998 -0.74231 -0.27464 0.14517 -0.48915002 -0.03306 0.10186 -0.40034 0.14920999 0.55213 0.92698 1.63278 1.42625 1.77582 2.07482 2.53485 2.61526 3.01248 4.1957603 3.94697 3.86647 1.9847 0.7151 -0.25886998 -1.35213 -1.14539 -1.6662201 -1.03716 -1.7186099 -1.00737 -1.09547 -1.9381101)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2976.7722 3380.2124 4456.8228 5277.732 6600.0894 7236.9805 8085.4873 8831.497 10345.241 14877.362 14937.138 15582.626)) (quote (1.8702489 1.5902803 2.2972224 4.240061 3.202219 2.9794255 3.8000255 4.2908707 1.6089555 1.4730036 1.5560722 3.990195)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1704 134) (om-make-point 1084 641))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 114 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box))) (quote ((1 0 2 0 nil 0) (3 3 2 2 nil 0) (5 0 4 1 nil 0) (1 0 5 0 nil 0) (2 0 5 1 nil 0))) nil 6.0901))
