; OM File Header - Saved 2015/05/13 19:01:48
; (6.0901 :patc (om-make-point 172 310) (om-make-point 50 32) (om-make-point 1390 935) "" 183 0 "2015/05/13 18:47:15" "2015/05/13 18:47:42")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Geste")))(setf *om-current-persistent* (om-load-patch1 "01-filters 2" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 97 30) (quote "also in 2D/3D") "" (om-make-point 886 506) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SMM 2" (quote smm) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "WINDOWSIZE" 5))) (om-make-point 1077 649) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "SMA 2" (quote sma) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "WINDOWSIZE" 5))) (om-make-point 1023 649) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "EMA 2" (quote ema) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "ALPHA" 10))) (om-make-point 969 649) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER 6" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 1053 552) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 15)) :increment 1 :value 15))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 5))) (om-make-point 897 540) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.05861 0.05861 0.06166 0.0679 0.07393 0.0834 0.08949 0.09896 0.10778 0.1143 0.12059 0.12316 0.12269 0.12059 0.11395 0.10488 0.09216 0.07706 0.05861 0.03694 0.01525 -0.00565 -0.0271 -0.0492 -0.07122 -0.0861 -0.09756 -0.10684 -0.11047 -0.11114 -0.10153 -0.08698 -0.06682 -0.04378 -0.0125 0.0214 0.05861 0.09883 0.13831 0.17936 0.21413 0.25133 0.28495 0.30991 0.32555 0.33421 0.33617 0.32787 0.31455 0.2883 0.25511 0.2172 0.16987 0.11355 0.05861 5.7E-4 -0.05665 -0.11759 -0.17019 -0.21676 -0.26157 -0.293 -0.31442 -0.33462 -0.32393 -0.31548 -0.28641 -0.25574 -0.21386 -0.1597 -0.08691 -0.01354 0.05861 0.13158 0.23055 0.32519 0.36301 0.40706 0.39341 0.54362 0.6674 0.5838 0.66314 0.4614 0.63512 0.38353 0.31918 0.24894 0.20137 0.11555 0.05861 -0.05177 -0.07243 -0.17325 -0.24383 -0.35036 -0.3597 -0.60691 -0.49443 -0.66426 -0.55687 -0.48359 -0.43174 -0.39409 -0.28578 -0.29769 -0.19509 -0.04586 0.05861 0.17472 0.27941 0.41338 0.49585 0.58254 0.65685 0.72276 0.76227 0.76946 0.77278 0.75107 0.70652 0.63107 0.54359 0.43476 0.32183 0.1905 0.05861 -0.07609 -0.21299 -0.34226 -0.45729 -0.55836 -0.64576 -0.71533 -0.75966 -0.77786 -0.77322 -0.73035 -0.67525 -0.60065 -0.49312 -0.37632 -0.2419 -0.09642 0.05861 0.21168 0.36598 0.50604 0.6447 0.77638 0.85912 0.93079 0.97436 1.0 0.99878 0.95989 0.88197 0.79542 0.68814 0.55034 0.39291 0.23116 0.05861 -0.11774 -0.28816 -0.45163 -0.59256 -0.7299 -0.83564 -0.90917 -0.97357 -1.0 -0.98063 -0.93534 -0.86394 -0.75733 -0.63188 -0.48333 -0.31737 -0.13208 0.05861)) (quote (-0.05292 -0.04707 -0.04126 -0.03835 -0.03543 -0.03542 -0.0353 -0.03824 -0.04421 -0.05292 -0.06177 -0.07629 -0.08799 -0.10235 -0.11377 -0.12841 -0.14029 -0.14943 -0.1582 -0.16178 -0.16436 -0.15758 -0.15236 -0.14131 -0.12369 -0.10277 -0.07943 -0.05292 -0.02383 0.00592 0.03557 0.06305 0.09009 0.11315 0.13264 0.14826 0.15568 0.16229 0.15655 0.14602 0.12406 0.10358 0.07066 0.03148 -0.00944 -0.05292 -0.09934 -0.14603 -0.19381 -0.23526 -0.27864 -0.31262 -0.33817 -0.35796 -0.36749 -0.37199 -0.36115 -0.34147 -0.31456 -0.27433 -0.22891 -0.17632 -0.11756 -0.05292 0.01237 0.07454 0.14172 0.19618 0.25852 0.28969 0.33589 0.33192 0.373 0.35684 0.35272 0.32953 0.23779 0.20453 0.20157 0.0868 0.01838 -0.05292 -0.14005 -0.2066 -0.30866 -0.41546 -0.3168 -0.39191 -0.46122 -0.36973 -0.47692 -0.71321 -0.43046 -0.36336 -0.39572 -0.41786 -0.27575 -0.27592 -0.15634 -0.05292 0.04113 0.10312 0.3003 0.30347 0.42018 0.47311 0.56152 0.51271 0.51807 0.62252 0.57945 0.51961 0.45672 0.3739 0.27908 0.18098 0.06493 -0.05292 -0.17254 -0.28934 -0.40343 -0.51396 -0.60638 -0.67777 -0.736 -0.76349 -0.79744 -0.79282 -0.76622 -0.70037 -0.63173 -0.54163 -0.44064 -0.31668 -0.19168 -0.05292 0.08392 0.22347 0.34979 0.46949 0.56687 0.66264 0.73194 0.77217 0.78279 0.7866 0.75312 0.69507 0.60864 0.50745 0.38256 0.24955 0.10296 -0.05292 -0.20828 -0.36428 -0.50466 -0.64089 -0.75678 -0.861 -0.93256 -0.98106 -0.99938 -1.0 -0.95307 -0.88862 -0.79194 -0.68513 -0.54006 -0.39298 -0.22494 -0.05292 0.12371 0.2927 0.45255 0.60649 0.73087 0.83982 0.92286 0.97076 1.0)) (quote (-1.0 -0.98885 -0.9777 -0.96645 -0.95537 -0.9443 -0.93327 -0.92237 -0.91037 -0.90092 -0.88814 -0.87899 -0.86604 -0.85622 -0.84457 -0.83392 -0.82158 -0.81033 -0.79877 -0.79099 -0.77582 -0.76715 -0.75547 -0.7455 -0.73391 -0.72251 -0.71356 -0.70106 -0.68987 -0.67742 -0.66557 -0.65806 -0.64249 -0.63483 -0.6218 -0.61364 -0.60234 -0.58543 -0.57544 -0.56303 -0.55576 -0.54099 -0.53223 -0.52428 -0.5096 -0.50158 -0.485 -0.47716 -0.47211 -0.45937 -0.44395 -0.43137 -0.42025 -0.40653 -0.40339 -0.38951 -0.36913 -0.36893 -0.34774 -0.33734 -0.33397 -0.32961 -0.30304 -0.29959 -0.28321 -0.27449 -0.28027 -0.24309 -0.23102 -0.25661 -0.25022 -0.17589 -0.28298 -0.18107 -0.15954 -0.29531 -0.21591 -0.11292 0.00325 -0.15794 -0.12965 -0.24602 -0.26434 -0.35417 0.15003 0.25928 -0.19404 -0.40306 -0.28255 -0.27113 -0.33258 0.20435 0.41404 -0.2476 -0.16352 0.34727 -0.17908 0.32392 0.2065 0.1892 0.08558 0.07452 0.11565 0.21937 0.25863 0.28584 0.23089 0.22853 0.14112 0.26483 0.30169 0.24059 0.21349 0.27862 0.25164 0.26074 0.31206 0.31169 0.31601 0.33476 0.35029 0.34903 0.35326 0.37269 0.38376 0.37772 0.40679 0.40281 0.41811 0.44001 0.45989 0.4679 0.4704 0.47439 0.47396 0.49362 0.50024 0.51367 0.54846 0.55858 0.54125 0.5704 0.5921 0.57543 0.60754 0.60042 0.62576 0.64312 0.64297 0.65764 0.66465 0.66941 0.68435 0.70283 0.7048 0.70582 0.74579 0.75081 0.73912 0.78267 0.79113 0.79342 0.79014 0.82181 0.82583 0.83386 0.83173 0.86297 0.86149 0.8874 0.89973 0.88878 0.89847 0.91133 0.91911 0.96274 0.93716 0.98473 0.98448 0.97222 1.0)) (quote 3dc) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -1.0 -0.98885 -0.9777 -0.96645 -0.95537 -0.9443 -0.93327 -0.92237 -0.91037 -0.90092 -0.88814 -0.87899 -0.86604 -0.85622 -0.84457 -0.83392 -0.82158 -0.81033 -0.79877 -0.79099 -0.77582 -0.76715 -0.75547 -0.7455 -0.73391 -0.72251 -0.71356 -0.70106 -0.68987 -0.67742 -0.66557 -0.65806 -0.64249 -0.63483 -0.6218 -0.61364 -0.60234 -0.58543 -0.57544 -0.56303 -0.55576 -0.54099 -0.53223 -0.52428 -0.5096 -0.50158 -0.485 -0.47716 -0.47211 -0.45937 -0.44395 -0.43137 -0.42025 -0.40653 -0.40339 -0.38951 -0.36913 -0.36893 -0.34774 -0.33734 -0.33397 -0.32961 -0.30304 -0.29959 -0.28321 -0.27449 -0.28027 -0.24309 -0.23102 -0.25661 -0.25022 -0.17589 -0.28298 -0.18107 -0.15954 -0.29531 -0.21591 -0.11292 0.00325 -0.15794 -0.12965 -0.24602 -0.26434 -0.35417 0.15003 0.25928 -0.19404 -0.40306 -0.28255 -0.27113 -0.33258 0.20435 0.41404 -0.2476 -0.16352 0.34727 -0.17908 0.32392 0.2065 0.1892 0.08558 0.07452 0.11565 0.21937 0.25863 0.28584 0.23089 0.22853 0.14112 0.26483 0.30169 0.24059 0.21349 0.27862 0.25164 0.26074 0.31206 0.31169 0.31601 0.33476 0.35029 0.34903 0.35326 0.37269 0.38376 0.37772 0.40679 0.40281 0.41811 0.44001 0.45989 0.4679 0.4704 0.47439 0.47396 0.49362 0.50024 0.51367 0.54846 0.55858 0.54125 0.5704 0.5921 0.57543 0.60754 0.60042 0.62576 0.64312 0.64297 0.65764 0.66465 0.66941 0.68435 0.70283 0.7048 0.70582 0.74579 0.75081 0.73912 0.78267 0.79113 0.79342 0.79014 0.82181 0.82583 0.83386 0.83173 0.86297 0.86149 0.8874 0.89973 0.88878 0.89847 0.91133 0.91911 0.96274 0.93716 0.98473 0.98448 0.97222 1.0))) newobj) "x" nil (pairlis (quote (picture line-width room-size show-room show-axes mode winpos winsize bg-color)) (list nil 1.0 10 0 1 0 (om-make-point 773 59) (om-make-point 800 800) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1025 737) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "3DC-LIB" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 919 780) (om-make-point 150 112) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.05861 0.05861 0.05881 0.05942 0.06039 0.06192 0.06376 0.06611 0.06888 0.07191 0.07516 0.07836 0.08131 0.08393 0.08593 0.0872 0.08753 0.08683 0.08495 0.08175 0.07731 0.07178 0.06519 0.05756 0.04898 0.03997 0.0308 0.02163 0.01282 0.00456 -0.00251 -0.00815 -0.01206 -0.01417 -0.01406 -0.0117 -0.00701 5.0E-5 0.00926 0.0206 0.03351 0.04803 0.06382 0.08023 0.09658 0.11242 0.12734 0.14071 0.1523 0.16137 0.16762 0.17092 0.17085 0.16703 0.1598 0.14919 0.13546 0.11859 0.09934 0.07827 0.05561 0.03237 0.00925 -0.01367 -0.03436 -0.0531 -0.06865 -0.08112 -0.08997 -0.09462 -0.09411 -0.08874 -0.07891 -0.06488 -0.04519 -0.02049 0.00507 0.03187 0.05597 0.08848 0.12708 0.15753 0.19123 0.20925 0.23764 0.24736 0.25215 0.25194 0.24857 0.2397 0.22763 0.209 0.19024 0.166 0.13868 0.10608 0.07503 0.02957 -0.00537 -0.04929 -0.08313 -0.10983 -0.13129 -0.14881 -0.15794 -0.16726 -0.16911 -0.1609 -0.14626 -0.12486 -0.09791 -0.06383 -0.02651 0.01409 0.05694 0.10133 0.14539 0.187 0.22605 0.26105 0.29075 0.31344 0.32878 0.33584 0.33491 0.32528 0.3075 0.28193 0.24894 0.20952 0.16507 0.11684 0.066 0.01391 -0.03766 -0.08701 -0.13275 -0.17259 -0.2061 -0.23241 -0.24979 -0.25822 -0.25714 -0.24642 -0.22609 -0.1969 -0.15938 -0.11501 -0.06437 -0.00832 0.04951 0.10826 0.166 0.2216 0.27342 0.31918 0.3567 0.38595 0.40609 0.41571 0.41419 0.40199 0.3791 0.34597 0.3037 0.25334 0.19695 0.13516 0.07044 0.00513 -0.06011 -0.12277 -0.17996 -0.23032 -0.27256 -0.30488 -0.32668 -0.33712 -0.33581 -0.32223 -0.29684)) (quote (-0.05292 -0.05253 -0.05178 -0.05088 -0.04985 -0.04889 -0.04798 -0.04734 -0.04713 -0.04751 -0.04846 -0.05032 -0.05283 -0.05613 -0.05997 -0.06454 -0.06959 -0.07491 -0.08046 -0.08588 -0.09112 -0.09555 -0.09933 -0.10213 -0.10357 -0.10352 -0.10191 -0.09864 -0.09366 -0.08702 -0.07885 -0.06939 -0.05875 -0.04729 -0.0353 -0.02306 -0.01115 4.2E-4 0.01083 0.01984 0.02679 0.03191 0.03449 0.03429 0.03137 0.02575 0.01741 0.00652 -0.00684 -0.02206 -0.03917 -0.0574 -0.07612 -0.09491 -0.11308 -0.13034 -0.14573 -0.15878 -0.16916 -0.17617 -0.17969 -0.17946 -0.17534 -0.16718 -0.15521 -0.13989 -0.12112 -0.09996 -0.07606 -0.05168 -0.02584 -0.00199 0.02301 0.04526 0.06576 0.08334 0.09364 0.10103 0.10774 0.10634 0.10048 0.09025 0.0749 0.05613 0.03181 0.00199 -0.01926 -0.0441 -0.07191 -0.09177 -0.11744 -0.15716 -0.17538 -0.18791 -0.20177 -0.21617 -0.22014 -0.22386 -0.21936 -0.20827 -0.19164 -0.17199 -0.1405 -0.1109 -0.0755 -0.03892 0.0011 0.03521 0.0674 0.10441 0.13608 0.16165 0.18132 0.19416 0.19982 0.19856 0.18966 0.17348 0.15042 0.1211 0.08613 0.04612 0.00262 -0.04274 -0.08895 -0.13392 -0.17816 -0.21913 -0.25561 -0.28526 -0.30836 -0.32391 -0.33169 -0.33069 -0.32142 -0.30352 -0.27769 -0.24428 -0.20468 -0.15973 -0.11129 -0.0597 -0.00692 0.04502 0.0942 0.14036 0.18121 0.21547 0.24168 0.2594 0.26761 0.26641 0.25551 0.23495 0.2054 0.16742 0.12262 0.07172 0.01648 -0.04202 -0.10139 -0.16003 -0.21599 -0.26826 -0.31391 -0.35222 -0.38154 -0.40178 -0.411 -0.4098 -0.39747 -0.3745 -0.34129 -0.29902 -0.24892 -0.19189 -0.13037 -0.06569 2.1E-4 0.06491 0.12725)) (quote (-1.0 -0.99926 -0.99782 -0.99573 -0.99304 -0.98979 -0.98602 -0.98178 -0.97702 -0.97194 -0.96636 -0.96053 -0.95423 -0.9477 -0.94082 -0.9337 -0.92622 -0.9185 -0.91051 -0.90255 -0.8941 -0.88563 -0.87696 -0.86819 -0.85924 -0.85013 -0.84102 -0.83169 -0.82224 -0.81258 -0.80278 -0.79313 -0.78309 -0.77321 -0.76311 -0.75315 -0.74309 -0.73258 -0.72211 -0.7115 -0.70112 -0.69044 -0.6799 -0.66952 -0.65886 -0.64837 -0.63748 -0.62679 -0.61648 -0.60601 -0.5952 -0.58428 -0.57335 -0.56223 -0.55164 -0.54083 -0.52938 -0.51868 -0.50729 -0.49596 -0.48516 -0.47479 -0.46334 -0.45242 -0.44114 -0.43003 -0.42005 -0.40825 -0.39644 -0.38711 -0.37799 -0.36451 -0.35908 -0.34721 -0.3347 -0.33207 -0.32433 -0.31024 -0.28934 -0.28058 -0.27052 -0.26888 -0.26858 -0.27429 -0.246 -0.21231 -0.21109 -0.22389 -0.2278 -0.23069 -0.23748 -0.20803 -0.16656 -0.17196 -0.1714 -0.13682 -0.13964 -0.10873 -0.08772 -0.06926 -0.05893 -0.05004 -0.03899 -0.02177 -0.00307 0.01619 0.0305 0.0437 0.0502 0.06451 0.08032 0.091 0.09917 0.11113 0.1205 0.12985 0.142 0.15331 0.16416 0.17553 0.18718 0.19797 0.20832 0.21928 0.23025 0.24008 0.25119 0.2613 0.27175 0.28297 0.29477 0.30631 0.31725 0.32772 0.33747 0.34788 0.35804 0.36841 0.38042 0.3923 0.40223 0.41344 0.42535 0.43535 0.44683 0.45707 0.46832 0.47997 0.49084 0.50196 0.5128 0.52324 0.53398 0.54524 0.55588 0.56587 0.57787 0.5894 0.59938 0.6116 0.62357 0.63489 0.64524 0.65701 0.66827 0.67931 0.68947 0.70104 0.71173 0.72344 0.7352 0.74543 0.75564 0.76602 0.77622 0.78866 0.79856 0.81097 0.82254 0.83252 0.84368)) (quote 3dc) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -1.0 -0.99926 -0.99782 -0.99573 -0.99304 -0.98979 -0.98602 -0.98178 -0.97702 -0.97194 -0.96636 -0.96053 -0.95423 -0.9477 -0.94082 -0.9337 -0.92622 -0.9185 -0.91051 -0.90255 -0.8941 -0.88563 -0.87696 -0.86819 -0.85924 -0.85013 -0.84102 -0.83169 -0.82224 -0.81258 -0.80278 -0.79313 -0.78309 -0.77321 -0.76311 -0.75315 -0.74309 -0.73258 -0.72211 -0.7115 -0.70112 -0.69044 -0.6799 -0.66952 -0.65886 -0.64837 -0.63748 -0.62679 -0.61648 -0.60601 -0.5952 -0.58428 -0.57335 -0.56223 -0.55164 -0.54083 -0.52938 -0.51868 -0.50729 -0.49596 -0.48516 -0.47479 -0.46334 -0.45242 -0.44114 -0.43003 -0.42005 -0.40825 -0.39644 -0.38711 -0.37799 -0.36451 -0.35908 -0.34721 -0.3347 -0.33207 -0.32433 -0.31024 -0.28934 -0.28058 -0.27052 -0.26888 -0.26858 -0.27429 -0.246 -0.21231 -0.21109 -0.22389 -0.2278 -0.23069 -0.23748 -0.20803 -0.16656 -0.17196 -0.1714 -0.13682 -0.13964 -0.10873 -0.08772 -0.06926 -0.05893 -0.05004 -0.03899 -0.02177 -0.00307 0.01619 0.0305 0.0437 0.0502 0.06451 0.08032 0.091 0.09917 0.11113 0.1205 0.12985 0.142 0.15331 0.16416 0.17553 0.18718 0.19797 0.20832 0.21928 0.23025 0.24008 0.25119 0.2613 0.27175 0.28297 0.29477 0.30631 0.31725 0.32772 0.33747 0.34788 0.35804 0.36841 0.38042 0.3923 0.40223 0.41344 0.42535 0.43535 0.44683 0.45707 0.46832 0.47997 0.49084 0.50196 0.5128 0.52324 0.53398 0.54524 0.55588 0.56587 0.57787 0.5894 0.59938 0.6116 0.62357 0.63489 0.64524 0.65701 0.66827 0.67931 0.68947 0.70104 0.71173 0.72344 0.7352 0.74543 0.75564 0.76602 0.77622 0.78866 0.79856 0.81097 0.82254 0.83252 0.84368))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.07013 0.07385 0.07798 0.08228 0.08655 0.09069 0.09437 0.09746 0.0997 0.10072 0.1001 0.09764 0.09309 0.08675 0.07835 0.06788 0.05551 0.04173 0.02702 0.01172 -0.00369 -0.01869 -0.03245 -0.0444 -0.05399 -0.06081 -0.06411 -0.0637 -0.05942 -0.05102 -0.03852 -0.02181 -0.0018 0.02146 0.04758 0.07561 0.10472 0.13377 0.16198 0.18829 0.21218 0.23223 0.24781 0.25839 0.26312 0.26147 0.25342 0.23918 0.21865 0.19182 0.15981 0.12365 0.08394 0.04199 -8.3E-4 -0.04411 -0.08492 -0.12296 -0.15653 -0.18491 -0.20674 -0.22129 -0.22712 -0.22425 -0.2125 -0.19238 -0.16256 -0.12345 -0.07971 -0.03161 0.01692 0.07476 0.14028 0.1983 0.25956 0.30457 0.35756 0.38893 0.41111 0.4238 0.42845 0.42078 0.40301 0.37536 0.34339 0.30561 0.25312 0.18527 0.12237 0.0377 -0.02603 -0.11265 -0.17534 -0.22886 -0.27424 -0.31394 -0.34069 -0.36445 -0.374 -0.37223 -0.35677 -0.32887 -0.28688 -0.23535 -0.16183 -0.09003 -0.00196 0.08335 0.16641 0.24649 0.32428 0.3934 0.46035 0.51543 0.55473 0.5798 0.58961 0.58368 0.56003 0.5219 0.46887 0.40226 0.32359 0.23555 0.1412 0.04199 -0.05872 -0.15768 -0.2513 -0.33623 -0.41023 -0.47173 -0.51731 -0.5463 -0.55735 -0.54958 -0.52286 -0.47826 -0.41664 -0.33985 -0.24918 -0.14678 -0.03765 0.07595 0.1896 0.30128 0.40791 0.50478 0.58867 0.65782 0.71012 0.74291 0.75499 0.746 0.71617 0.66534 0.59437 0.50699 0.40543 0.29182 0.16944 0.04224 -0.08665 -0.21212 -0.33052 -0.43875 -0.53304 -0.60972 -0.66726 -0.70339 -0.7167 -0.70629 -0.67228 -0.62886 -0.5763 -0.51668 -0.45216 -0.38335 -0.31278 -0.24349 -0.19408)) (quote (-0.04571 -0.04571 -0.0463 -0.04786 -0.0502 -0.0535 -0.05755 -0.06259 -0.0688 -0.07601 -0.084 -0.09242 -0.10102 -0.10917 -0.11678 -0.12325 -0.12797 -0.13071 -0.13091 -0.12858 -0.12334 -0.11536 -0.10443 -0.09087 -0.07491 -0.05682 -0.03719 -0.01635 0.00454 0.02551 0.04537 0.06335 0.07847 0.09067 0.09891 0.1026 0.10158 0.09568 0.08485 0.06911 0.04865 0.02412 -0.00434 -0.03556 -0.06893 -0.10323 -0.13746 -0.17053 -0.20151 -0.22899 -0.25206 -0.26972 -0.28145 -0.28658 -0.28468 -0.27529 -0.25878 -0.23524 -0.20495 -0.16932 -0.12822 -0.08441 -0.03722 0.00898 0.05662 0.10138 0.14318 0.18041 0.20802 0.22949 0.24645 0.25142 0.24767 0.2347 0.21228 0.18127 0.14138 0.09129 0.04804 -0.00295 -0.05749 -0.10565 -0.15941 -0.22281 -0.26515 -0.30281 -0.33498 -0.36406 -0.37891 -0.38797 -0.38462 -0.36757 -0.33713 -0.30914 -0.26299 -0.21201 -0.15935 -0.09602 -0.01103 0.05184 0.11061 0.17849 0.24498 0.298 0.34684 0.38219 0.40433 0.41365 0.4111 0.38756 0.35582 0.30852 0.25008 0.17839 0.10378 0.02406 -0.06651 -0.15604 -0.24384 -0.32715 -0.40315 -0.46845 -0.52263 -0.56307 -0.58892 -0.59853 -0.59202 -0.56865 -0.52879 -0.47347 -0.40496 -0.3246 -0.23591 -0.13857 -0.03692 0.06564 0.16452 0.25908 0.34539 0.42111 0.48279 0.5294 0.55843 0.56948 0.56144 0.5346 0.48941 0.42733 0.34951 0.25799 0.15606 0.04648 -0.06813 -0.18375 -0.29671 -0.40395 -0.50132 -0.58607 -0.6555 -0.70804 -0.74051 -0.75283 -0.74354 -0.71342 -0.66245 -0.59248 -0.50491 -0.40231 -0.28818 -0.16557 -0.03738 0.09088 0.21679 0.33625 0.44859 0.55126 0.64413 0.72579 0.79598 0.8544 0.89453)) (quote (-0.97325 -0.96664 -0.95918 -0.95112 -0.94218 -0.9326 -0.92224 -0.91117 -0.90001 -0.88886 -0.87768 -0.86672 -0.85549 -0.84441 -0.83329 -0.82229 -0.81116 -0.80012 -0.78909 -0.77809 -0.767 -0.75586 -0.74463 -0.73373 -0.72254 -0.71161 -0.70033 -0.68952 -0.67854 -0.6672 -0.65586 -0.64447 -0.63335 -0.62185 -0.61059 -0.59955 -0.58837 -0.57743 -0.5659 -0.55487 -0.54403 -0.5332 -0.52188 -0.51049 -0.49947 -0.48821 -0.47757 -0.46649 -0.45503 -0.44414 -0.43237 -0.42089 -0.40972 -0.39936 -0.38775 -0.37625 -0.3645 -0.35321 -0.34313 -0.33132 -0.31962 -0.30984 -0.30055 -0.28767 -0.28194 -0.27083 -0.25897 -0.2564 -0.24882 -0.23614 -0.21595 -0.2076 -0.19794 -0.19566 -0.19708 -0.20529 -0.17818 -0.14421 -0.14542 -0.15343 -0.16019 -0.16763 -0.17012 -0.1421 -0.10697 -0.12369 -0.12406 -0.09227 -0.08781 -0.04859 -0.01121 -0.0086 -0.02018 -0.00228 0.0323 0.06577 0.10108 0.14231 0.14408 0.13171 0.15763 0.18618 0.18315 0.21112 0.20376 0.20857 0.21273 0.22441 0.24025 0.25332 0.25976 0.26483 0.26913 0.27701 0.28532 0.30076 0.30869 0.31376 0.32484 0.33746 0.34676 0.35932 0.37259 0.38298 0.39356 0.40412 0.4134 0.42296 0.43304 0.44373 0.45545 0.4671 0.47801 0.48891 0.50153 0.51202 0.52319 0.53256 0.54308 0.5546 0.56583 0.57808 0.58948 0.60076 0.61214 0.62243 0.63218 0.64315 0.65484 0.66542 0.67634 0.68801 0.70072 0.7119 0.7217 0.73363 0.74484 0.75612 0.76694 0.77885 0.78943 0.8016 0.81453 0.82406 0.8339 0.84538 0.85448 0.86592 0.8755 0.88848 0.89932 0.90908 0.92016 0.93137 0.94051 0.94974 0.95725 0.96393 0.97135 0.97812 0.98289)) (quote 3dc) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.97325 -0.96664 -0.95918 -0.95112 -0.94218 -0.9326 -0.92224 -0.91117 -0.90001 -0.88886 -0.87768 -0.86672 -0.85549 -0.84441 -0.83329 -0.82229 -0.81116 -0.80012 -0.78909 -0.77809 -0.767 -0.75586 -0.74463 -0.73373 -0.72254 -0.71161 -0.70033 -0.68952 -0.67854 -0.6672 -0.65586 -0.64447 -0.63335 -0.62185 -0.61059 -0.59955 -0.58837 -0.57743 -0.5659 -0.55487 -0.54403 -0.5332 -0.52188 -0.51049 -0.49947 -0.48821 -0.47757 -0.46649 -0.45503 -0.44414 -0.43237 -0.42089 -0.40972 -0.39936 -0.38775 -0.37625 -0.3645 -0.35321 -0.34313 -0.33132 -0.31962 -0.30984 -0.30055 -0.28767 -0.28194 -0.27083 -0.25897 -0.2564 -0.24882 -0.23614 -0.21595 -0.2076 -0.19794 -0.19566 -0.19708 -0.20529 -0.17818 -0.14421 -0.14542 -0.15343 -0.16019 -0.16763 -0.17012 -0.1421 -0.10697 -0.12369 -0.12406 -0.09227 -0.08781 -0.04859 -0.01121 -0.0086 -0.02018 -0.00228 0.0323 0.06577 0.10108 0.14231 0.14408 0.13171 0.15763 0.18618 0.18315 0.21112 0.20376 0.20857 0.21273 0.22441 0.24025 0.25332 0.25976 0.26483 0.26913 0.27701 0.28532 0.30076 0.30869 0.31376 0.32484 0.33746 0.34676 0.35932 0.37259 0.38298 0.39356 0.40412 0.4134 0.42296 0.43304 0.44373 0.45545 0.4671 0.47801 0.48891 0.50153 0.51202 0.52319 0.53256 0.54308 0.5546 0.56583 0.57808 0.58948 0.60076 0.61214 0.62243 0.63218 0.64315 0.65484 0.66542 0.67634 0.68801 0.70072 0.7119 0.7217 0.73363 0.74484 0.75612 0.76694 0.77885 0.78943 0.8016 0.81453 0.82406 0.8339 0.84538 0.85448 0.86592 0.8755 0.88848 0.89932 0.90908 0.92016 0.93137 0.94051 0.94974 0.95725 0.96393 0.97135 0.97812 0.98289))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.05861 0.05861 0.05861 0.05861 0.05861 0.05861 0.05861 0.05861 0.06166 0.0679 0.07393 0.0834 0.08949 0.09896 0.10778 0.10778 0.10778 0.10778 0.10778 0.10778 0.10778 0.10778 0.10778 0.10488 0.09216 0.07706 0.05861 0.03694 0.01525 -0.00565 -0.0271 -0.0492 -0.06682 -0.06682 -0.06682 -0.06682 -0.06682 -0.06682 -0.06682 -0.04378 -0.0125 0.0214 0.05861 0.09883 0.13831 0.17936 0.21413 0.25133 0.28495 0.2883 0.2883 0.2883 0.2883 0.2883 0.2883 0.2883 0.2883 0.2883 0.25511 0.2172 0.16987 0.11355 0.05861 5.7E-4 -0.05665 -0.11759 -0.17019 -0.21676 -0.21676 -0.21676 -0.21676 -0.21676 -0.21676 -0.21676 -0.21386 -0.1597 -0.08691 -0.01354 0.05861 0.13158 0.23055 0.32519 0.36301 0.39341 0.40706 0.40706 0.40706 0.40706 0.40706 0.40706 0.40706 0.40706 0.39341 0.38353 0.31918 0.24894 0.20137 0.11555 0.05861 -0.05177 -0.07243 -0.17325 -0.24383 -0.35036 -0.35036 -0.35036 -0.35036 -0.35036 -0.35036 -0.35036 -0.29769 -0.28578 -0.19509 -0.04586 0.05861 0.17472 0.27941 0.41338 0.49585 0.58254 0.65685 0.65685 0.65685 0.65685 0.65685 0.65685 0.65685 0.65685 0.65685 0.63107 0.54359 0.43476 0.32183 0.1905 0.05861 -0.07609 -0.21299 -0.34226 -0.45729 -0.55836 -0.55836 -0.55836 -0.55836 -0.55836 -0.55836 -0.55836 -0.49312 -0.37632 -0.2419 -0.09642 0.05861 0.21168 0.36598 0.50604 0.6447 0.77638 0.85912 0.85912 0.85912 0.85912 0.85912 0.85912 0.85912 0.85912 0.85912 0.79542 0.68814 0.55034 0.39291 0.23116 0.05861 -0.11774 -0.28816 -0.45163 -0.59256 -0.7299 -0.7299 -0.7299 -0.7299 -0.7299 -0.7299)) (quote (-0.05292 -0.05292 -0.05292 -0.05292 -0.05292 -0.05292 -0.05292 -0.04707 -0.04421 -0.04421 -0.04421 -0.04421 -0.04421 -0.04421 -0.04421 -0.04421 -0.04421 -0.05292 -0.06177 -0.07629 -0.08799 -0.10235 -0.11377 -0.12841 -0.12841 -0.12841 -0.12841 -0.12841 -0.12841 -0.12841 -0.12369 -0.10277 -0.07943 -0.05292 -0.02383 0.00592 0.03557 0.06305 0.09009 0.11315 0.12406 0.12406 0.12406 0.12406 0.12406 0.12406 0.12406 0.12406 0.12406 0.10358 0.07066 0.03148 -0.00944 -0.05292 -0.09934 -0.14603 -0.19381 -0.23526 -0.27864 -0.27864 -0.27864 -0.27864 -0.27864 -0.27864 -0.27864 -0.27433 -0.22891 -0.17632 -0.11756 -0.05292 0.01237 0.07454 0.14172 0.19618 0.25852 0.28969 0.28969 0.28969 0.28969 0.28969 0.28969 0.28969 0.28969 0.28969 0.23779 0.20453 0.20157 0.0868 0.01838 -0.05292 -0.14005 -0.2066 -0.30866 -0.3168 -0.36336 -0.36973 -0.36973 -0.36973 -0.36973 -0.36973 -0.36336 -0.36336 -0.27592 -0.27575 -0.15634 -0.05292 0.04113 0.10312 0.3003 0.30347 0.42018 0.47311 0.47311 0.47311 0.47311 0.47311 0.47311 0.47311 0.47311 0.47311 0.45672 0.3739 0.27908 0.18098 0.06493 -0.05292 -0.17254 -0.28934 -0.40343 -0.51396 -0.60638 -0.60638 -0.60638 -0.60638 -0.60638 -0.60638 -0.60638 -0.54163 -0.44064 -0.31668 -0.19168 -0.05292 0.08392 0.22347 0.34979 0.46949 0.56687 0.66264 0.66264 0.66264 0.66264 0.66264 0.66264 0.66264 0.66264 0.66264 0.60864 0.50745 0.38256 0.24955 0.10296 -0.05292 -0.20828 -0.36428 -0.50466 -0.64089 -0.75678 -0.75678 -0.75678 -0.75678 -0.75678 -0.75678 -0.75678 -0.68513 -0.54006 -0.39298 -0.22494 -0.05292 0.12371 0.2927 0.45255)) (quote (-1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -0.98885 -0.9777 -0.96645 -0.95537 -0.9443 -0.93327 -0.92237 -0.91037 -0.90092 -0.88814 -0.87899 -0.86604 -0.85622 -0.84457 -0.83392 -0.82158 -0.81033 -0.79877 -0.79099 -0.77582 -0.76715 -0.75547 -0.7455 -0.73391 -0.72251 -0.71356 -0.70106 -0.68987 -0.67742 -0.66557 -0.65806 -0.64249 -0.63483 -0.6218 -0.61364 -0.60234 -0.58543 -0.57544 -0.56303 -0.55576 -0.54099 -0.53223 -0.52428 -0.5096 -0.50158 -0.485 -0.47716 -0.47211 -0.45937 -0.44395 -0.43137 -0.42025 -0.40653 -0.40339 -0.38951 -0.36913 -0.36893 -0.34774 -0.33734 -0.33397 -0.32961 -0.30304 -0.29959 -0.28321 -0.28027 -0.28027 -0.27449 -0.25661 -0.25661 -0.25022 -0.24309 -0.23102 -0.21591 -0.18107 -0.18107 -0.18107 -0.18107 -0.17589 -0.15954 -0.15954 -0.15954 -0.15954 -0.19404 -0.19404 -0.15794 -0.15794 -0.19404 -0.19404 -0.19404 -0.17908 -0.16352 0.15003 0.1892 0.08558 0.08558 0.11565 0.1892 0.20435 0.2065 0.21937 0.21937 0.21937 0.22853 0.22853 0.23089 0.22853 0.23089 0.24059 0.25164 0.25863 0.26074 0.26483 0.27862 0.27862 0.30169 0.31169 0.31206 0.31601 0.33476 0.34903 0.35029 0.35326 0.37269 0.37772 0.38376 0.40281 0.40679 0.41811 0.44001 0.45989 0.4679 0.4704 0.47396 0.47439 0.49362 0.50024 0.51367 0.54125 0.54846 0.55858 0.5704 0.57543 0.5921 0.60042 0.60754 0.62576 0.64297 0.64312 0.65764 0.66465 0.66941 0.68435 0.70283 0.7048 0.70582 0.73912 0.74579 0.75081 0.78267 0.79014 0.79113 0.79342 0.82181 0.82583 0.83173 0.83386 0.86149 0.86297 0.8874 0.88878 0.89847 0.89973 0.91133 0.91911)) (quote 3dc) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -0.98885 -0.9777 -0.96645 -0.95537 -0.9443 -0.93327 -0.92237 -0.91037 -0.90092 -0.88814 -0.87899 -0.86604 -0.85622 -0.84457 -0.83392 -0.82158 -0.81033 -0.79877 -0.79099 -0.77582 -0.76715 -0.75547 -0.7455 -0.73391 -0.72251 -0.71356 -0.70106 -0.68987 -0.67742 -0.66557 -0.65806 -0.64249 -0.63483 -0.6218 -0.61364 -0.60234 -0.58543 -0.57544 -0.56303 -0.55576 -0.54099 -0.53223 -0.52428 -0.5096 -0.50158 -0.485 -0.47716 -0.47211 -0.45937 -0.44395 -0.43137 -0.42025 -0.40653 -0.40339 -0.38951 -0.36913 -0.36893 -0.34774 -0.33734 -0.33397 -0.32961 -0.30304 -0.29959 -0.28321 -0.28027 -0.28027 -0.27449 -0.25661 -0.25661 -0.25022 -0.24309 -0.23102 -0.21591 -0.18107 -0.18107 -0.18107 -0.18107 -0.17589 -0.15954 -0.15954 -0.15954 -0.15954 -0.19404 -0.19404 -0.15794 -0.15794 -0.19404 -0.19404 -0.19404 -0.17908 -0.16352 0.15003 0.1892 0.08558 0.08558 0.11565 0.1892 0.20435 0.2065 0.21937 0.21937 0.21937 0.22853 0.22853 0.23089 0.22853 0.23089 0.24059 0.25164 0.25863 0.26074 0.26483 0.27862 0.27862 0.30169 0.31169 0.31206 0.31601 0.33476 0.34903 0.35029 0.35326 0.37269 0.37772 0.38376 0.40281 0.40679 0.41811 0.44001 0.45989 0.4679 0.4704 0.47396 0.47439 0.49362 0.50024 0.51367 0.54125 0.54846 0.55858 0.5704 0.57543 0.5921 0.60042 0.60754 0.62576 0.64297 0.64312 0.65764 0.66465 0.66941 0.68435 0.70283 0.7048 0.70582 0.73912 0.74579 0.75081 0.78267 0.79014 0.79113 0.79342 0.82181 0.82583 0.83173 0.83386 0.86149 0.86297 0.8874 0.88878 0.89847 0.89973 0.91133 0.91911))) newobj)) :from-file t)) nil nil (pairlis (quote (line-width show-axes show-room room-size picture winpos winsize)) (list 1.0 1 1 2 nil (om-make-point -2057 -363) (om-make-point 694 544))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 95 30) (quote "oversampling") "" (om-make-point 975 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 934 249) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "B-SPLINE" (quote b-spline) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "order of polynomial function (integer)" "order" (quote :order) 3 nil) (om-load-inputkeyword (quote input-keyword) "defines resampling of curve (integer=points, decimal=factor" "resample" (quote :resample) 100 nil))) (om-make-point 862 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 186 30) (quote "exponential-moving-average") "" (om-make-point 924 313) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 11" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 866 365) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.720493 -9.55469 -9.426702 -9.317716 -9.21792 -9.121107 -9.024625 -8.928142 -8.83166 -8.735177 -8.638695 -8.5422125 -8.44573 -8.349248 -8.252766 -8.156282 -8.059801 -7.963319 -7.8668356 -7.770354 -7.6738725 -7.5773893 -7.4809075 -7.384424 -7.2879424 -7.1914597 -7.0949764 -6.9984946 -6.9020124 -6.80553 -6.7090473 -6.6125655 -6.516083 -6.4196005 -6.323118 -6.226636 -6.130153 -6.0336714 -5.9371886 -5.840706 -5.7442236 -5.647742 -5.551259 -5.454777 -5.358295 -5.261812 -5.16533 -5.0688477 -4.972365 -4.8758826 -4.7794 -4.682918 -4.586436 -4.4899535 -4.393471 -4.2969885 -4.200506 -4.104024 -4.0075407 -3.9110587 -3.8145769 -3.718094 -3.6216116 -3.525129 -3.428646 -3.3321634 -3.2356813 -3.1391995 -3.0427172 -2.9462352 -2.849753 -2.7532709 -2.6567884 -2.5603066 -2.4638243 -2.3673425 -2.2708602 -2.1743784 -2.077896 -1.9814139 -1.8849319 -1.7884497 -1.6919675 -1.5954856 -1.4990033 -1.4025213 -1.3060391 -1.2095569 -1.1130749 -1.0165928 -0.9201107 -0.8236286 -0.72714657 -0.63066447 -0.5341824 -0.43770036 -0.34121826 -0.24473615 -0.1482541 -0.051772 0.044710085 0.14119217 0.23767424 0.33415633 0.43063837 0.52712054 0.62360257 0.7200847 0.81656677 0.91304887 1.0095308 1.106013 1.202495 1.2989771 1.3954593 1.4919415 1.5884235 1.6849055 1.7813875 1.8778696 1.9743519 2.070834 2.167316 2.2637983 2.3602803 2.4567623 2.5532449 2.6497267 2.7462087 2.8426907 2.939173 3.035655 3.1321383 3.2286208 3.3251036 3.4215865 3.518069 3.614552 3.7110355 3.8075183 3.9040013 4.000484 4.0969668 4.193449 4.2899323 4.3864145 4.4828978 4.579381 4.6758638 4.7723465 4.868829 4.965311 5.0617948 5.158277 5.2547593 5.3512426 5.4477253 5.5442085 5.640691 5.7371736 5.833656 5.930139 6.0266223 6.123105 6.2195873 6.31607 6.4125533 6.5090366 6.6055193 6.7020006 6.798484 6.894967 6.9914503 7.087932 7.1844154 7.280899 7.3773804 7.473863 7.570346 7.666828 7.763311 7.859794 7.956277 8.05276 8.149243 8.245726 8.342209 8.438691 8.535174 8.631657 8.72814 8.824622 8.921105 9.01792 9.117717 9.226704 9.354695 9.520504 9.799991)) (quote (0.806396 1.0631892 0.5971851 0.0107427975 -0.51559484 -0.899683 -1.1058008 -1.1230906 -0.96851725 -0.6960435 -0.38668907 -0.12644671 0.008349832 -0.02610362 -0.23472801 -0.5813074 -0.9945335 -1.3888364 -1.6781027 -1.800384 -1.7290676 -1.4789115 -1.1055119 -0.6880569 -0.31606376 -0.065608375 0.01693961 -0.076110386 -0.30881953 -0.61370266 -0.9045392 -1.0968596 -1.1290816 -0.9733157 -0.645779 -0.20047 0.28238365 0.71237267 1.0135602 1.13655 1.0738493 0.8593632 0.5594872 0.26159817 0.04840777 -0.015471637 0.09763371 0.37315384 0.7594495 1.1751535 1.5329756 1.7549865 1.7928331 1.639022 1.3259279 0.92242927 0.5144122 0.1874539 0.0074548256 0.0033857245 0.16433592 0.43873122 0.74807787 1.0055778 1.1331688 1.0839201 0.8485071 0.46038282 -0.011868389 -0.48270422 -0.8640418 -1.0908216 -1.1310035 -0.99490786 -0.7335945 -0.42327303 -0.15315692 4.463338E-4 -0.012033529 -0.20096395 -0.53318906 -0.9433994 -1.3444076 -1.6505951 -1.7958852 -1.747829 -1.517917 -1.155305 -0.73853827 -0.35667098 -0.087598905 0.016265657 -0.055967387 -0.27472484 -0.57548774 -0.8722648 -1.0812564 -1.1348871 -1.0023946 -0.6939139 -0.2585417 0.22380848 0.6655469 0.9854284 1.1316103 1.0910452 0.8914726 0.59836227 0.29490876 0.067571536 -0.016818202 0.074020036 0.33233488 0.70841504 1.1255716 1.4951147 1.7367778 1.79904 1.6673068 1.3709303 0.9741517 0.56148434 0.2210368 0.020029819 -0.0055414066 0.13721667 0.40111467 0.7115371 0.9792501 1.1266288 1.1002277 0.886463 0.51457954 0.04744935 -0.42775092 -0.82463396 -1.0728625 -1.1358984 -1.0200595 -0.7697098 -0.4611581 -0.18139355 -0.009940689 -0.0010887683 -0.16875316 -0.48679674 -0.89172787 -1.2985065 -1.6209138 -1.787924 -1.7643129 -1.5545982 -1.2042585 -0.78988815 -0.39845112 -0.11267544 0.013260092 -0.038114194 -0.24225958 -0.53661794 -0.83938784 -1.062714 -1.1380737 -1.0289221 -0.7395071 -0.31657845 0.16539477 0.61643845 0.9547514 1.1241326 1.105189 0.9227793 0.63649756 0.3295531 0.089034334 -0.015909827 0.05356154 0.29294848 0.65832437 1.0755205 1.4549866 1.716422 1.8018044 1.6931934 1.4144106 1.0249877 0.61016077 0.2560227 0.03562091 -0.0118409 0.11164763 0.36504436 0.6737276 0.9517749 1.1155942 1.0956315 0.84265447 0.32277307 -0.46662283 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -835 62) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER 5" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 6)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 990 175) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 6)) :increment 1 :value 5))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 10" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 857 140) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.320232 0.9425818 -0.14834798 -1.1246775 -1.2630211 -0.6026182 0.09737855 0.061923445 -0.7821073 -1.7344711 -1.9623387 -1.2642888 -0.25517106 0.19810933 -0.22880607 -1.0231987 -1.3114563 -0.6679793 0.4871234 1.2674434 1.1282325 0.36035758 -0.18361426 0.12089408 1.0912747 1.9017425 1.8399119 0.96045495 0.03492278 -0.15613902 0.46198517 1.1935127 1.216944 0.346283 -0.79140246 -1.3255904 -0.9356637 -0.13888633 0.19149697 -0.3652742 -1.3859649 -1.988932 -1.6424372 -0.65262545 0.117450595 0.039442897 -0.7057666 -1.2987204 -1.0401453 -5.0366E-6 1.0401354 1.2987111 0.70575834 -0.03944993 -0.11745601 0.65262175 1.6424354 1.9889323 1.3859673 0.3652783 -0.19149095 0.13889385 0.93567265 1.3256 0.7914126 -0.34627274 -1.2169341 -1.1935035 -0.4619771 0.15614575 -0.03491801 -0.9604519 -1.8399109 -1.9017435 -1.0912776 -0.120898776 0.18360788 -0.36036533 -1.1282413 -1.267453 -0.48713344 0.66796935 1.3114468 1.02319 0.22879857 -0.19811541 0.25516665 1.2642864 1.9623383 1.7344725 0.7821106 -0.061918497 -0.097372115 0.6026259 1.2630298 1.1246868 0.14835751 -0.9425724 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SMM" (quote smm) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "WINDOWSIZE" 5))) (om-make-point 503 683) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 186 30) (quote "simple moving median") "" (om-make-point 564 693) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 9" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 496 758) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 0.806396 0.9425818 0.9425818 0.9425818 0.9425818 -0.14834798 -0.14834798 0.061923445 0.061923445 0.061923445 0.061923445 -0.7821073 -0.7821073 -0.25517106 -0.22880607 -0.22880607 -0.22880607 -0.22880607 -0.22880607 0.4871234 1.1282325 1.1282325 1.1282325 1.1282325 1.0912747 1.0912747 1.8399119 1.8399119 1.8399119 1.8399119 0.96045495 0.96045495 1.1935127 1.1935127 1.1935127 1.1935127 0.346283 -0.13888633 -0.13888633 -0.13888633 -0.13888633 -0.13888633 -0.3652742 -0.65262545 -0.65262545 0.039442897 0.039442897 0.039442897 0.039442897 -5.0366E-6 -5.0366E-6 1.0401354 1.0401354 1.0401354 1.0401354 0.70575834 0.70575834 1.6424354 1.6424354 1.6424354 1.6424354 1.3859673 0.93567265 0.93567265 0.93567265 0.93567265 0.93567265 0.7914126 -0.34627274 -0.34627274 -0.03491801 -0.03491801 -0.03491801 -0.03491801 -0.9604519 -0.9604519 -0.120898776 -0.120898776 -0.120898776 -0.120898776 -0.36036533 -0.36036533 0.66796935 1.02319 1.02319 1.02319 1.02319 1.02319 1.2642864 1.7344725 1.7344725 1.7344725 1.7344725 0.7821106 0.7821106 1.1246868 1.1246868 1.1246868 1.1246868)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER 4" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 619 578) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 15)) :increment 1 :value 2))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 8" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 486 543) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.320232 0.9425818 -0.14834798 -1.1246775 -1.2630211 -0.6026182 0.09737855 0.061923445 -0.7821073 -1.7344711 -1.9623387 -1.2642888 -0.25517106 0.19810933 -0.22880607 -1.0231987 -1.3114563 -0.6679793 0.4871234 1.2674434 1.1282325 0.36035758 -0.18361426 0.12089408 1.0912747 1.9017425 1.8399119 0.96045495 0.03492278 -0.15613902 0.46198517 1.1935127 1.216944 0.346283 -0.79140246 -1.3255904 -0.9356637 -0.13888633 0.19149697 -0.3652742 -1.3859649 -1.988932 -1.6424372 -0.65262545 0.117450595 0.039442897 -0.7057666 -1.2987204 -1.0401453 -5.0366E-6 1.0401354 1.2987111 0.70575834 -0.03944993 -0.11745601 0.65262175 1.6424354 1.9889323 1.3859673 0.3652783 -0.19149095 0.13889385 0.93567265 1.3256 0.7914126 -0.34627274 -1.2169341 -1.1935035 -0.4619771 0.15614575 -0.03491801 -0.9604519 -1.8399109 -1.9017435 -1.0912776 -0.120898776 0.18360788 -0.36036533 -1.1282413 -1.267453 -0.48713344 0.66796935 1.3114468 1.02319 0.22879857 -0.19811541 0.25516665 1.2642864 1.9623383 1.7344725 0.7821106 -0.061918497 -0.097372115 0.6026259 1.2630298 1.1246868 0.14835751 -0.9425724 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 186 30) (quote "exponential-moving-average") "" (om-make-point 557 285) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 30) (quote "weighted-moving-average") "" (om-make-point 184 682) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 30) (quote "simple-moving-average") "" (om-make-point 180 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMA" (quote ema) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "ALPHA" 10))) (om-make-point 497 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 484 370) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.063314 1.0029478 0.42729992 -0.3486888 -0.805855 -0.7042366 -0.30342904 -0.1207528 -0.45143005 -1.0929506 -1.5276446 -1.3959668 -0.8255689 -0.3137298 -0.27126792 -0.6472333 -0.9793449 -0.82366205 -0.16826932 0.5495871 0.83890975 0.5996337 0.20800972 0.1644519 0.6278633 1.2648029 1.5523574 1.2564062 0.64566446 0.24476274 0.35337394 0.77344335 0.99519367 0.67073834 -0.060332056 -0.6929612 -0.81431246 -0.4765994 -0.14255122 -0.2539127 -0.8199388 -1.4044354 -1.5234363 -1.0880308 -0.48529008 -0.22292359 -0.4643451 -0.8815327 -0.9608391 -0.48042205 0.27985668 0.7892839 0.7475211 0.3540356 0.118289776 0.38545576 1.0139456 1.5014389 1.443703 0.9044907 0.35649988 0.24769688 0.59168476 0.95864237 0.8750275 0.26437736 -0.47627836 -0.83489097 -0.64843405 -0.24614416 -0.14053108 -0.5504915 -1.1952012 -1.5484724 -1.319875 -0.72038687 -0.2683895 -0.31437743 -0.72130937 -0.9943812 -0.74075735 -0.036394 0.6375264 0.8303582 0.5295784 0.16573149 0.21044907 0.73736775 1.349853 1.5421628 1.1621367 0.5501091 0.22636849 0.4144972 0.8387635 0.98172516 0.5650413 -0.18876556 -0.7544943)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER 3" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 612 170) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 15)) :increment 1 :value 2))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 479 135) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.320232 0.9425818 -0.14834798 -1.1246775 -1.2630211 -0.6026182 0.09737855 0.061923445 -0.7821073 -1.7344711 -1.9623387 -1.2642888 -0.25517106 0.19810933 -0.22880607 -1.0231987 -1.3114563 -0.6679793 0.4871234 1.2674434 1.1282325 0.36035758 -0.18361426 0.12089408 1.0912747 1.9017425 1.8399119 0.96045495 0.03492278 -0.15613902 0.46198517 1.1935127 1.216944 0.346283 -0.79140246 -1.3255904 -0.9356637 -0.13888633 0.19149697 -0.3652742 -1.3859649 -1.988932 -1.6424372 -0.65262545 0.117450595 0.039442897 -0.7057666 -1.2987204 -1.0401453 -5.0366E-6 1.0401354 1.2987111 0.70575834 -0.03944993 -0.11745601 0.65262175 1.6424354 1.9889323 1.3859673 0.3652783 -0.19149095 0.13889385 0.93567265 1.3256 0.7914126 -0.34627274 -1.2169341 -1.1935035 -0.4619771 0.15614575 -0.03491801 -0.9604519 -1.8399109 -1.9017435 -1.0912776 -0.120898776 0.18360788 -0.36036533 -1.1282413 -1.267453 -0.48713344 0.66796935 1.3114468 1.02319 0.22879857 -0.19811541 0.25516665 1.2642864 1.9623383 1.7344725 0.7821106 -0.061918497 -0.097372115 0.6026259 1.2630298 1.1246868 0.14835751 -0.9425724 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WMA" (quote wma) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "WINDOWSIZE" 5))) (om-make-point 130 667) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 116 749) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.95320637 0.96764815 0.66391075 0.12668604 -0.35810956 -0.5556749 -0.4861453 -0.36851457 -0.4500993 -0.77360917 -1.1331861 -1.2600194 -1.0670252 -0.7277343 -0.51690424 -0.5593912 -0.71810747 -0.7239678 -0.4281943 0.05518038 0.44785982 0.5565255 0.4438871 0.36454436 0.52488775 0.8880244 1.2032902 1.2333932 0.9704823 0.642576 0.5044685 0.60533506 0.74662143 0.66881276 0.29519737 -0.19169426 -0.5114902 -0.53708077 -0.40482846 -0.38282284 -0.6185595 -0.9982599 -1.2473742 -1.1800293 -0.8681987 -0.5751301 -0.51425076 -0.6551772 -0.75509215 -0.5865049 -0.15181172 0.31282285 0.54807717 0.50319934 0.37606892 0.42502302 0.7257036 1.0967023 1.2625576 1.1043966 0.7678859 0.52929634 0.5428211 0.701409 0.73895926 0.47976866 0.0057010423 -0.41284153 -0.55892897 -0.46185523 -0.36368284 -0.49059957 -0.8395437 -1.1764888 -1.2481463 -1.0125861 -0.6768314 -0.50690377 -0.58494467 -0.7366493 -0.69561 -0.35330993 0.13527557 0.48779544 0.5474627 0.4205337 0.3721929 0.5768244 0.9525033 1.2320829 1.2056885 0.9117946 0.60128564 0.50756366 0.6340361 0.7542824 0.6246149 0.21343187 -0.26371548 -0.68263186)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER 2" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 244 569) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 15)) :increment 1 :value 6))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 111 534) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.320232 0.9425818 -0.14834798 -1.1246775 -1.2630211 -0.6026182 0.09737855 0.061923445 -0.7821073 -1.7344711 -1.9623387 -1.2642888 -0.25517106 0.19810933 -0.22880607 -1.0231987 -1.3114563 -0.6679793 0.4871234 1.2674434 1.1282325 0.36035758 -0.18361426 0.12089408 1.0912747 1.9017425 1.8399119 0.96045495 0.03492278 -0.15613902 0.46198517 1.1935127 1.216944 0.346283 -0.79140246 -1.3255904 -0.9356637 -0.13888633 0.19149697 -0.3652742 -1.3859649 -1.988932 -1.6424372 -0.65262545 0.117450595 0.039442897 -0.7057666 -1.2987204 -1.0401453 -5.0366E-6 1.0401354 1.2987111 0.70575834 -0.03944993 -0.11745601 0.65262175 1.6424354 1.9889323 1.3859673 0.3652783 -0.19149095 0.13889385 0.93567265 1.3256 0.7914126 -0.34627274 -1.2169341 -1.1935035 -0.4619771 0.15614575 -0.03491801 -0.9604519 -1.8399109 -1.9017435 -1.0912776 -0.120898776 0.18360788 -0.36036533 -1.1282413 -1.267453 -0.48713344 0.66796935 1.3114468 1.02319 0.22879857 -0.19811541 0.25516665 1.2642864 1.9623383 1.7344725 0.7821106 -0.061918497 -0.097372115 0.6026259 1.2630298 1.1246868 0.14835751 -0.9425724 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 111 374) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.96890146 0.73021544 0.24744705 -0.3983662 -0.7846662 -0.7232346 -0.4265843 -0.3063559 -0.5893191 -1.1042484 -1.4358015 -1.3040674 -0.82092226 -0.38753915 -0.32726663 -0.5913379 -0.8078601 -0.6288777 -0.056217224 0.553705 0.81078917 0.6431048 0.35646746 0.34722805 0.7325742 1.2384558 1.448346 1.184258 0.66978765 0.32530597 0.3835704 0.6790757 0.8046812 0.4913343 -0.13844148 -0.6765934 -0.7978858 -0.55216086 -0.3120818 -0.4246571 -0.8871685 -1.3456521 -1.4174899 -1.041636 -0.5345422 -0.30037463 -0.4618984 -0.75129736 -0.76115937 -0.32468385 0.32467404 0.76114995 0.7512887 0.46189088 0.30036855 0.5345378 1.0416334 1.4174892 1.3456533 0.8871717 0.4246621 0.31208846 0.5521689 0.7978948 0.67660314 0.13845143 -0.49132442 -0.8046718 -0.6790672 -0.38356322 -0.3253003 -0.6697838 -1.1842561 -1.448346 -1.2384577 -0.732578 -0.34723347 -0.3564744 -0.6431129 -0.8107983 -0.55371464 0.05620742 0.62886817 0.8078512 0.59133 0.32726 0.38753405 0.82091904 1.304066 1.435802 1.1042507 0.5893231 0.30636147 0.42659128 0.72324265 0.784675 0.39837545 -0.2474378 -0.8586653 -1.1943395)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "SMA" (quote sma) (quote ((om-load-inputfun (quote input-funbox) "a list, bpf, bpc, 3dc, 3d-trajectory or libs thereof" "SELF" nil) (om-load-inputfun (quote input-funbox) "a number" "WINDOWSIZE" 5))) (om-make-point 126 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 2 15)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 236 174) (om-make-point 138 58) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 122 25) "untitled" :direction :horizontal :range (quote (2 15)) :increment 1 :value 4))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 4))) (om-make-point 103 139) (om-make-point 102 95) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-10.0 -9.8 -9.6 -9.400001 -9.200001 -9.000001 -8.800001 -8.600001 -8.400002 -8.200002 -8.000002 -7.800002 -7.600003 -7.4000025 -7.2000027 -7.0000024 -6.800003 -6.6000033 -6.4000034 -6.2000036 -6.000004 -5.800004 -5.600004 -5.4000044 -5.2000046 -5.000005 -4.800005 -4.600005 -4.4000054 -4.2000055 -4.0000057 -3.800006 -3.6000057 -3.4000056 -3.2000056 -3.0000055 -2.8000055 -2.6000054 -2.4000054 -2.2000053 -2.0000053 -1.8000052 -1.6000052 -1.4000051 -1.200005 -1.000005 -0.800005 -0.60000504 -0.40000504 -0.20000504 -5.0366E-6 0.19999497 0.39999497 0.59999496 0.79999495 0.999995 1.1999949 1.399995 1.599995 1.799995 1.9999951 2.199995 2.399995 2.5999952 2.7999952 2.9999953 3.1999953 3.3999954 3.5999954 3.7999957 3.9999955 4.1999955 4.3999953 4.599995 4.799995 4.9999948 5.1999946 5.3999944 5.599994 5.799994 5.999994 6.1999936 6.3999934 6.599993 6.799993 6.999993 7.199993 7.3999925 7.599992 7.799992 7.999992 8.199992 8.399992 8.599992 8.799992 8.999991 9.199991 9.399991 9.599991 9.799991)) (quote (0.806396 1.320232 0.9425818 -0.14834798 -1.1246775 -1.2630211 -0.6026182 0.09737855 0.061923445 -0.7821073 -1.7344711 -1.9623387 -1.2642888 -0.25517106 0.19810933 -0.22880607 -1.0231987 -1.3114563 -0.6679793 0.4871234 1.2674434 1.1282325 0.36035758 -0.18361426 0.12089408 1.0912747 1.9017425 1.8399119 0.96045495 0.03492278 -0.15613902 0.46198517 1.1935127 1.216944 0.346283 -0.79140246 -1.3255904 -0.9356637 -0.13888633 0.19149697 -0.3652742 -1.3859649 -1.988932 -1.6424372 -0.65262545 0.117450595 0.039442897 -0.7057666 -1.2987204 -1.0401453 -5.0366E-6 1.0401354 1.2987111 0.70575834 -0.03944993 -0.11745601 0.65262175 1.6424354 1.9889323 1.3859673 0.3652783 -0.19149095 0.13889385 0.93567265 1.3256 0.7914126 -0.34627274 -1.2169341 -1.1935035 -0.4619771 0.15614575 -0.03491801 -0.9604519 -1.8399109 -1.9017435 -1.0912776 -0.120898776 0.18360788 -0.36036533 -1.1282413 -1.267453 -0.48713344 0.66796935 1.3114468 1.02319 0.22879857 -0.19811541 0.25516665 1.2642864 1.9623383 1.7344725 0.7821106 -0.061918497 -0.097372115 0.6026259 1.2630298 1.1246868 0.14835751 -0.9425724 -1.3202231)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point -1045 163) (om-make-point 465 339))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (4 3 1 1 nil 0) (5 0 2 0 nil 0) (4 3 2 1 nil 0) (5 0 3 0 nil 0) (4 3 3 1 nil 0) (3 0 6 0 nil 0) (2 0 6 1 nil 0) (1 0 6 2 nil 0) (6 0 7 1 nil 0) (14 0 10 0 nil 0) (13 3 10 1 nil 0) (9 0 10 2 nil 0) (10 0 12 0 nil 0) (19 0 15 0 nil 0) (18 3 15 1 nil 0) (15 0 17 0 nil 0) (26 0 23 0 nil 0) (25 3 23 1 nil 0) (23 0 24 0 nil 0) (30 0 27 0 nil 0) (29 3 27 1 nil 0) (27 0 28 0 nil 0) (32 0 31 0 nil 0) (34 0 32 0 nil 0) (33 3 32 1 nil 0))) nil 6.0901))
