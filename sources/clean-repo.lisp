(in-package :om)

(defun clean-dropbox (&optional dir)
  (let ((src-root (or dir (make-pathname :directory (butlast (pathname-directory *load-pathname*) 2)))))
    (mapc #'(lambda (file) 
             
              (if (system::directory-pathname-p file)
                  (if (string-equal ".dropbox" (car (last (pathname-directory file))))
                      (system::call-system (concatenate 'string "rm -Rf \"" (namestring file) "\""))
                    (clean-dropbox file))
                (when (and (pathname-type file)
                           (or (string-equal (pathname-type file) "lisp~")
                               (string-equal (pathname-type file) "DS_STORE")))
                  (delete-file file))
                ))
          (directory (namestring src-root) :directories t))))

(defun clean-git (&optional dir)
  (let ((src-root (or dir (make-pathname :directory (butlast (pathname-directory *load-pathname*) 2)))))
    (mapc #'(lambda (file) 
             
              (if (system::directory-pathname-p file)
                  (if (string-equal ".git" (car (last (pathname-directory file))))
                      (system::call-system (concatenate 'string "rm -Rf \"" (namestring file) "\""))
                    (clean-git file))
                (when (and (pathname-type file)
                           (or (string-equal (pathname-type file) "lisp~")
                               (string-equal (pathname-type file) "DS_STORE")))
                  (delete-file file))
                ))
          (directory (namestring src-root) :directories t))))

(defun clean-svn (&optional dir)
  (let ((src-root (or dir (make-pathname :directory (butlast (pathname-directory *load-pathname*) 2)))))
    (mapc #'(lambda (file) 
             
              (if (system::directory-pathname-p file)
                  (if (string-equal ".svn" (car (last (pathname-directory file))))
                      (system::call-system (concatenate 'string "rm -Rf \"" (namestring file) "\""))
                    (clean-svn file))
                (when (and (pathname-type file)
                           (or (string-equal (pathname-type file) "lisp~")
                               (string-equal (pathname-type file) "DS_STORE")))
                  (delete-file file))
                ))
          (directory (namestring src-root) :directories t))))
              
(defun clean-sources (&optional dir)
  (let ((src-root (or dir (make-pathname :directory (butlast (pathname-directory *load-pathname*) 2)))))
    (mapc #'(lambda (file) 
              (if (system::directory-pathname-p file)
                  (clean-sources file)
                (when (and (pathname-type file)
                           (or (string-equal (pathname-type file) "xfasl")
                               (string-equal (pathname-type file) "fasl")
                               (string-equal (pathname-type file) "DS_STORE")
                               (string-equal (pathname-type file) "nfasl")
                               (string-equal (pathname-type file) "ofasl")
                               (string-equal (pathname-type file) "ufasl")
                               (string-equal (pathname-type file) "lisp~")))
                  (print (concatenate 'string "Deleting " (namestring file) " ..."))
                  (delete-file file)
                  )))
          (directory (namestring src-root) :directories t))
    ))